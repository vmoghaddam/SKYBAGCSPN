using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace APCore.Models
{
    public partial class ppa_cspnContext : DbContext
    {
        public ppa_cspnContext()
        {
        }

        public ppa_cspnContext(DbContextOptions<ppa_cspnContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AcMsn> AcMsns { get; set; }
        public virtual DbSet<Aircraft> Aircraft { get; set; }
        public virtual DbSet<AircraftModel> AircraftModels { get; set; }
        public virtual DbSet<AircraftType> AircraftTypes { get; set; }
        public virtual DbSet<Airport> Airports { get; set; }
        public virtual DbSet<AirportOpenFlight> AirportOpenFlights { get; set; }
        public virtual DbSet<AppCertificate> AppCertificates { get; set; }
        public virtual DbSet<AppCrew> AppCrews { get; set; }
        public virtual DbSet<AppCrewFlight> AppCrewFlights { get; set; }
        public virtual DbSet<AppCrewTime> AppCrewTimes { get; set; }
        public virtual DbSet<AppFdprest> AppFdprests { get; set; }
        public virtual DbSet<AppFtl> AppFtls { get; set; }
        public virtual DbSet<AppFtlab> AppFtlabs { get; set; }
        public virtual DbSet<AppFuel> AppFuels { get; set; }
        public virtual DbSet<AppLeg> AppLegs { get; set; }
        public virtual DbSet<AppLegHelper> AppLegHelpers { get; set; }
        public virtual DbSet<AppLegOp> AppLegOps { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }
        public virtual DbSet<Author> Authors { get; set; }
        public virtual DbSet<AvgFlight> AvgFlights { get; set; }
        public virtual DbSet<Bl> Bls { get; set; }
        public virtual DbSet<Book> Books { get; set; }
        public virtual DbSet<BookAutor> BookAutors { get; set; }
        public virtual DbSet<BookChapter> BookChapters { get; set; }
        public virtual DbSet<BookFile> BookFiles { get; set; }
        public virtual DbSet<BookFileVisit> BookFileVisits { get; set; }
        public virtual DbSet<BookKeyword> BookKeywords { get; set; }
        public virtual DbSet<BookRelatedAircraftType> BookRelatedAircraftTypes { get; set; }
        public virtual DbSet<BookRelatedEmployee> BookRelatedEmployees { get; set; }
        public virtual DbSet<BookRelatedGroup> BookRelatedGroups { get; set; }
        public virtual DbSet<BookRelatedStudyField> BookRelatedStudyFields { get; set; }
        public virtual DbSet<BookSigned> BookSigneds { get; set; }
        public virtual DbSet<Box> Boxes { get; set; }
        public virtual DbSet<BoxCrew> BoxCrews { get; set; }
        public virtual DbSet<BoxFlightPlanItem> BoxFlightPlanItems { get; set; }
        public virtual DbSet<BoxItem> BoxItems { get; set; }
        public virtual DbSet<CaoBasic> CaoBasics { get; set; }
        public virtual DbSet<CaoBasicLicenseType> CaoBasicLicenseTypes { get; set; }
        public virtual DbSet<CaoBasicType> CaoBasicTypes { get; set; }
        public virtual DbSet<CaoCategory> CaoCategories { get; set; }
        public virtual DbSet<CaoType> CaoTypes { get; set; }
        public virtual DbSet<CertificateType> CertificateTypes { get; set; }
        public virtual DbSet<Certification> Certifications { get; set; }
        public virtual DbSet<Chapter> Chapters { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<ClaimRemark> ClaimRemarks { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Coord> Coords { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<CourseAircraftType> CourseAircraftTypes { get; set; }
        public virtual DbSet<CourseCatRate> CourseCatRates { get; set; }
        public virtual DbSet<CourseCategory> CourseCategories { get; set; }
        public virtual DbSet<CourseRelatedAircraftType> CourseRelatedAircraftTypes { get; set; }
        public virtual DbSet<CourseRelatedCourse> CourseRelatedCourses { get; set; }
        public virtual DbSet<CourseRelatedCourseType> CourseRelatedCourseTypes { get; set; }
        public virtual DbSet<CourseRelatedEmployee> CourseRelatedEmployees { get; set; }
        public virtual DbSet<CourseRelatedGroup> CourseRelatedGroups { get; set; }
        public virtual DbSet<CourseRelatedStudyField> CourseRelatedStudyFields { get; set; }
        public virtual DbSet<CourseSession> CourseSessions { get; set; }
        public virtual DbSet<CourseSessionPresence> CourseSessionPresences { get; set; }
        public virtual DbSet<CourseType> CourseTypes { get; set; }
        public virtual DbSet<CrewAvailability> CrewAvailabilities { get; set; }
        public virtual DbSet<CrewAvailabilityStatus> CrewAvailabilityStatuses { get; set; }
        public virtual DbSet<CrewPickupSm> CrewPickupSms { get; set; }
        public virtual DbSet<CrewSecretCode> CrewSecretCodes { get; set; }
        public virtual DbSet<CrewTypeRequirement> CrewTypeRequirements { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Cyear> Cyears { get; set; }
        public virtual DbSet<CyearFlight> CyearFlights { get; set; }
        public virtual DbSet<Day> Days { get; set; }
        public virtual DbSet<DayFlight> DayFlights { get; set; }
        public virtual DbSet<DayGp> DayGps { get; set; }
        public virtual DbSet<DayGp1> DayGps1 { get; set; }
        public virtual DbSet<DelayAvgByAirport> DelayAvgByAirports { get; set; }
        public virtual DbSet<DelayAvgByAirportCategory> DelayAvgByAirportCategories { get; set; }
        public virtual DbSet<DelayAvgByCategory> DelayAvgByCategories { get; set; }
        public virtual DbSet<DelayAvgByRegister> DelayAvgByRegisters { get; set; }
        public virtual DbSet<DelayAvgByRegisterCategory> DelayAvgByRegisterCategories { get; set; }
        public virtual DbSet<DelayCode> DelayCodes { get; set; }
        public virtual DbSet<DelayCodeCategory> DelayCodeCategories { get; set; }
        public virtual DbSet<DelayId> DelayIds { get; set; }
        public virtual DbSet<DelayNotified> DelayNotifieds { get; set; }
        public virtual DbSet<DlyGrp> DlyGrps { get; set; }
        public virtual DbSet<DlyGrpAirport> DlyGrpAirports { get; set; }
        public virtual DbSet<DlyGrpAirportAb> DlyGrpAirportAbs { get; set; }
        public virtual DbSet<DlyGrpAirportCat> DlyGrpAirportCats { get; set; }
        public virtual DbSet<DlyGrpAirportDaily> DlyGrpAirportDailies { get; set; }
        public virtual DbSet<DlyGrpCat> DlyGrpCats { get; set; }
        public virtual DbSet<DlyGrpCatAirportDaily> DlyGrpCatAirportDailies { get; set; }
        public virtual DbSet<DlyGrpCatDaily> DlyGrpCatDailies { get; set; }
        public virtual DbSet<DlyGrpCatRegister> DlyGrpCatRegisters { get; set; }
        public virtual DbSet<DlyGrpCatRegisterDaily> DlyGrpCatRegisterDailies { get; set; }
        public virtual DbSet<DlyGrpDaily> DlyGrpDailies { get; set; }
        public virtual DbSet<DlyGrpFlight> DlyGrpFlights { get; set; }
        public virtual DbSet<DlyGrpFlightAirport> DlyGrpFlightAirports { get; set; }
        public virtual DbSet<DlyGrpFlightCat> DlyGrpFlightCats { get; set; }
        public virtual DbSet<DlyGrpFlightCatAirport> DlyGrpFlightCatAirports { get; set; }
        public virtual DbSet<DlyGrpFlightCatRegister> DlyGrpFlightCatRegisters { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<Dood> Doods { get; set; }
        public virtual DbSet<DutyFlight> DutyFlights { get; set; }
        public virtual DbSet<Efbasr> Efbasrs { get; set; }
        public virtual DbSet<EfbbirdStrikeCao> EfbbirdStrikeCaos { get; set; }
        public virtual DbSet<Efbdsprelease> Efbdspreleases { get; set; }
        public virtual DbSet<EfbflightIrregularity> EfbflightIrregularities { get; set; }
        public virtual DbSet<EfboccurrenceCao> EfboccurrenceCaos { get; set; }
        public virtual DbSet<Efbreason> Efbreasons { get; set; }
        public virtual DbSet<EfbvoyageReport> EfbvoyageReports { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeBookStatus> EmployeeBookStatuses { get; set; }
        public virtual DbSet<EmployeeCalendar> EmployeeCalendars { get; set; }
        public virtual DbSet<EmployeeCalendarSplited> EmployeeCalendarSpliteds { get; set; }
        public virtual DbSet<EmployeeLocation> EmployeeLocations { get; set; }
        public virtual DbSet<ExpFlight> ExpFlights { get; set; }
        public virtual DbSet<ExtIdea> ExtIdeas { get; set; }
        public virtual DbSet<Extension> Extensions { get; set; }
        public virtual DbSet<ExtensionHistory> ExtensionHistories { get; set; }
        public virtual DbSet<Fdm> Fdms { get; set; }
        public virtual DbSet<FdmactionRecipient> FdmactionRecipients { get; set; }
        public virtual DbSet<FdmactionType> FdmactionTypes { get; set; }
        public virtual DbSet<FdmairportMonthly> FdmairportMonthlies { get; set; }
        public virtual DbSet<FdmcptAirportMonthly> FdmcptAirportMonthlies { get; set; }
        public virtual DbSet<FdmcptAll> FdmcptAlls { get; set; }
        public virtual DbSet<FdmcptAnnually> FdmcptAnnuallies { get; set; }
        public virtual DbSet<FdmcptDaily> FdmcptDailies { get; set; }
        public virtual DbSet<FdmcptEventDaily> FdmcptEventDailies { get; set; }
        public virtual DbSet<FdmcptEventMonthly> FdmcptEventMonthlies { get; set; }
        public virtual DbSet<FdmcptFoDaily> FdmcptFoDailies { get; set; }
        public virtual DbSet<FdmcptFoMonthly> FdmcptFoMonthlies { get; set; }
        public virtual DbSet<FdmcptIpDaily> FdmcptIpDailies { get; set; }
        public virtual DbSet<FdmcptIpMonthly> FdmcptIpMonthlies { get; set; }
        public virtual DbSet<FdmcptMonthly> FdmcptMonthlies { get; set; }
        public virtual DbSet<Fdmdaily> Fdmdailies { get; set; }
        public virtual DbSet<FdmeventAction> FdmeventActions { get; set; }
        public virtual DbSet<FdmeventDaily> FdmeventDailies { get; set; }
        public virtual DbSet<FdmeventMonthly> FdmeventMonthlies { get; set; }
        public virtual DbSet<FdmfoDaily> FdmfoDailies { get; set; }
        public virtual DbSet<FdmfoEventDaily> FdmfoEventDailies { get; set; }
        public virtual DbSet<FdmfoEventMonthly> FdmfoEventMonthlies { get; set; }
        public virtual DbSet<FdmfoMonthly> FdmfoMonthlies { get; set; }
        public virtual DbSet<FdmphaseMonthly> FdmphaseMonthlies { get; set; }
        public virtual DbSet<FdmphaseRouteDaily> FdmphaseRouteDailies { get; set; }
        public virtual DbSet<FdmphaseTypeMonthly> FdmphaseTypeMonthlies { get; set; }
        public virtual DbSet<FdmregCptAnnually> FdmregCptAnnuallies { get; set; }
        public virtual DbSet<FdmregCptDaily> FdmregCptDailies { get; set; }
        public virtual DbSet<FdmregCptFoAnnully> FdmregCptFoAnnullies { get; set; }
        public virtual DbSet<FdmregCptFoDaily> FdmregCptFoDailies { get; set; }
        public virtual DbSet<FdmregCptFoMonthly> FdmregCptFoMonthlies { get; set; }
        public virtual DbSet<FdmregCptMonthly> FdmregCptMonthlies { get; set; }
        public virtual DbSet<FdmregDaily> FdmregDailies { get; set; }
        public virtual DbSet<FdmregEventDaily> FdmregEventDailies { get; set; }
        public virtual DbSet<FdmregEventMonthly> FdmregEventMonthlies { get; set; }
        public virtual DbSet<FdmregFoDaily> FdmregFoDailies { get; set; }
        public virtual DbSet<FdmregFoMonthly> FdmregFoMonthlies { get; set; }
        public virtual DbSet<FdmregMonthly> FdmregMonthlies { get; set; }
        public virtual DbSet<FdmtypeAnnually> FdmtypeAnnuallies { get; set; }
        public virtual DbSet<FdmtypeDaily> FdmtypeDailies { get; set; }
        public virtual DbSet<FdmtypeMonthly> FdmtypeMonthlies { get; set; }
        public virtual DbSet<Fdp> Fdps { get; set; }
        public virtual DbSet<Fdpextra> Fdpextras { get; set; }
        public virtual DbSet<Fdpitem> Fdpitems { get; set; }
        public virtual DbSet<FdpitemRank> FdpitemRanks { get; set; }
        public virtual DbSet<Fdplog> Fdplogs { get; set; }
        public virtual DbSet<FdpmaxDaily> FdpmaxDailies { get; set; }
        public virtual DbSet<FdpvisibleDate> FdpvisibleDates { get; set; }
        public virtual DbSet<FileType> FileTypes { get; set; }
        public virtual DbSet<FixTimeRoute> FixTimeRoutes { get; set; }
        public virtual DbSet<FixTimeRouteExtra> FixTimeRouteExtras { get; set; }
        public virtual DbSet<FixTimeRouteHistory> FixTimeRouteHistories { get; set; }
        public virtual DbSet<FlighPlanCalendar> FlighPlanCalendars { get; set; }
        public virtual DbSet<FlightChangeHistory> FlightChangeHistories { get; set; }
        public virtual DbSet<FlightCrew> FlightCrews { get; set; }
        public virtual DbSet<FlightCrewArchived> FlightCrewArchiveds { get; set; }
        public virtual DbSet<FlightCrewChangeHistory> FlightCrewChangeHistories { get; set; }
        public virtual DbSet<FlightDatePart> FlightDateParts { get; set; }
        public virtual DbSet<FlightDelay> FlightDelays { get; set; }
        public virtual DbSet<FlightGroup> FlightGroups { get; set; }
        public virtual DbSet<FlightInformation> FlightInformations { get; set; }
        public virtual DbSet<FlightInformation1> FlightInformations1 { get; set; }
        public virtual DbSet<FlightLink> FlightLinks { get; set; }
        public virtual DbSet<FlightPermit> FlightPermits { get; set; }
        public virtual DbSet<FlightPlan> FlightPlans { get; set; }
        public virtual DbSet<FlightPlanCalanderCrew> FlightPlanCalanderCrews { get; set; }
        public virtual DbSet<FlightPlanDay> FlightPlanDays { get; set; }
        public virtual DbSet<FlightPlanGroup> FlightPlanGroups { get; set; }
        public virtual DbSet<FlightPlanItem> FlightPlanItems { get; set; }
        public virtual DbSet<FlightPlanItemPermit> FlightPlanItemPermits { get; set; }
        public virtual DbSet<FlightPlanMonth> FlightPlanMonths { get; set; }
        public virtual DbSet<FlightPlanRegister> FlightPlanRegisters { get; set; }
        public virtual DbSet<FlightPlanStatus> FlightPlanStatuses { get; set; }
        public virtual DbSet<FlightRegisterChangeLog> FlightRegisterChangeLogs { get; set; }
        public virtual DbSet<FlightRoute> FlightRoutes { get; set; }
        public virtual DbSet<FlightStatus> FlightStatuses { get; set; }
        public virtual DbSet<FlightStatusLog> FlightStatusLogs { get; set; }
        public virtual DbSet<FlightStatusWeather> FlightStatusWeathers { get; set; }
        public virtual DbSet<Fltgroup> Fltgroups { get; set; }
        public virtual DbSet<FltgroupItem> FltgroupItems { get; set; }
        public virtual DbSet<Fsg> Fsgs { get; set; }
        public virtual DbSet<FtlflightTime> FtlflightTimes { get; set; }
        public virtual DbSet<FtlflightTimeActual> FtlflightTimeActuals { get; set; }
        public virtual DbSet<FtlflightTimeActualDaily> FtlflightTimeActualDailies { get; set; }
        public virtual DbSet<FtlflightTimeRatioMonthly> FtlflightTimeRatioMonthlies { get; set; }
        public virtual DbSet<FtlflightTimeRatioTotal> FtlflightTimeRatioTotals { get; set; }
        public virtual DbSet<Ftlhistory> Ftlhistories { get; set; }
        public virtual DbSet<Ftlsummary> Ftlsummaries { get; set; }
        public virtual DbSet<Ftlsummary1> Ftlsummaries1 { get; set; }
        public virtual DbSet<FuelAvg> FuelAvgs { get; set; }
        public virtual DbSet<FuelAvgReg> FuelAvgRegs { get; set; }
        public virtual DbSet<GDelayCode> GDelayCodes { get; set; }
        public virtual DbSet<GOpOneDelayType> GOpOneDelayTypes { get; set; }
        public virtual DbSet<GrpAirport> GrpAirports { get; set; }
        public virtual DbSet<GrpDelayCategory> GrpDelayCategories { get; set; }
        public virtual DbSet<GrpFlight> GrpFlights { get; set; }
        public virtual DbSet<GrpFlightAirport> GrpFlightAirports { get; set; }
        public virtual DbSet<GrpFlightCal> GrpFlightCals { get; set; }
        public virtual DbSet<GrpFlightDaily> GrpFlightDailies { get; set; }
        public virtual DbSet<GrpFlightReg> GrpFlightRegs { get; set; }
        public virtual DbSet<H2> H2s { get; set; }
        public virtual DbSet<HelperAirportFlight> HelperAirportFlights { get; set; }
        public virtual DbSet<HelperApplicableCourse> HelperApplicableCourses { get; set; }
        public virtual DbSet<HelperBook> HelperBooks { get; set; }
        public virtual DbSet<HelperBookApplicableEmployee> HelperBookApplicableEmployees { get; set; }
        public virtual DbSet<HelperBookApplicableEmployeeStatus> HelperBookApplicableEmployeeStatuses { get; set; }
        public virtual DbSet<HelperBookVisited> HelperBookVisiteds { get; set; }
        public virtual DbSet<HelperBox> HelperBoxes { get; set; }
        public virtual DbSet<HelperBoxCrew> HelperBoxCrews { get; set; }
        public virtual DbSet<HelperBoxCrewTime> HelperBoxCrewTimes { get; set; }
        public virtual DbSet<HelperBoxFlightPlanItem> HelperBoxFlightPlanItems { get; set; }
        public virtual DbSet<HelperBoxSector> HelperBoxSectors { get; set; }
        public virtual DbSet<HelperBoxTime> HelperBoxTimes { get; set; }
        public virtual DbSet<HelperCalanderAssignedRegister> HelperCalanderAssignedRegisters { get; set; }
        public virtual DbSet<HelperCalendarDate> HelperCalendarDates { get; set; }
        public virtual DbSet<HelperCertAvsec> HelperCertAvsecs { get; set; }
        public virtual DbSet<HelperCertCcrm> HelperCertCcrms { get; set; }
        public virtual DbSet<HelperCertCmc> HelperCertCmcs { get; set; }
        public virtual DbSet<HelperCertColdwx> HelperCertColdwxes { get; set; }
        public virtual DbSet<HelperCertCrm> HelperCertCrms { get; set; }
        public virtual DbSet<HelperCertDg> HelperCertDgs { get; set; }
        public virtual DbSet<HelperCertFirstaid> HelperCertFirstaids { get; set; }
        public virtual DbSet<HelperCertHotwx> HelperCertHotwxes { get; set; }
        public virtual DbSet<HelperCertLicense> HelperCertLicenses { get; set; }
        public virtual DbSet<HelperCertLine> HelperCertLines { get; set; }
        public virtual DbSet<HelperCertLpc> HelperCertLpcs { get; set; }
        public virtual DbSet<HelperCertLpr> HelperCertLprs { get; set; }
        public virtual DbSet<HelperCertMedical> HelperCertMedicals { get; set; }
        public virtual DbSet<HelperCertOpc> HelperCertOpcs { get; set; }
        public virtual DbSet<HelperCertRecurrent> HelperCertRecurrents { get; set; }
        public virtual DbSet<HelperCertSeptp> HelperCertSeptps { get; set; }
        public virtual DbSet<HelperCertSeptt> HelperCertSeptts { get; set; }
        public virtual DbSet<HelperCertSm> HelperCertSms { get; set; }
        public virtual DbSet<HelperCertTre> HelperCertTres { get; set; }
        public virtual DbSet<HelperCertTri> HelperCertTris { get; set; }
        public virtual DbSet<HelperCertificate> HelperCertificates { get; set; }
        public virtual DbSet<HelperCourse> HelperCourses { get; set; }
        public virtual DbSet<HelperCrewTime> HelperCrewTimes { get; set; }
        public virtual DbSet<HelperCrewTimeSubQuery> HelperCrewTimeSubQueries { get; set; }
        public virtual DbSet<HelperCurrentLocation> HelperCurrentLocations { get; set; }
        public virtual DbSet<HelperDelayAirportDaily> HelperDelayAirportDailies { get; set; }
        public virtual DbSet<HelperDelayAirportMonthly> HelperDelayAirportMonthlies { get; set; }
        public virtual DbSet<HelperDelayCatAirportDaily> HelperDelayCatAirportDailies { get; set; }
        public virtual DbSet<HelperDelayCatAirportMonthly> HelperDelayCatAirportMonthlies { get; set; }
        public virtual DbSet<HelperDelayCatDaily> HelperDelayCatDailies { get; set; }
        public virtual DbSet<HelperDelayCatMonthly> HelperDelayCatMonthlies { get; set; }
        public virtual DbSet<HelperDelayCatRegisterDaily> HelperDelayCatRegisterDailies { get; set; }
        public virtual DbSet<HelperDelayCatRegisterMonthly> HelperDelayCatRegisterMonthlies { get; set; }
        public virtual DbSet<HelperDelayDaily> HelperDelayDailies { get; set; }
        public virtual DbSet<HelperDelayMonthly> HelperDelayMonthlies { get; set; }
        public virtual DbSet<HelperDutyCalendar> HelperDutyCalendars { get; set; }
        public virtual DbSet<HelperDutyStart> HelperDutyStarts { get; set; }
        public virtual DbSet<HelperEmployee> HelperEmployees { get; set; }
        public virtual DbSet<HelperEmployeeName> HelperEmployeeNames { get; set; }
        public virtual DbSet<HelperFdp> HelperFdps { get; set; }
        public virtual DbSet<HelperFdpItemForDutyCal> HelperFdpItemForDutyCals { get; set; }
        public virtual DbSet<HelperFdpbox> HelperFdpboxes { get; set; }
        public virtual DbSet<HelperFdpdate> HelperFdpdates { get; set; }
        public virtual DbSet<HelperFdpfirst> HelperFdpfirsts { get; set; }
        public virtual DbSet<HelperFdpitem> HelperFdpitems { get; set; }
        public virtual DbSet<HelperFdpitemNodh> HelperFdpitemNodhs { get; set; }
        public virtual DbSet<HelperFdpitemSex> HelperFdpitemSexes { get; set; }
        public virtual DbSet<HelperFdpranked> HelperFdprankeds { get; set; }
        public virtual DbSet<HelperFdprest> HelperFdprests { get; set; }
        public virtual DbSet<HelperFdptemplateMferror> HelperFdptemplateMferrors { get; set; }
        public virtual DbSet<HelperFixTimeRoute> HelperFixTimeRoutes { get; set; }
        public virtual DbSet<HelperFlightCrewMatchingList> HelperFlightCrewMatchingLists { get; set; }
        public virtual DbSet<HelperFlightCrewSum> HelperFlightCrewSums { get; set; }
        public virtual DbSet<HelperFlightLink> HelperFlightLinks { get; set; }
        public virtual DbSet<HelperFlightMovement> HelperFlightMovements { get; set; }
        public virtual DbSet<HelperFlightPlanItem> HelperFlightPlanItems { get; set; }
        public virtual DbSet<HelperFlightPlanItemCrew> HelperFlightPlanItemCrews { get; set; }
        public virtual DbSet<HelperFlightPlanRegister> HelperFlightPlanRegisters { get; set; }
        public virtual DbSet<HelperFlightPlanRegisterAssigned> HelperFlightPlanRegisterAssigneds { get; set; }
        public virtual DbSet<HelperFlightPlanType> HelperFlightPlanTypes { get; set; }
        public virtual DbSet<HelperFlightSexSum> HelperFlightSexSums { get; set; }
        public virtual DbSet<HelperFuelAvg> HelperFuelAvgs { get; set; }
        public virtual DbSet<HelperFuelAvgReg> HelperFuelAvgRegs { get; set; }
        public virtual DbSet<HelperFuelMonthly> HelperFuelMonthlies { get; set; }
        public virtual DbSet<HelperGrpFlight> HelperGrpFlights { get; set; }
        public virtual DbSet<HelperIdeaUnique> HelperIdeaUniques { get; set; }
        public virtual DbSet<HelperMatchingList> HelperMatchingLists { get; set; }
        public virtual DbSet<HelperMaxFdp> HelperMaxFdps { get; set; }
        public virtual DbSet<HelperMsn> HelperMsns { get; set; }
        public virtual DbSet<HelperPerson> HelperPeople { get; set; }
        public virtual DbSet<HelperPersonModified> HelperPersonModifieds { get; set; }
        public virtual DbSet<HelperRealMsn> HelperRealMsns { get; set; }
        public virtual DbSet<HelperRestPeriod> HelperRestPeriods { get; set; }
        public virtual DbSet<HelperUsedAirport> HelperUsedAirports { get; set; }
        public virtual DbSet<Idea> Ideas { get; set; }
        public virtual DbSet<IdeaAll> IdeaAlls { get; set; }
        public virtual DbSet<IdeaSession> IdeaSessions { get; set; }
        public virtual DbSet<IdeaSessionItem> IdeaSessionItems { get; set; }
        public virtual DbSet<IdeaSessionItemTemp> IdeaSessionItemTemps { get; set; }
        public virtual DbSet<IdeaSessionTemp> IdeaSessionTemps { get; set; }
        public virtual DbSet<IdeaSessionUpdateError> IdeaSessionUpdateErrors { get; set; }
        public virtual DbSet<IdeaUnique> IdeaUniques { get; set; }
        public virtual DbSet<Ideapeople2> Ideapeople2s { get; set; }
        public virtual DbSet<Ideaperson> Ideapeople { get; set; }
        public virtual DbSet<Import2020> Import2020s { get; set; }
        public virtual DbSet<ImportPlan> ImportPlans { get; set; }
        public virtual DbSet<Index> Indices { get; set; }
        public virtual DbSet<Ipaccess> Ipaccesses { get; set; }
        public virtual DbSet<JobGroup> JobGroups { get; set; }
        public virtual DbSet<Journal> Journals { get; set; }
        public virtual DbSet<Journals2> Journals2s { get; set; }
        public virtual DbSet<LibraryFolder> LibraryFolders { get; set; }
        public virtual DbSet<LicenseResultBasic> LicenseResultBasics { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<LogProp> LogProps { get; set; }
        public virtual DbSet<LoginInfo> LoginInfos { get; set; }
        public virtual DbSet<MainType> MainTypes { get; set; }
        public virtual DbSet<MapDelayRemark> MapDelayRemarks { get; set; }
        public virtual DbSet<MatchingList> MatchingLists { get; set; }
        public virtual DbSet<MigrationHistory> MigrationHistories { get; set; }
        public virtual DbSet<MonthGp> MonthGps { get; set; }
        public virtual DbSet<MonthGpg> MonthGpgs { get; set; }
        public virtual DbSet<Mv> Mvs { get; set; }
        public virtual DbSet<Mvt> Mvts { get; set; }
        public virtual DbSet<Mvtapi> Mvtapis { get; set; }
        public virtual DbSet<Nbl> Nbls { get; set; }
        public virtual DbSet<Newbl> Newbls { get; set; }
        public virtual DbSet<NiraHistory> NiraHistories { get; set; }
        public virtual DbSet<Notam> Notams { get; set; }
        public virtual DbSet<Notamitem> Notamitems { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<NotificationGroup> NotificationGroups { get; set; }
        public virtual DbSet<OffItem> OffItems { get; set; }
        public virtual DbSet<Ofpimport> Ofpimports { get; set; }
        public virtual DbSet<OfpimportItem> OfpimportItems { get; set; }
        public virtual DbSet<OfpimportProp> OfpimportProps { get; set; }
        public virtual DbSet<OpsCrewPhone> OpsCrewPhones { get; set; }
        public virtual DbSet<Option> Options { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<Passcockpit> Passcockpits { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<PersonAircraftType> PersonAircraftTypes { get; set; }
        public virtual DbSet<PersonCaoLicenceHistory> PersonCaoLicenceHistories { get; set; }
        public virtual DbSet<PersonCaoLicense> PersonCaoLicenses { get; set; }
        public virtual DbSet<PersonCourse> PersonCourses { get; set; }
        public virtual DbSet<PersonCustomer> PersonCustomers { get; set; }
        public virtual DbSet<PersonDocument> PersonDocuments { get; set; }
        public virtual DbSet<PersonDocumentFile> PersonDocumentFiles { get; set; }
        public virtual DbSet<PersonEducation> PersonEducations { get; set; }
        public virtual DbSet<PersonEducationDocument> PersonEducationDocuments { get; set; }
        public virtual DbSet<PersonExperiense> PersonExperienses { get; set; }
        public virtual DbSet<PersonHistory> PersonHistories { get; set; }
        public virtual DbSet<PersonMisc> PersonMiscs { get; set; }
        public virtual DbSet<PersonRating> PersonRatings { get; set; }
        public virtual DbSet<PersonRatingDocument> PersonRatingDocuments { get; set; }
        public virtual DbSet<PlanItem> PlanItems { get; set; }
        public virtual DbSet<Plupd> Plupds { get; set; }
        public virtual DbSet<Rating> Ratings { get; set; }
        public virtual DbSet<RefreshToken> RefreshTokens { get; set; }
        public virtual DbSet<RegisterGround> RegisterGrounds { get; set; }
        public virtual DbSet<ReportRoster> ReportRosters { get; set; }
        public virtual DbSet<RoleOrganizational> RoleOrganizationals { get; set; }
        public virtual DbSet<RosterCrewSheet> RosterCrewSheets { get; set; }
        public virtual DbSet<RouteDistance> RouteDistances { get; set; }
        public virtual DbSet<RptAirportDaily> RptAirportDailies { get; set; }
        public virtual DbSet<RptDeadHead> RptDeadHeads { get; set; }
        public virtual DbSet<RptDelayAirportDaily> RptDelayAirportDailies { get; set; }
        public virtual DbSet<RptDelayAirportDailyCal> RptDelayAirportDailyCals { get; set; }
        public virtual DbSet<RptDelayAirportMonthly> RptDelayAirportMonthlies { get; set; }
        public virtual DbSet<RptDelayAirportMonthlyCal> RptDelayAirportMonthlyCals { get; set; }
        public virtual DbSet<RptDelayCatAirportDaily> RptDelayCatAirportDailies { get; set; }
        public virtual DbSet<RptDelayCatAirportDailyCal> RptDelayCatAirportDailyCals { get; set; }
        public virtual DbSet<RptDelayCatAirportMonthly> RptDelayCatAirportMonthlies { get; set; }
        public virtual DbSet<RptDelayCatAirportMonthlyCal> RptDelayCatAirportMonthlyCals { get; set; }
        public virtual DbSet<RptDelayCatDaily> RptDelayCatDailies { get; set; }
        public virtual DbSet<RptDelayCatDailyCal> RptDelayCatDailyCals { get; set; }
        public virtual DbSet<RptDelayCatMonthly> RptDelayCatMonthlies { get; set; }
        public virtual DbSet<RptDelayCatMonthlyCal> RptDelayCatMonthlyCals { get; set; }
        public virtual DbSet<RptDelayCatRegisterDaily> RptDelayCatRegisterDailies { get; set; }
        public virtual DbSet<RptDelayCatRegisterDailyCal> RptDelayCatRegisterDailyCals { get; set; }
        public virtual DbSet<RptDelayCatRegisterMonthly> RptDelayCatRegisterMonthlies { get; set; }
        public virtual DbSet<RptDelayCatRegisterMonthlyCal> RptDelayCatRegisterMonthlyCals { get; set; }
        public virtual DbSet<RptDelayDaily> RptDelayDailies { get; set; }
        public virtual DbSet<RptDelayDailyCal> RptDelayDailyCals { get; set; }
        public virtual DbSet<RptDelayLeg> RptDelayLegs { get; set; }
        public virtual DbSet<RptDelayLegMap> RptDelayLegMaps { get; set; }
        public virtual DbSet<RptDelayMonthly> RptDelayMonthlies { get; set; }
        public virtual DbSet<RptDelayMonthlyCal> RptDelayMonthlyCals { get; set; }
        public virtual DbSet<RptFdp> RptFdps { get; set; }
        public virtual DbSet<RptFdpitem> RptFdpitems { get; set; }
        public virtual DbSet<RptFdpmonthly> RptFdpmonthlies { get; set; }
        public virtual DbSet<RptFdpmonthlyPersian> RptFdpmonthlyPersians { get; set; }
        public virtual DbSet<RptFlight> RptFlights { get; set; }
        public virtual DbSet<RptFuelDaily> RptFuelDailies { get; set; }
        public virtual DbSet<RptFuelDailyCal> RptFuelDailyCals { get; set; }
        public virtual DbSet<RptFuelDailyRegister> RptFuelDailyRegisters { get; set; }
        public virtual DbSet<RptFuelDailyRoute> RptFuelDailyRoutes { get; set; }
        public virtual DbSet<RptFuelLeg> RptFuelLegs { get; set; }
        public virtual DbSet<RptFuelMonthly> RptFuelMonthlies { get; set; }
        public virtual DbSet<RptFuelMonthlyCal> RptFuelMonthlyCals { get; set; }
        public virtual DbSet<RptFuelMonthlyRegister> RptFuelMonthlyRegisters { get; set; }
        public virtual DbSet<RptFuelMonthlyRoute> RptFuelMonthlyRoutes { get; set; }
        public virtual DbSet<RptNoFdp> RptNoFdps { get; set; }
        public virtual DbSet<RptNoFdpmonthlyPersian> RptNoFdpmonthlyPersians { get; set; }
        public virtual DbSet<RptRedirect> RptRedirects { get; set; }
        public virtual DbSet<RptReposition> RptRepositions { get; set; }
        public virtual DbSet<RvAircraft> RvAircrafts { get; set; }
        public virtual DbSet<RvAssign> RvAssigns { get; set; }
        public virtual DbSet<RvCrew> RvCrews { get; set; }
        public virtual DbSet<RvCrewRpt> RvCrewRpts { get; set; }
        public virtual DbSet<RvDaily> RvDailies { get; set; }
        public virtual DbSet<RvDelivery> RvDeliveries { get; set; }
        public virtual DbSet<RvFlight> RvFlights { get; set; }
        public virtual DbSet<RvFlightInformation> RvFlightInformations { get; set; }
        public virtual DbSet<RvLeg> RvLegs { get; set; }
        public virtual DbSet<RvTraining> RvTrainings { get; set; }
        public virtual DbSet<Sc> Scs { get; set; }
        public virtual DbSet<Smsgroup> Smsgroups { get; set; }
        public virtual DbSet<Smshistory> Smshistories { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<SumActiveCourse> SumActiveCourses { get; set; }
        public virtual DbSet<SumBoxTime> SumBoxTimes { get; set; }
        public virtual DbSet<SumCarelessEmployee> SumCarelessEmployees { get; set; }
        public virtual DbSet<SumCarelessEmployeeTotal> SumCarelessEmployeeTotals { get; set; }
        public virtual DbSet<SumCertificateStatus> SumCertificateStatuses { get; set; }
        public virtual DbSet<SumCertificateType> SumCertificateTypes { get; set; }
        public virtual DbSet<SumEmployeeAge> SumEmployeeAges { get; set; }
        public virtual DbSet<SumEmployeeDateAlert> SumEmployeeDateAlerts { get; set; }
        public virtual DbSet<SumEmployeeDegree> SumEmployeeDegrees { get; set; }
        public virtual DbSet<SumEmployeeExp> SumEmployeeExps { get; set; }
        public virtual DbSet<SumEmployeeJobGroup> SumEmployeeJobGroups { get; set; }
        public virtual DbSet<SumEmployeeLibraryAlert> SumEmployeeLibraryAlerts { get; set; }
        public virtual DbSet<SumEmployeeLocation> SumEmployeeLocations { get; set; }
        public virtual DbSet<SumEmployeeMaritalStatus> SumEmployeeMaritalStatuses { get; set; }
        public virtual DbSet<SumEmployeeSex> SumEmployeeSexes { get; set; }
        public virtual DbSet<SumEmployeeStudyField> SumEmployeeStudyFields { get; set; }
        public virtual DbSet<SumFlightDelay> SumFlightDelays { get; set; }
        public virtual DbSet<SumLibraryAddedByMonth> SumLibraryAddedByMonths { get; set; }
        public virtual DbSet<SumLibraryDownloadByMonth> SumLibraryDownloadByMonths { get; set; }
        public virtual DbSet<SunTime> SunTimes { get; set; }
        public virtual DbSet<TableBlockTime> TableBlockTimes { get; set; }
        public virtual DbSet<TableCrewTime> TableCrewTimes { get; set; }
        public virtual DbSet<TableDutyFdp> TableDutyFdps { get; set; }
        public virtual DbSet<TableFlightFdp> TableFlightFdps { get; set; }
        public virtual DbSet<TempAirport> TempAirports { get; set; }
        public virtual DbSet<TempGunt> TempGunts { get; set; }
        public virtual DbSet<TempUser> TempUsers { get; set; }
        public virtual DbSet<Tempname> Tempnames { get; set; }
        public virtual DbSet<ThirdPartySyncHistory> ThirdPartySyncHistories { get; set; }
        public virtual DbSet<Tolndcard> Tolndcards { get; set; }
        public virtual DbSet<Trgtest> Trgtests { get; set; }
        public virtual DbSet<UmUser> UmUsers { get; set; }
        public virtual DbSet<UpdBl> UpdBls { get; set; }
        public virtual DbSet<UpdatedPlanFlight> UpdatedPlanFlights { get; set; }
        public virtual DbSet<Updbl2> Updbl2s { get; set; }
        public virtual DbSet<UserActivity> UserActivities { get; set; }
        public virtual DbSet<UserActivityMenuHit> UserActivityMenuHits { get; set; }
        public virtual DbSet<UserExt> UserExts { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
        public virtual DbSet<VcyearFlight> VcyearFlights { get; set; }
        public virtual DbSet<ViewAccess> ViewAccesses { get; set; }
        public virtual DbSet<ViewAircraftType> ViewAircraftTypes { get; set; }
        public virtual DbSet<ViewAirport> ViewAirports { get; set; }
        public virtual DbSet<ViewApplicableCourse> ViewApplicableCourses { get; set; }
        public virtual DbSet<ViewApplicableCoursePerson> ViewApplicableCoursePeople { get; set; }
        public virtual DbSet<ViewBoardSummary> ViewBoardSummaries { get; set; }
        public virtual DbSet<ViewBook> ViewBooks { get; set; }
        public virtual DbSet<ViewBookApplicableEmployee> ViewBookApplicableEmployees { get; set; }
        public virtual DbSet<ViewBookApplicableEmployeeAb> ViewBookApplicableEmployeeAbs { get; set; }
        public virtual DbSet<ViewBookApplicableEmployeeX> ViewBookApplicableEmployeices { get; set; }
        public virtual DbSet<ViewBookAuthor> ViewBookAuthors { get; set; }
        public virtual DbSet<ViewBookChapter> ViewBookChapters { get; set; }
        public virtual DbSet<ViewBookFile> ViewBookFiles { get; set; }
        public virtual DbSet<ViewBookFileVisited> ViewBookFileVisiteds { get; set; }
        public virtual DbSet<ViewBox> ViewBoxes { get; set; }
        public virtual DbSet<ViewBoxCrew> ViewBoxCrews { get; set; }
        public virtual DbSet<ViewBoxCrewFlight> ViewBoxCrewFlights { get; set; }
        public virtual DbSet<ViewBoxCrewRequirement> ViewBoxCrewRequirements { get; set; }
        public virtual DbSet<ViewCaoType> ViewCaoTypes { get; set; }
        public virtual DbSet<ViewCertificate> ViewCertificates { get; set; }
        public virtual DbSet<ViewCertification> ViewCertifications { get; set; }
        public virtual DbSet<ViewCity> ViewCities { get; set; }
        public virtual DbSet<ViewClaim> ViewClaims { get; set; }
        public virtual DbSet<ViewCourse> ViewCourses { get; set; }
        public virtual DbSet<ViewCourseNotificationEnabled> ViewCourseNotificationEnableds { get; set; }
        public virtual DbSet<ViewCourseSession> ViewCourseSessions { get; set; }
        public virtual DbSet<ViewCourseType> ViewCourseTypes { get; set; }
        public virtual DbSet<ViewCrew> ViewCrews { get; set; }
        public virtual DbSet<ViewCrewAssignFdp> ViewCrewAssignFdps { get; set; }
        public virtual DbSet<ViewCrewCalendar> ViewCrewCalendars { get; set; }
        public virtual DbSet<ViewCrewCalendarSplited> ViewCrewCalendarSpliteds { get; set; }
        public virtual DbSet<ViewCrewCertificatesSummary> ViewCrewCertificatesSummaries { get; set; }
        public virtual DbSet<ViewCrewCode> ViewCrewCodes { get; set; }
        public virtual DbSet<ViewCrewDuty> ViewCrewDuties { get; set; }
        public virtual DbSet<ViewCrewDutyNoReg> ViewCrewDutyNoRegs { get; set; }
        public virtual DbSet<ViewCrewDutyTimeLine> ViewCrewDutyTimeLines { get; set; }
        public virtual DbSet<ViewCrewFlightApp> ViewCrewFlightApps { get; set; }
        public virtual DbSet<ViewCrewList> ViewCrewLists { get; set; }
        public virtual DbSet<ViewCrewNoLocation> ViewCrewNoLocations { get; set; }
        public virtual DbSet<ViewCrewPickupSm> ViewCrewPickupSms { get; set; }
        public virtual DbSet<ViewCrewTime> ViewCrewTimes { get; set; }
        public virtual DbSet<ViewCrewTimeDetail> ViewCrewTimeDetails { get; set; }
        public virtual DbSet<ViewCrewValid> ViewCrewValids { get; set; }
        public virtual DbSet<ViewCrewValidFtl> ViewCrewValidFtls { get; set; }
        public virtual DbSet<ViewDailyRosterFlight> ViewDailyRosterFlights { get; set; }
        public virtual DbSet<ViewDay> ViewDays { get; set; }
        public virtual DbSet<ViewDayDuty> ViewDayDuties { get; set; }
        public virtual DbSet<ViewDayDuty7> ViewDayDuty7s { get; set; }
        public virtual DbSet<ViewDayDutyFlight> ViewDayDutyFlights { get; set; }
        public virtual DbSet<ViewDayFlight> ViewDayFlights { get; set; }
        public virtual DbSet<ViewDayFlight28> ViewDayFlight28s { get; set; }
        public virtual DbSet<ViewDayGp> ViewDayGps { get; set; }
        public virtual DbSet<ViewDayOffRanked> ViewDayOffRankeds { get; set; }
        public virtual DbSet<ViewDayRanked> ViewDayRankeds { get; set; }
        public virtual DbSet<ViewDelayAirportCategoryGrouped> ViewDelayAirportCategoryGroupeds { get; set; }
        public virtual DbSet<ViewDelayAirportGrouped> ViewDelayAirportGroupeds { get; set; }
        public virtual DbSet<ViewDelayCategoryGrouped> ViewDelayCategoryGroupeds { get; set; }
        public virtual DbSet<ViewDelayCode> ViewDelayCodes { get; set; }
        public virtual DbSet<ViewDelayDaily> ViewDelayDailies { get; set; }
        public virtual DbSet<ViewDelayDailyAirport> ViewDelayDailyAirports { get; set; }
        public virtual DbSet<ViewDelayDailyAirportCategory> ViewDelayDailyAirportCategories { get; set; }
        public virtual DbSet<ViewDelayDailyCategory> ViewDelayDailyCategories { get; set; }
        public virtual DbSet<ViewDelayGrouped> ViewDelayGroupeds { get; set; }
        public virtual DbSet<ViewDelayMonthly> ViewDelayMonthlies { get; set; }
        public virtual DbSet<ViewDelayMonthlyAirport> ViewDelayMonthlyAirports { get; set; }
        public virtual DbSet<ViewDelayMonthlyAirportCategory> ViewDelayMonthlyAirportCategories { get; set; }
        public virtual DbSet<ViewDelayMonthlyCategory> ViewDelayMonthlyCategories { get; set; }
        public virtual DbSet<ViewDelayWeekly> ViewDelayWeeklies { get; set; }
        public virtual DbSet<ViewDelayWeeklyAirport> ViewDelayWeeklyAirports { get; set; }
        public virtual DbSet<ViewDelayWeeklyAirportCategory> ViewDelayWeeklyAirportCategories { get; set; }
        public virtual DbSet<ViewDelayWeeklyCategory> ViewDelayWeeklyCategories { get; set; }
        public virtual DbSet<ViewDispatchSmsemployee> ViewDispatchSmsemployees { get; set; }
        public virtual DbSet<ViewDutyCalendar> ViewDutyCalendars { get; set; }
        public virtual DbSet<ViewDutyCalendarSum> ViewDutyCalendarSums { get; set; }
        public virtual DbSet<ViewDutyFdp> ViewDutyFdps { get; set; }
        public virtual DbSet<ViewDutyFdpdetail> ViewDutyFdpdetails { get; set; }
        public virtual DbSet<ViewDutyFdpsum> ViewDutyFdpsums { get; set; }
        public virtual DbSet<ViewDutyFdpsumCom> ViewDutyFdpsumComs { get; set; }
        public virtual DbSet<ViewDutyFdpsumShadow> ViewDutyFdpsumShadows { get; set; }
        public virtual DbSet<ViewDutyFlight> ViewDutyFlights { get; set; }
        public virtual DbSet<ViewDutyFlightLocal> ViewDutyFlightLocals { get; set; }
        public virtual DbSet<ViewDutyFlightSum> ViewDutyFlightSums { get; set; }
        public virtual DbSet<ViewDutyFlightSumCom> ViewDutyFlightSumComs { get; set; }
        public virtual DbSet<ViewEfbasr> ViewEfbasrs { get; set; }
        public virtual DbSet<ViewEfbdsprelease> ViewEfbdspreleases { get; set; }
        public virtual DbSet<ViewEfboccurrenceCao> ViewEfboccurrenceCaos { get; set; }
        public virtual DbSet<ViewEfbvoyageIrr> ViewEfbvoyageIrrs { get; set; }
        public virtual DbSet<ViewEfbvoyageReason> ViewEfbvoyageReasons { get; set; }
        public virtual DbSet<ViewEfbvoyageReport> ViewEfbvoyageReports { get; set; }
        public virtual DbSet<ViewEfbvoyageReportsAll> ViewEfbvoyageReportsAlls { get; set; }
        public virtual DbSet<ViewEmployee> ViewEmployees { get; set; }
        public virtual DbSet<ViewEmployeeActype> ViewEmployeeActypes { get; set; }
        public virtual DbSet<ViewEmployeeAge> ViewEmployeeAges { get; set; }
        public virtual DbSet<ViewEmployeeExp> ViewEmployeeExps { get; set; }
        public virtual DbSet<ViewEmployeeLight> ViewEmployeeLights { get; set; }
        public virtual DbSet<ViewEmployeeLocation> ViewEmployeeLocations { get; set; }
        public virtual DbSet<ViewEmployeeSimple> ViewEmployeeSimples { get; set; }
        public virtual DbSet<ViewEventByType> ViewEventByTypes { get; set; }
        public virtual DbSet<ViewFdm> ViewFdms { get; set; }
        public virtual DbSet<ViewFdmeventAction> ViewFdmeventActions { get; set; }
        public virtual DbSet<ViewFdp> ViewFdps { get; set; }
        public virtual DbSet<ViewFdp1> ViewFdps1 { get; set; }
        public virtual DbSet<ViewFdp2> ViewFdp2s { get; set; }
        public virtual DbSet<ViewFdpab> ViewFdpabs { get; set; }
        public virtual DbSet<ViewFdpcrew> ViewFdpcrews { get; set; }
        public virtual DbSet<ViewFdpcrewDetail> ViewFdpcrewDetails { get; set; }
        public virtual DbSet<ViewFdpcrewDetailSm> ViewFdpcrewDetailSms { get; set; }
        public virtual DbSet<ViewFdpflight> ViewFdpflights { get; set; }
        public virtual DbSet<ViewFdpflightDetail> ViewFdpflightDetails { get; set; }
        public virtual DbSet<ViewFdpftl> ViewFdpftls { get; set; }
        public virtual DbSet<ViewFdpidea> ViewFdpideas { get; set; }
        public virtual DbSet<ViewFdpitem> ViewFdpitems { get; set; }
        public virtual DbSet<ViewFdpitem2> ViewFdpitem2s { get; set; }
        public virtual DbSet<ViewFdpitemAb> ViewFdpitemAbs { get; set; }
        public virtual DbSet<ViewFdplog> ViewFdplogs { get; set; }
        public virtual DbSet<ViewFdprest> ViewFdprests { get; set; }
        public virtual DbSet<ViewFdpshadow> ViewFdpshadows { get; set; }
        public virtual DbSet<ViewFdrreport> ViewFdrreports { get; set; }
        public virtual DbSet<ViewFin> ViewFins { get; set; }
        public virtual DbSet<ViewFinMonthly> ViewFinMonthlies { get; set; }
        public virtual DbSet<ViewFinMonthlyPersian> ViewFinMonthlyPersians { get; set; }
        public virtual DbSet<ViewFinMonthlyReg> ViewFinMonthlyRegs { get; set; }
        public virtual DbSet<ViewFinMonthlyRoute> ViewFinMonthlyRoutes { get; set; }
        public virtual DbSet<ViewFinMonthlyRouteReg> ViewFinMonthlyRouteRegs { get; set; }
        public virtual DbSet<ViewFinYearlyRoute> ViewFinYearlyRoutes { get; set; }
        public virtual DbSet<ViewFixtimeRoute> ViewFixtimeRoutes { get; set; }
        public virtual DbSet<ViewFlighPlanAssignedRegister> ViewFlighPlanAssignedRegisters { get; set; }
        public virtual DbSet<ViewFlightAb> ViewFlightAbs { get; set; }
        public virtual DbSet<ViewFlightChangeHistory> ViewFlightChangeHistories { get; set; }
        public virtual DbSet<ViewFlightCockpit> ViewFlightCockpits { get; set; }
        public virtual DbSet<ViewFlightCrew> ViewFlightCrews { get; set; }
        public virtual DbSet<ViewFlightCrew2> ViewFlightCrew2s { get; set; }
        public virtual DbSet<ViewFlightCrewArchive> ViewFlightCrewArchives { get; set; }
        public virtual DbSet<ViewFlightCrewArchived> ViewFlightCrewArchiveds { get; set; }
        public virtual DbSet<ViewFlightCrewNew> ViewFlightCrewNews { get; set; }
        public virtual DbSet<ViewFlightCrewNewX> ViewFlightCrewNewXes { get; set; }
        public virtual DbSet<ViewFlightCrewNewXtime> ViewFlightCrewNewXtimes { get; set; }
        public virtual DbSet<ViewFlightCrewX> ViewFlightCrewXes { get; set; }
        public virtual DbSet<ViewFlightCrewXoff> ViewFlightCrewXoffs { get; set; }
        public virtual DbSet<ViewFlightDelay> ViewFlightDelays { get; set; }
        public virtual DbSet<ViewFlightDelay2> ViewFlightDelay2s { get; set; }
        public virtual DbSet<ViewFlightDelayCode> ViewFlightDelayCodes { get; set; }
        public virtual DbSet<ViewFlightFdp> ViewFlightFdps { get; set; }
        public virtual DbSet<ViewFlightFuel> ViewFlightFuels { get; set; }
        public virtual DbSet<ViewFlightGroupItem> ViewFlightGroupItems { get; set; }
        public virtual DbSet<ViewFlightInformation> ViewFlightInformations { get; set; }
        public virtual DbSet<ViewFlightMatchingList> ViewFlightMatchingLists { get; set; }
        public virtual DbSet<ViewFlightPlan> ViewFlightPlans { get; set; }
        public virtual DbSet<ViewFlightPlanCalander> ViewFlightPlanCalanders { get; set; }
        public virtual DbSet<ViewFlightPlanCalanderCrew> ViewFlightPlanCalanderCrews { get; set; }
        public virtual DbSet<ViewFlightPlanCalendarRegister> ViewFlightPlanCalendarRegisters { get; set; }
        public virtual DbSet<ViewFlightPlanCalendarRegisterAll> ViewFlightPlanCalendarRegisterAlls { get; set; }
        public virtual DbSet<ViewFlightPlanItem> ViewFlightPlanItems { get; set; }
        public virtual DbSet<ViewFlightPlanItemCalander> ViewFlightPlanItemCalanders { get; set; }
        public virtual DbSet<ViewFlightPlanItemPermit> ViewFlightPlanItemPermits { get; set; }
        public virtual DbSet<ViewFlightPlanRegister> ViewFlightPlanRegisters { get; set; }
        public virtual DbSet<ViewFlightPlanRegisterAssigned> ViewFlightPlanRegisterAssigneds { get; set; }
        public virtual DbSet<ViewFlightRoute> ViewFlightRoutes { get; set; }
        public virtual DbSet<ViewFlightSecurity> ViewFlightSecurities { get; set; }
        public virtual DbSet<ViewFlightSecurityDh> ViewFlightSecurityDhs { get; set; }
        public virtual DbSet<ViewFlightsAcType> ViewFlightsAcTypes { get; set; }
        public virtual DbSet<ViewFlightsFrom> ViewFlightsFroms { get; set; }
        public virtual DbSet<ViewFlightsGantt> ViewFlightsGantts { get; set; }
        public virtual DbSet<ViewFlightsGantt1> ViewFlightsGantts1 { get; set; }
        public virtual DbSet<ViewFlightsGantt2> ViewFlightsGantt2s { get; set; }
        public virtual DbSet<ViewFlightsRegister> ViewFlightsRegisters { get; set; }
        public virtual DbSet<ViewFlightsTo> ViewFlightsTos { get; set; }
        public virtual DbSet<ViewFolderApplicable> ViewFolderApplicables { get; set; }
        public virtual DbSet<ViewFormA> ViewFormAs { get; set; }
        public virtual DbSet<ViewFormAmonthly> ViewFormAmonthlies { get; set; }
        public virtual DbSet<ViewFormAmonthlyDom> ViewFormAmonthlyDoms { get; set; }
        public virtual DbSet<ViewFormAmonthlyInt> ViewFormAmonthlyInts { get; set; }
        public virtual DbSet<ViewFormAyearly> ViewFormAyearlies { get; set; }
        public virtual DbSet<ViewFormAyearlyDom> ViewFormAyearlyDoms { get; set; }
        public virtual DbSet<ViewFormAyearlyInt> ViewFormAyearlyInts { get; set; }
        public virtual DbSet<ViewFtl> ViewFtls { get; set; }
        public virtual DbSet<ViewIdeaLast> ViewIdeaLasts { get; set; }
        public virtual DbSet<ViewIdeaRank> ViewIdeaRanks { get; set; }
        public virtual DbSet<ViewIdeaSessionItem> ViewIdeaSessionItems { get; set; }
        public virtual DbSet<ViewIdeaSessionItemX> ViewIdeaSessionItemXes { get; set; }
        public virtual DbSet<ViewIdeaSessionUpdateError> ViewIdeaSessionUpdateErrors { get; set; }
        public virtual DbSet<ViewIdeaUnique> ViewIdeaUniques { get; set; }
        public virtual DbSet<ViewIdeaUniqueLast> ViewIdeaUniqueLasts { get; set; }
        public virtual DbSet<ViewImportPlan> ViewImportPlans { get; set; }
        public virtual DbSet<ViewIpaccess> ViewIpaccesses { get; set; }
        public virtual DbSet<ViewJlog> ViewJlogs { get; set; }
        public virtual DbSet<ViewJobGroup> ViewJobGroups { get; set; }
        public virtual DbSet<ViewJobGroupType> ViewJobGroupTypes { get; set; }
        public virtual DbSet<ViewJournal> ViewJournals { get; set; }
        public virtual DbSet<ViewLayOver> ViewLayOvers { get; set; }
        public virtual DbSet<ViewLegCrew> ViewLegCrews { get; set; }
        public virtual DbSet<ViewLegFdpItem> ViewLegFdpItems { get; set; }
        public virtual DbSet<ViewLegFuel> ViewLegFuels { get; set; }
        public virtual DbSet<ViewLegTime> ViewLegTimes { get; set; }
        public virtual DbSet<ViewLegTime1> ViewLegTimes1 { get; set; }
        public virtual DbSet<ViewLegTime2> ViewLegTime2s { get; set; }
        public virtual DbSet<ViewLibraryFolder> ViewLibraryFolders { get; set; }
        public virtual DbSet<ViewLocation> ViewLocations { get; set; }
        public virtual DbSet<ViewManufacturer> ViewManufacturers { get; set; }
        public virtual DbSet<ViewMatchingList> ViewMatchingLists { get; set; }
        public virtual DbSet<ViewMonth> ViewMonths { get; set; }
        public virtual DbSet<ViewMsn> ViewMsns { get; set; }
        public virtual DbSet<ViewNotification> ViewNotifications { get; set; }
        public virtual DbSet<ViewNotificationGroup> ViewNotificationGroups { get; set; }
        public virtual DbSet<ViewOffItem> ViewOffItems { get; set; }
        public virtual DbSet<ViewOption> ViewOptions { get; set; }
        public virtual DbSet<ViewOrganization> ViewOrganizations { get; set; }
        public virtual DbSet<ViewPersonActiveCourse> ViewPersonActiveCourses { get; set; }
        public virtual DbSet<ViewPersonAircraftType> ViewPersonAircraftTypes { get; set; }
        public virtual DbSet<ViewPersonCaoLicense> ViewPersonCaoLicenses { get; set; }
        public virtual DbSet<ViewPersonDocument> ViewPersonDocuments { get; set; }
        public virtual DbSet<ViewPersonDocumentFile> ViewPersonDocumentFiles { get; set; }
        public virtual DbSet<ViewPersonEducation> ViewPersonEducations { get; set; }
        public virtual DbSet<ViewPersonExperiense> ViewPersonExperienses { get; set; }
        public virtual DbSet<ViewPersonMisc> ViewPersonMiscs { get; set; }
        public virtual DbSet<ViewPersonRating> ViewPersonRatings { get; set; }
        public virtual DbSet<ViewPlanFlight> ViewPlanFlights { get; set; }
        public virtual DbSet<ViewPlanItem> ViewPlanItems { get; set; }
        public virtual DbSet<ViewPositioning> ViewPositionings { get; set; }
        public virtual DbSet<ViewPost> ViewPosts { get; set; }
        public virtual DbSet<ViewRegHistory> ViewRegHistories { get; set; }
        public virtual DbSet<ViewRegHistory2> ViewRegHistory2s { get; set; }
        public virtual DbSet<ViewRegHistoryMonthly> ViewRegHistoryMonthlies { get; set; }
        public virtual DbSet<ViewRegHistoryYearly> ViewRegHistoryYearlies { get; set; }
        public virtual DbSet<ViewRegisterGround> ViewRegisterGrounds { get; set; }
        public virtual DbSet<ViewRole> ViewRoles { get; set; }
        public virtual DbSet<ViewRoleClaim> ViewRoleClaims { get; set; }
        public virtual DbSet<ViewRosterCrewCount> ViewRosterCrewCounts { get; set; }
        public virtual DbSet<ViewRosterReport> ViewRosterReports { get; set; }
        public virtual DbSet<ViewRosterSheet> ViewRosterSheets { get; set; }
        public virtual DbSet<ViewRotserDailyCrew> ViewRotserDailyCrews { get; set; }
        public virtual DbSet<ViewRoute> ViewRoutes { get; set; }
        public virtual DbSet<ViewRouteFromAirport> ViewRouteFromAirports { get; set; }
        public virtual DbSet<ViewRouteToAirport> ViewRouteToAirports { get; set; }
        public virtual DbSet<ViewSmshistory> ViewSmshistories { get; set; }
        public virtual DbSet<ViewStudyField> ViewStudyFields { get; set; }
        public virtual DbSet<ViewTableDutyFdp> ViewTableDutyFdps { get; set; }
        public virtual DbSet<ViewTolndcard> ViewTolndcards { get; set; }
        public virtual DbSet<ViewTrainingDuty> ViewTrainingDuties { get; set; }
        public virtual DbSet<ViewTrainingSmshistory> ViewTrainingSmshistories { get; set; }
        public virtual DbSet<ViewUser> ViewUsers { get; set; }
        public virtual DbSet<ViewUserActivity> ViewUserActivities { get; set; }
        public virtual DbSet<ViewUserRole> ViewUserRoles { get; set; }
        public virtual DbSet<ViewUserRoleClaim> ViewUserRoleClaims { get; set; }
        public virtual DbSet<ViewWeek> ViewWeeks { get; set; }
        public virtual DbSet<VirtualMsn> VirtualMsns { get; set; }
        public virtual DbSet<WeatherForecastIcingCondition> WeatherForecastIcingConditions { get; set; }
        public virtual DbSet<WeatherForecastSkyCondition> WeatherForecastSkyConditions { get; set; }
        public virtual DbSet<WeatherForecastTemperature> WeatherForecastTemperatures { get; set; }
        public virtual DbSet<WeatherForecastTurbulence> WeatherForecastTurbulences { get; set; }
        public virtual DbSet<WeatherMetar> WeatherMetars { get; set; }
        public virtual DbSet<WeatherMetarQualityControl> WeatherMetarQualityControls { get; set; }
        public virtual DbSet<WeatherMetarSkyCondition> WeatherMetarSkyConditions { get; set; }
        public virtual DbSet<WeatherTaf> WeatherTafs { get; set; }
        public virtual DbSet<WeatherTafForecast> WeatherTafForecasts { get; set; }
        public virtual DbSet<XappLeg> XappLegs { get; set; }
        public virtual DbSet<XcrewAssigned> XcrewAssigneds { get; set; }
        public virtual DbSet<XcrewAssignedRpt> XcrewAssignedRpts { get; set; }
        public virtual DbSet<Xdaily> Xdailies { get; set; }
        public virtual DbSet<Xflight> Xflights { get; set; }
        public virtual DbSet<Xinit> Xinits { get; set; }
        public virtual DbSet<Xlsflt> Xlsflts { get; set; }
        public virtual DbSet<Xy> Xies { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("name=EPDB");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Persian_100_CI_AI");

            modelBuilder.Entity<AcMsn>(entity =>
            {
                entity.ToTable("Ac_MSN");

                entity.HasComment("False = KG\r\nTrue = LBS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AcFlag)
                    .HasColumnName("AC_Flag")
                    .HasComment("A/C Active or Passive Definition");

                entity.Property(e => e.AcModelId).HasColumnName("AC_ModelID");

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.CabinCrewVer)
                    .HasColumnName("Cabin_CrewVer")
                    .HasComment("A/C Crew Version");

                entity.Property(e => e.CabinSeatVerB)
                    .HasColumnName("Cabin_Seat_Ver_B")
                    .HasComment("A/C Seat version Bussiness");

                entity.Property(e => e.CabinSeatVerC)
                    .HasColumnName("Cabin_Seat_Ver_C")
                    .HasComment("A/C Seat version Economy");

                entity.Property(e => e.CabinSeatVerF)
                    .HasColumnName("Cabin_Seat_Ver_F")
                    .HasComment("A/C Seat version First Class");

                entity.Property(e => e.CabinSeatVerR)
                    .HasColumnName("Cabin_Seat_Ver_R")
                    .HasComment("A/C Seat version Royal");

                entity.Property(e => e.CockpitSeatVerFlightEngineer).HasColumnName("Cockpit_Seat_Ver_FlightEngineer");

                entity.Property(e => e.CockpitSeatVerObserver).HasColumnName("Cockpit_Seat_Ver_Observer");

                entity.Property(e => e.CockpitSeatVerPilot).HasColumnName("Cockpit_Seat_Ver_Pilot");

                entity.Property(e => e.Color1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Color2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Etops).HasColumnName("ETOPS");

                entity.Property(e => e.FkAcMsnStatus).HasColumnName("fkAc_MSN_Status");

                entity.Property(e => e.FkFlightRange)
                    .HasColumnName("fkFlight_Range")
                    .HasComment("Foriegn Key for Range");

                entity.Property(e => e.FuelAct1).HasColumnName("Fuel_ACT1");

                entity.Property(e => e.FuelAct2).HasColumnName("Fuel_ACT2");

                entity.Property(e => e.FuelCenter).HasColumnName("Fuel_Center");

                entity.Property(e => e.FuelLhInner).HasColumnName("Fuel_LH_Inner");

                entity.Property(e => e.FuelLhOuter).HasColumnName("Fuel_LH_Outer");

                entity.Property(e => e.FuelRhInner).HasColumnName("Fuel_RH_Inner");

                entity.Property(e => e.FuelRhOuter).HasColumnName("Fuel_RH_Outer");

                entity.Property(e => e.FuelTotal).HasColumnName("Fuel_Total");

                entity.Property(e => e.FuelTrim).HasColumnName("Fuel_Trim");

                entity.Property(e => e.GalleyQty).HasColumnName("Galley_QTY");

                entity.Property(e => e.LastWb)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Last_WB")
                    .HasComment("A/C Weight & balance expiery Date");

                entity.Property(e => e.LavQty)
                    .HasColumnName("Lav_QTY")
                    .HasComment("A/C Lav data");

                entity.Property(e => e.ManDate)
                    .HasColumnType("date")
                    .HasComment("A/C Manufactuer Date");

                entity.Property(e => e.Msn)
                    .HasColumnName("MSN")
                    .HasComment("A/C MSN");

                entity.Property(e => e.PkAircraftMsn)
                    .HasColumnName("pkAircraftMSN")
                    .HasDefaultValueSql("(newsequentialid())")
                    .HasComment("Primary Key for a/C MSN");

                entity.Property(e => e.PreviousRegister)
                    .HasMaxLength(50)
                    .HasColumnName("Previous_Register");

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("A/C Reg.");

                entity.Property(e => e.Tfc)
                    .HasColumnName("TFC")
                    .HasComment("A/C total Flight Cycle");

                entity.Property(e => e.TfhHours).HasColumnName("TFH_Hours");

                entity.Property(e => e.TfhMinutes).HasColumnName("TFH_Minutes");

                entity.HasOne(d => d.AcModel)
                    .WithMany(p => p.AcMsns)
                    .HasForeignKey(d => d.AcModelId)
                    .HasConstraintName("FK_Ac_MSN_Ac_Model");

                entity.HasOne(d => d.AirlineOperators)
                    .WithMany(p => p.AcMsns)
                    .HasForeignKey(d => d.AirlineOperatorsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ac_MSN_G_AirlineOperators");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.AcMsns)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_acmsn_customer");
            });

            modelBuilder.Entity<Aircraft>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.AircraftType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.Register)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TotalSeat)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AircraftModel>(entity =>
            {
                entity.ToTable("AircraftModel");

                entity.Property(e => e.Model)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.AircraftType)
                    .WithMany(p => p.AircraftModels)
                    .HasForeignKey(d => d.AircraftTypeId)
                    .HasConstraintName("FK_MODEL_TYPE");
            });

            modelBuilder.Entity<AircraftType>(entity =>
            {
                entity.ToTable("AircraftType");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.Manufacturer)
                    .WithMany(p => p.AircraftTypes)
                    .HasForeignKey(d => d.ManufacturerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ACTYPE_ORGAN");
            });

            modelBuilder.Entity<Airport>(entity =>
            {
                entity.ToTable("Airport");

                entity.Property(e => e.Iata)
                    .HasMaxLength(255)
                    .HasColumnName("IATA");

                entity.Property(e => e.Icao)
                    .HasMaxLength(255)
                    .HasColumnName("ICAO");

                entity.Property(e => e.ImportId)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Latitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Type).HasMaxLength(255);

                entity.HasOne(d => d.City)
                    .WithMany(p => p.Airports)
                    .HasForeignKey(d => d.CityId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_AIRPORT_CITY");
            });

            modelBuilder.Entity<AirportOpenFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AirportOpenFlight");

                entity.Property(e => e.City).HasMaxLength(255);

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.Country).HasMaxLength(255);

                entity.Property(e => e.F1).HasMaxLength(255);

                entity.Property(e => e.F2).HasMaxLength(255);

                entity.Property(e => e.F3).HasMaxLength(255);

                entity.Property(e => e.F4).HasMaxLength(255);

                entity.Property(e => e.F5).HasMaxLength(255);

                entity.Property(e => e.F6).HasMaxLength(255);

                entity.Property(e => e.Iata)
                    .HasMaxLength(255)
                    .HasColumnName("IATA");

                entity.Property(e => e.Id)
                    .HasMaxLength(255)
                    .HasColumnName("ID");

                entity.Property(e => e.Lg).HasMaxLength(255);

                entity.Property(e => e.Lt).HasMaxLength(255);

                entity.Property(e => e.Title).HasMaxLength(255);
            });

            modelBuilder.Entity<AppCertificate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppCertificate");

                entity.Property(e => e.Expday).HasColumnName("EXPDay");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.Expmonth).HasColumnName("EXPMonth");

                entity.Property(e => e.Expyear).HasColumnName("EXPYear");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppCrew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppCrew");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.BaseAirport).HasMaxLength(255);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.City).HasMaxLength(500);

                entity.Property(e => e.CityFullName).HasMaxLength(1009);

                entity.Property(e => e.CmcemployedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CMCEmployedBy");

                entity.Property(e => e.Cmcoccupation)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CMCOccupation");

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.Country)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CrewMemberCertificateExpireDate).HasColumnType("datetime");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateInactiveBegin).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveEnd).HasColumnType("datetime");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateLastCheckUP");

                entity.Property(e => e.DateNextCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateNextCheckUP");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateTypeExpire).HasColumnType("datetime");

                entity.Property(e => e.DateTypeIssue).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Icaolprlevel).HasColumnName("ICAOLPRLevel");

                entity.Property(e => e.IcaolprvalidUntil)
                    .HasColumnType("datetime")
                    .HasColumnName("ICAOLPRValidUntil");

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.LicenceDescription).HasMaxLength(2000);

                entity.Property(e => e.LicenceInitialIssue).HasColumnType("datetime");

                entity.Property(e => e.LicenceIrexpireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LicenceIRExpireDate");

                entity.Property(e => e.LicenceIssueDate).HasColumnType("datetime");

                entity.Property(e => e.LicenceTitle).HasMaxLength(500);

                entity.Property(e => e.MedicalLimitation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Ndtnumber)
                    .HasMaxLength(200)
                    .HasColumnName("NDTNumber");

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ProficiencyDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RaitingCertificates).HasMaxLength(500);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.State).HasMaxLength(255);

                entity.Property(e => e.VisaExpireDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<AppCrewFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppCrewFlight");

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.Alt1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT1");

                entity.Property(e => e.Alt2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT2");

                entity.Property(e => e.Alt3)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT3");

                entity.Property(e => e.Alt4)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT4");

                entity.Property(e => e.Alt5)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT5");

                entity.Property(e => e.Atcplan)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ATCPlan");

                entity.Property(e => e.Atl)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ATL");

                entity.Property(e => e.AttAsr).HasColumnName("AttASR");

                entity.Property(e => e.BlockOff).HasColumnType("datetime");

                entity.Property(e => e.BlockOffLocal).HasColumnType("datetime");

                entity.Property(e => e.BlockOn).HasColumnType("datetime");

                entity.Property(e => e.BlockOnLocal).HasColumnType("datetime");

                entity.Property(e => e.Cargo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("CARGO");

                entity.Property(e => e.CommanderNote).HasMaxLength(2000);

                entity.Property(e => e.CpcrewId).HasColumnName("CPCrewId");

                entity.Property(e => e.Cpinstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPInstructor");

                entity.Property(e => e.Cpisccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPISCCM");

                entity.Property(e => e.Cpp1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP1");

                entity.Property(e => e.Cpp2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP2");

                entity.Property(e => e.Cpsccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPSCCM");

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FdpitemId).HasColumnName("FDPItemId");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FpflightTime).HasColumnName("FPFlightTime");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.FptripFuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPTripFuel");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FromAirportIata2)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA2");

                entity.Property(e => e.FuelDensity).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelPlanned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelRemaining).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelTotal).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.FuelUplift).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUsed).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Ipid).HasColumnName("IPId");

                entity.Property(e => e.Ipname)
                    .HasMaxLength(1001)
                    .HasColumnName("IPName");

                entity.Property(e => e.IpscheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("IPScheduleName");

                entity.Property(e => e.IsJl).HasColumnName("IsJL");

                entity.Property(e => e.IsJlapproved).HasColumnName("IsJLApproved");

                entity.Property(e => e.Istart)
                    .HasColumnType("datetime")
                    .HasColumnName("IStart");

                entity.Property(e => e.Jlapprover)
                    .HasMaxLength(1001)
                    .HasColumnName("JLApprover");

                entity.Property(e => e.JlapproverId).HasColumnName("JLApproverId");

                entity.Property(e => e.Jldate)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDate");

                entity.Property(e => e.JldateApproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDateApproved");

                entity.Property(e => e.JldatePicapproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDatePICApproved");

                entity.Property(e => e.Jlno)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("JLNo");

                entity.Property(e => e.JlsignedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("JLSignedBy");

                entity.Property(e => e.Jluser)
                    .HasMaxLength(1001)
                    .HasColumnName("JLUser");

                entity.Property(e => e.JluserId).HasColumnName("JLUserId");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.Ltr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LTR");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.P1id).HasColumnName("P1Id");

                entity.Property(e => e.P1name)
                    .HasMaxLength(1001)
                    .HasColumnName("P1Name");

                entity.Property(e => e.P1scheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P1ScheduleName");

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.P2name)
                    .HasMaxLength(1001)
                    .HasColumnName("P2Name");

                entity.Property(e => e.P2scheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P2ScheduleName");

                entity.Property(e => e.Pf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PF");

                entity.Property(e => e.Pic)
                    .HasMaxLength(1001)
                    .HasColumnName("PIC");

                entity.Property(e => e.Picid).HasColumnName("PICId");

                entity.Property(e => e.Position)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RvsmFltCpt)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_CPT");

                entity.Property(e => e.RvsmFltFo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_FO");

                entity.Property(e => e.RvsmFltStby)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_STBY");

                entity.Property(e => e.RvsmGndCpt)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_CPT");

                entity.Property(e => e.RvsmGndFo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_FO");

                entity.Property(e => e.RvsmGndStby)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_STBY");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SerialNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.Sic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SIC");

                entity.Property(e => e.Sicid).HasColumnName("SICId");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.StadayLocal)
                    .HasColumnType("date")
                    .HasColumnName("STADayLocal");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.StddayLocal)
                    .HasColumnType("date")
                    .HasColumnName("STDDayLocal");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TakeOffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.ToAirportIata2)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA2");
            });

            modelBuilder.Entity<AppCrewTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppCrewTime");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.RefDate).HasColumnType("date");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.YearMonthName).HasMaxLength(4000);
            });

            modelBuilder.Entity<AppFdprest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppFDPRest");

                entity.Property(e => e.ActypeId).HasColumnName("ACTypeId");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.CanceledNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CanceledRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Customer)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateContactLocal).HasColumnType("datetime");

                entity.Property(e => e.DateDutyEnd).HasColumnType("date");

                entity.Property(e => e.DateDutyStart).HasColumnType("date");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DayStdlocal)
                    .HasColumnType("date")
                    .HasColumnName("DaySTDLocal");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Fdp).HasColumnName("FDP");

                entity.Property(e => e.Fdpend)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPEnd");

                entity.Property(e => e.FdpendLocal)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPEndLocal");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FdplocationId).HasColumnName("FDPLocationId");

                entity.Property(e => e.FdpreductionByStandBy).HasColumnName("FDPReductionByStandBy");

                entity.Property(e => e.Fdpscheduled).HasColumnName("FDPScheduled");

                entity.Property(e => e.FdpstandByScheduled).HasColumnName("FDPStandByScheduled");

                entity.Property(e => e.FdpstandByScheduledError).HasColumnName("FDPStandByScheduledError");

                entity.Property(e => e.Fdpstandby).HasColumnName("FDPStandby");

                entity.Property(e => e.FdpstandbyError).HasColumnName("FDPStandbyError");

                entity.Property(e => e.Fdpstart)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPStart");

                entity.Property(e => e.FdpstartLocal)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPStartLocal");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Istart)
                    .HasColumnType("datetime")
                    .HasColumnName("IStart");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(255);

                entity.Property(e => e.MaxFdp).HasColumnName("MaxFDP");

                entity.Property(e => e.MaxFdpextended).HasColumnName("MaxFDPExtended");

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark2).HasMaxLength(500);

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.ReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.StandByStart).HasColumnType("datetime");

                entity.Property(e => e.StandByStartLocal).HasColumnType("datetime");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.ToAirport).HasMaxLength(255);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.Upd).HasColumnName("UPD");

                entity.Property(e => e.UserName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppFtl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppFTL");

                entity.Property(e => e.Cdate)
                    .HasColumnType("date")
                    .HasColumnName("CDate");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FlightCyear).HasColumnName("FlightCYear");

                entity.Property(e => e.FlightCyearRemain).HasColumnName("FlightCYearRemain");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppFtlab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppFTLAbs");

                entity.Property(e => e.Cdate)
                    .HasColumnType("date")
                    .HasColumnName("CDate");

                entity.Property(e => e.Cnt).HasColumnName("CNT");

                entity.Property(e => e.FlightCyear).HasColumnName("FlightCYear");

                entity.Property(e => e.FlightCyearRemain).HasColumnName("FlightCYearRemain");
            });

            modelBuilder.Entity<AppFuel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppFuel");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Alt1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT1");

                entity.Property(e => e.Alt2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT2");

                entity.Property(e => e.Alt3)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT3");

                entity.Property(e => e.AvgVar).HasColumnType("decimal(38, 15)");

                entity.Property(e => e.AvgVarReg).HasColumnType("decimal(38, 15)");

                entity.Property(e => e.AvgfuelBurned)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("AVGFuelBurned");

                entity.Property(e => e.AvgfuelBurnedReg)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("AVGFuelBurnedReg");

                entity.Property(e => e.BlockOff).HasColumnType("datetime");

                entity.Property(e => e.BlockOn).HasColumnType("datetime");

                entity.Property(e => e.Cargo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("CARGO");

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.FptripFuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPTripFuel");

                entity.Property(e => e.Fpvar)
                    .HasColumnType("numeric(38, 13)")
                    .HasColumnName("FPVar");

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FuelDensity).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnit)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.FuelVariance).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.Ipid).HasColumnName("IPId");

                entity.Property(e => e.Ipname)
                    .HasMaxLength(1001)
                    .HasColumnName("IPName");

                entity.Property(e => e.IpscheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("IPScheduleName");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.P1id).HasColumnName("P1Id");

                entity.Property(e => e.P1name)
                    .HasMaxLength(1001)
                    .HasColumnName("P1Name");

                entity.Property(e => e.P1scheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P1ScheduleName");

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.P2name)
                    .HasMaxLength(1001)
                    .HasColumnName("P2Name");

                entity.Property(e => e.P2scheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P2ScheduleName");

                entity.Property(e => e.Pf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PF");

                entity.Property(e => e.Pic)
                    .HasMaxLength(1001)
                    .HasColumnName("PIC");

                entity.Property(e => e.Picid).HasColumnName("PICId");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Remaining).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Sic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SIC");

                entity.Property(e => e.Sicid).HasColumnName("SICId");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.ToAirport).HasMaxLength(255);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.UpLift).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<AppLeg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppLeg");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.Alt1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT1");

                entity.Property(e => e.Alt2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT2");

                entity.Property(e => e.Alt3)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT3");

                entity.Property(e => e.Alt4)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT4");

                entity.Property(e => e.Alt5)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT5");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.Atcplan)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ATCPlan");

                entity.Property(e => e.Atl)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ATL");

                entity.Property(e => e.AttAsr).HasColumnName("AttASR");

                entity.Property(e => e.BlockOff).HasColumnType("datetime");

                entity.Property(e => e.BlockOffLocal).HasColumnType("datetime");

                entity.Property(e => e.BlockOn).HasColumnType("datetime");

                entity.Property(e => e.BlockOnLocal).HasColumnType("datetime");

                entity.Property(e => e.Cargo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("CARGO");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.CommanderNote).HasMaxLength(2000);

                entity.Property(e => e.CpcrewId).HasColumnName("CPCrewId");

                entity.Property(e => e.Cpdh).HasColumnName("CPDH");

                entity.Property(e => e.Cpfdpid).HasColumnName("CPFDPId");

                entity.Property(e => e.CpfdpitemId).HasColumnName("CPFDPItemId");

                entity.Property(e => e.CpflightTypeId).HasColumnName("CPFlightTypeId");

                entity.Property(e => e.Cpinstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPInstructor");

                entity.Property(e => e.Cpisccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPISCCM");

                entity.Property(e => e.Cpp1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP1");

                entity.Property(e => e.Cpp2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP2");

                entity.Property(e => e.CppositionId).HasColumnName("CPPositionId");

                entity.Property(e => e.Cpregister)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPRegister");

                entity.Property(e => e.Cpsccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPSCCM");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FpflightHh).HasColumnName("FPFlightHH");

                entity.Property(e => e.FpflightMm).HasColumnName("FPFlightMM");

                entity.Property(e => e.FpflightTime).HasColumnName("FPFlightTime");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.FptripFuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPTripFuel");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FromAirportIata2)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA2");

                entity.Property(e => e.FuelDensity).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelPlanned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelRemaining).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelTotal).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.FuelUplift).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUsed).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Ipid).HasColumnName("IPId");

                entity.Property(e => e.Ipname)
                    .HasMaxLength(1001)
                    .HasColumnName("IPName");

                entity.Property(e => e.IpscheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("IPScheduleName");

                entity.Property(e => e.IsJl).HasColumnName("IsJL");

                entity.Property(e => e.IsJlapproved).HasColumnName("IsJLApproved");

                entity.Property(e => e.Jlapprover)
                    .HasMaxLength(1001)
                    .HasColumnName("JLApprover");

                entity.Property(e => e.JlapproverId).HasColumnName("JLApproverId");

                entity.Property(e => e.Jldate)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDate");

                entity.Property(e => e.JldateApproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDateApproved");

                entity.Property(e => e.JldatePicapproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDatePICApproved");

                entity.Property(e => e.Jlno)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("JLNo");

                entity.Property(e => e.JlsignedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("JLSignedBy");

                entity.Property(e => e.Jluser)
                    .HasMaxLength(1001)
                    .HasColumnName("JLUser");

                entity.Property(e => e.JluserId).HasColumnName("JLUserId");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.Ltr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LTR");

                entity.Property(e => e.Msn).HasColumnName("MSN");

                entity.Property(e => e.Osta)
                    .HasColumnType("datetime")
                    .HasColumnName("OSTA");

                entity.Property(e => e.OtoAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OToAirportIATA");

                entity.Property(e => e.OtoAirportId).HasColumnName("OToAirportId");

                entity.Property(e => e.P1id).HasColumnName("P1Id");

                entity.Property(e => e.P1name)
                    .HasMaxLength(1001)
                    .HasColumnName("P1Name");

                entity.Property(e => e.P1scheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P1ScheduleName");

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.P2name)
                    .HasMaxLength(1001)
                    .HasColumnName("P2Name");

                entity.Property(e => e.P2scheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P2ScheduleName");

                entity.Property(e => e.Pf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PF");

                entity.Property(e => e.Pflr).HasColumnName("PFLR");

                entity.Property(e => e.Pic)
                    .HasMaxLength(1001)
                    .HasColumnName("PIC");

                entity.Property(e => e.Picid).HasColumnName("PICId");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.RvsmFltCpt)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_CPT");

                entity.Property(e => e.RvsmFltFo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_FO");

                entity.Property(e => e.RvsmFltStby)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_STBY");

                entity.Property(e => e.RvsmGndCpt)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_CPT");

                entity.Property(e => e.RvsmGndFo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_FO");

                entity.Property(e => e.RvsmGndStby)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_STBY");

                entity.Property(e => e.SerialNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Sic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SIC");

                entity.Property(e => e.Sicid).HasColumnName("SICId");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.StadayLocal)
                    .HasColumnType("date")
                    .HasColumnName("STADayLocal");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.StddayLocal)
                    .HasColumnType("date")
                    .HasColumnName("STDDayLocal");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TakeOffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.ToAirportIata2)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA2");
            });

            modelBuilder.Entity<AppLegHelper>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppLegHelper");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Ipid).HasColumnName("IPId");

                entity.Property(e => e.Ipname)
                    .HasMaxLength(1001)
                    .HasColumnName("IPName");

                entity.Property(e => e.IpscheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("IPScheduleName");

                entity.Property(e => e.P1id).HasColumnName("P1Id");

                entity.Property(e => e.P1name)
                    .HasMaxLength(1001)
                    .HasColumnName("P1Name");

                entity.Property(e => e.P1scheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P1ScheduleName");

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.P2name)
                    .HasMaxLength(1001)
                    .HasColumnName("P2Name");

                entity.Property(e => e.P2scheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P2ScheduleName");

                entity.Property(e => e.Pic)
                    .HasMaxLength(1001)
                    .HasColumnName("PIC");

                entity.Property(e => e.Picid).HasColumnName("PICId");

                entity.Property(e => e.Picid2).HasColumnName("PICId2");

                entity.Property(e => e.Sic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SIC");

                entity.Property(e => e.Sicid).HasColumnName("SICId");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");
            });

            modelBuilder.Entity<AppLegOp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AppLegOPS");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.Alt1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT1");

                entity.Property(e => e.Alt2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT2");

                entity.Property(e => e.Alt3)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT3");

                entity.Property(e => e.Alt4)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT4");

                entity.Property(e => e.Alt5)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT5");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.AsrOpsconfirmDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ASR_OPSConfirmDate");

                entity.Property(e => e.AsrOpsconfirmed).HasColumnName("ASR_OPSConfirmed");

                entity.Property(e => e.AsrOpsid).HasColumnName("ASR_OPSId");

                entity.Property(e => e.AsrOpsremark)
                    .HasMaxLength(4000)
                    .HasColumnName("ASR_OPSRemark");

                entity.Property(e => e.AsrOpsremarkDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ASR_OPSRemarkDate");

                entity.Property(e => e.AsrOpsremarked).HasColumnName("ASR_OPSRemarked");

                entity.Property(e => e.AsrOpsstaffConfirmDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ASR_OPSStaffConfirmDate");

                entity.Property(e => e.AsrOpsstaffConfirmed).HasColumnName("ASR_OPSStaffConfirmed");

                entity.Property(e => e.AsrOpsstaffDateVisit)
                    .HasColumnType("datetime")
                    .HasColumnName("ASR_OPSStaffDateVisit");

                entity.Property(e => e.AsrOpsstaffId).HasColumnName("ASR_OPSStaffId");

                entity.Property(e => e.AsrOpsstaffRemark)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("ASR_OPSStaffRemark");

                entity.Property(e => e.AsrOpsstaffRemarkDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ASR_OPSStaffRemarkDate");

                entity.Property(e => e.AsrOpsstaffRemarked).HasColumnName("ASR_OPSStaffRemarked");

                entity.Property(e => e.AsrOpsstaffStatusId).HasColumnName("ASR_OPSStaffStatusId");

                entity.Property(e => e.AsrOpsstatusId).HasColumnName("ASR_OPSStatusId");

                entity.Property(e => e.AttAsr).HasColumnName("AttASR");

                entity.Property(e => e.BlockOff).HasColumnType("datetime");

                entity.Property(e => e.BlockOffLocal).HasColumnType("datetime");

                entity.Property(e => e.BlockOn).HasColumnType("datetime");

                entity.Property(e => e.BlockOnLocal).HasColumnType("datetime");

                entity.Property(e => e.Cargo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("CARGO");

                entity.Property(e => e.CommanderNote).HasMaxLength(2000);

                entity.Property(e => e.CpcrewId).HasColumnName("CPCrewId");

                entity.Property(e => e.Cpdh).HasColumnName("CPDH");

                entity.Property(e => e.Cpfdpid).HasColumnName("CPFDPId");

                entity.Property(e => e.CpfdpitemId).HasColumnName("CPFDPItemId");

                entity.Property(e => e.CpflightTypeId).HasColumnName("CPFlightTypeId");

                entity.Property(e => e.Cpinstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPInstructor");

                entity.Property(e => e.Cpisccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPISCCM");

                entity.Property(e => e.Cpp1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP1");

                entity.Property(e => e.Cpp2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP2");

                entity.Property(e => e.CppositionId).HasColumnName("CPPositionId");

                entity.Property(e => e.Cpregister)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPRegister");

                entity.Property(e => e.Cpsccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPSCCM");

                entity.Property(e => e.Crtbl).HasColumnName("CRTBL");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark)
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FpflightHh).HasColumnName("FPFlightHH");

                entity.Property(e => e.FpflightMm).HasColumnName("FPFlightMM");

                entity.Property(e => e.FpflightTime).HasColumnName("FPFlightTime");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FuelDensity).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelRemaining).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelTotal).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.FuelUplift).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUsed).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Ipid).HasColumnName("IPId");

                entity.Property(e => e.Ipname)
                    .HasMaxLength(1001)
                    .HasColumnName("IPName");

                entity.Property(e => e.IpscheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("IPScheduleName");

                entity.Property(e => e.IsJl).HasColumnName("IsJL");

                entity.Property(e => e.IsJlapproved).HasColumnName("IsJLApproved");

                entity.Property(e => e.Jlapprover)
                    .HasMaxLength(1001)
                    .HasColumnName("JLApprover");

                entity.Property(e => e.JlapproverId).HasColumnName("JLApproverId");

                entity.Property(e => e.Jldate)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDate");

                entity.Property(e => e.JldateApproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDateApproved");

                entity.Property(e => e.JldatePicapproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDatePICApproved");

                entity.Property(e => e.Jlno)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("JLNo");

                entity.Property(e => e.JlsignedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("JLSignedBy");

                entity.Property(e => e.Jluser)
                    .HasMaxLength(1001)
                    .HasColumnName("JLUser");

                entity.Property(e => e.JluserId).HasColumnName("JLUserId");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.Ltr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LTR");

                entity.Property(e => e.Msn).HasColumnName("MSN");

                entity.Property(e => e.Osta)
                    .HasColumnType("datetime")
                    .HasColumnName("OSTA");

                entity.Property(e => e.OtoAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OToAirportIATA");

                entity.Property(e => e.OtoAirportId).HasColumnName("OToAirportId");

                entity.Property(e => e.P1id).HasColumnName("P1Id");

                entity.Property(e => e.P1name)
                    .HasMaxLength(1001)
                    .HasColumnName("P1Name");

                entity.Property(e => e.P1scheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P1ScheduleName");

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.P2name)
                    .HasMaxLength(1001)
                    .HasColumnName("P2Name");

                entity.Property(e => e.P2scheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P2ScheduleName");

                entity.Property(e => e.Pf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PF");

                entity.Property(e => e.Pflr).HasColumnName("PFLR");

                entity.Property(e => e.Pic)
                    .HasMaxLength(1001)
                    .HasColumnName("PIC");

                entity.Property(e => e.Picid).HasColumnName("PICId");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.RvsmFltCpt)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_CPT");

                entity.Property(e => e.RvsmFltFo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_FO");

                entity.Property(e => e.RvsmFltStby)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_STBY");

                entity.Property(e => e.RvsmGndCpt)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_CPT");

                entity.Property(e => e.RvsmGndFo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_FO");

                entity.Property(e => e.RvsmGndStby)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_STBY");

                entity.Property(e => e.SerialNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Sic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SIC");

                entity.Property(e => e.Sicid).HasColumnName("SICId");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.StadayLocal)
                    .HasColumnType("date")
                    .HasColumnName("STADayLocal");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.StddayLocal)
                    .HasColumnType("date")
                    .HasColumnName("STDDayLocal");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TakeOffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.VrOpsconfirmDate)
                    .HasColumnType("datetime")
                    .HasColumnName("VR_OPSConfirmDate");

                entity.Property(e => e.VrOpsconfirmed).HasColumnName("VR_OPSConfirmed");

                entity.Property(e => e.VrOpsid).HasColumnName("VR_OPSId");

                entity.Property(e => e.VrOpsremark)
                    .HasMaxLength(4000)
                    .HasColumnName("VR_OPSRemark");

                entity.Property(e => e.VrOpsremarkDate)
                    .HasColumnType("datetime")
                    .HasColumnName("VR_OPSRemarkDate");

                entity.Property(e => e.VrOpsremarked).HasColumnName("VR_OPSRemarked");

                entity.Property(e => e.VrOpsstaffConfirmDate)
                    .HasColumnType("datetime")
                    .HasColumnName("VR_OPSStaffConfirmDate");

                entity.Property(e => e.VrOpsstaffConfirmed).HasColumnName("VR_OPSStaffConfirmed");

                entity.Property(e => e.VrOpsstaffDateVisit)
                    .HasColumnType("datetime")
                    .HasColumnName("VR_OPSStaffDateVisit");

                entity.Property(e => e.VrOpsstaffId).HasColumnName("VR_OPSStaffId");

                entity.Property(e => e.VrOpsstaffRemark)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("VR_OPSStaffRemark");

                entity.Property(e => e.VrOpsstaffRemarkDate)
                    .HasColumnType("datetime")
                    .HasColumnName("VR_OPSStaffRemarkDate");

                entity.Property(e => e.VrOpsstaffRemarked).HasColumnName("VR_OPSStaffRemarked");

                entity.Property(e => e.VrOpsstaffStatusId).HasColumnName("VR_OPSStaffStatusId");

                entity.Property(e => e.VrOpsstatusId).HasColumnName("VR_OPSStatusId");
            });

            modelBuilder.Entity<AspNetRole>(entity =>
            {
                entity.HasIndex(e => e.Name, "RoleNameIndex")
                    .IsUnique();

                entity.Property(e => e.Id).HasMaxLength(128);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<AspNetRoleClaim>(entity =>
            {
                entity.Property(e => e.Id).HasMaxLength(128);

                entity.Property(e => e.ClaimType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimValue)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AspNetUser>(entity =>
            {
                entity.HasIndex(e => e.UserName, "UserNameIndex")
                    .IsUnique();

                entity.Property(e => e.Id).HasMaxLength(128);

                entity.Property(e => e.ConcurrencyStamp).IsUnicode(false);

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.LockoutEndDateUtc).HasColumnType("datetime");

                entity.Property(e => e.NormalizedEmail).HasMaxLength(256);

                entity.Property(e => e.NormalizedUserName).HasMaxLength(256);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<AspNetUserClaim>(entity =>
            {
                entity.HasIndex(e => e.UserId, "IX_UserId");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserClaims)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId");
            });

            modelBuilder.Entity<AspNetUserLogin>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey, e.UserId })
                    .HasName("PK_dbo.AspNetUserLogins");

                entity.HasIndex(e => e.UserId, "IX_UserId");

                entity.Property(e => e.LoginProvider).HasMaxLength(128);

                entity.Property(e => e.ProviderKey).HasMaxLength(128);

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserLogins)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId");
            });

            modelBuilder.Entity<AspNetUserRole>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId })
                    .HasName("PK_dbo.AspNetUserRoles");

                entity.HasIndex(e => e.RoleId, "IX_RoleId");

                entity.HasIndex(e => e.UserId, "IX_UserId");

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.Property(e => e.RoleId).HasMaxLength(128);

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId");
            });

            modelBuilder.Entity<AspNetUserToken>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider })
                    .HasName("PK__AspNetUs__7AB7EDC57CE24AB4");

                entity.Property(e => e.UserId)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Value)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Author>(entity =>
            {
                entity.ToTable("Author");

                entity.Property(e => e.Name).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(1000);
            });

            modelBuilder.Entity<AvgFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AvgFlight");

                entity.Property(e => e.Duration).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FlightH).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FlightM).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<Bl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BL");

                entity.Property(e => e.Des)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DES");

                entity.Property(e => e.Hh).HasColumnName("HH");

                entity.Property(e => e.Mm).HasColumnName("MM");

                entity.Property(e => e.Org)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ORG");
            });

            modelBuilder.Entity<Book>(entity =>
            {
                entity.ToTable("Book");

                entity.HasIndex(e => e.FolderId, "idx_book_folder");

                entity.Property(e => e.Abstract).HasMaxLength(4000);

                entity.Property(e => e.BookKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Conference).HasMaxLength(500);

                entity.Property(e => e.DateConference).HasMaxLength(200);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateDeadline).HasColumnType("datetime");

                entity.Property(e => e.DateEffective).HasMaxLength(500);

                entity.Property(e => e.DatePublished).HasColumnType("datetime");

                entity.Property(e => e.DateRelease).HasColumnType("date");

                entity.Property(e => e.DateValidUntil).HasColumnType("datetime");

                entity.Property(e => e.DeadLine).HasColumnType("datetime");

                entity.Property(e => e.Doi)
                    .HasMaxLength(200)
                    .HasColumnName("DOI");

                entity.Property(e => e.Duration).HasMaxLength(100);

                entity.Property(e => e.Edition).HasMaxLength(500);

                entity.Property(e => e.ExternalUrl).HasMaxLength(1000);

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InspecaccessionNumber)
                    .HasMaxLength(200)
                    .HasColumnName("INSPECAccessionNumber");

                entity.Property(e => e.Isbn)
                    .HasMaxLength(500)
                    .HasColumnName("ISBN");

                entity.Property(e => e.Issnelectronic)
                    .HasMaxLength(200)
                    .HasColumnName("ISSNElectronic");

                entity.Property(e => e.Issnprint)
                    .HasMaxLength(200)
                    .HasColumnName("ISSNPrint");

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Pages).HasMaxLength(50);

                entity.Property(e => e.PublishedIn).HasMaxLength(500);

                entity.Property(e => e.Sender).HasMaxLength(1000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Books)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Book_Customer_Id");

                entity.HasOne(d => d.Publisher)
                    .WithMany(p => p.Books)
                    .HasForeignKey(d => d.PublisherId)
                    .HasConstraintName("FK_BOOK_ORG");
            });

            modelBuilder.Entity<BookAutor>(entity =>
            {
                entity.ToTable("BookAutor");

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookAutors)
                    .HasForeignKey(d => d.BookId)
                    .HasConstraintName("FK_BookAutor_Book_Id");

                entity.HasOne(d => d.PersonMisc)
                    .WithMany(p => p.BookAutors)
                    .HasForeignKey(d => d.PersonMiscId)
                    .HasConstraintName("FK_BookAutor_PersonMisc_Id");
            });

            modelBuilder.Entity<BookChapter>(entity =>
            {
                entity.ToTable("BookChapter");

                entity.Property(e => e.BookKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FullCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookChapters)
                    .HasForeignKey(d => d.BookId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_bc_b");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("fk_bf_bf");
            });

            modelBuilder.Entity<BookFile>(entity =>
            {
                entity.ToTable("BookFile");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookFiles)
                    .HasForeignKey(d => d.BookId)
                    .HasConstraintName("FK_BookFile_Book_Id");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.BookFiles)
                    .HasForeignKey(d => d.DocumentId)
                    .HasConstraintName("FK_BookFile_Document_Id");
            });

            modelBuilder.Entity<BookFileVisit>(entity =>
            {
                entity.ToTable("BookFileVisit");

                entity.HasIndex(e => e.DateVisited, "idx_bookfilevisit_date");

                entity.Property(e => e.DateVisited).HasColumnType("datetime");
            });

            modelBuilder.Entity<BookKeyword>(entity =>
            {
                entity.ToTable("BookKeyword");

                entity.Property(e => e.Value).HasMaxLength(100);

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookKeywords)
                    .HasForeignKey(d => d.BookId)
                    .HasConstraintName("FK_BookKeyword_Book_Id");
            });

            modelBuilder.Entity<BookRelatedAircraftType>(entity =>
            {
                entity.ToTable("BookRelatedAircraftType");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.AircraftType)
                    .WithMany(p => p.BookRelatedAircraftTypes)
                    .HasForeignKey(d => d.AircraftTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BookAircraftType_AircraftType_Id");

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookRelatedAircraftTypes)
                    .HasForeignKey(d => d.BookId)
                    .HasConstraintName("FK_BookAircraftType_Book_Id");
            });

            modelBuilder.Entity<BookRelatedEmployee>(entity =>
            {
                entity.ToTable("BookRelatedEmployee");

                entity.Property(e => e.DateSigned).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookRelatedEmployees)
                    .HasForeignKey(d => d.BookId)
                    .HasConstraintName("FK_BookRelatedEmployee_Book_Id");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.BookRelatedEmployees)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_BookRelatedEmployee_Employee_Id");
            });

            modelBuilder.Entity<BookRelatedGroup>(entity =>
            {
                entity.ToTable("BookRelatedGroup");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookRelatedGroups)
                    .HasForeignKey(d => d.BookId)
                    .HasConstraintName("FK_BookRelatedGroup_Book_Id");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.BookRelatedGroups)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK_BookRelatedGroup_JobGroup_Id");
            });

            modelBuilder.Entity<BookRelatedStudyField>(entity =>
            {
                entity.ToTable("BookRelatedStudyField");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookRelatedStudyFields)
                    .HasForeignKey(d => d.BookId)
                    .HasConstraintName("FK_BookRelatedStudyField_Book_Id");
            });

            modelBuilder.Entity<BookSigned>(entity =>
            {
                entity.ToTable("BookSigned");

                entity.Property(e => e.DateSigned).HasColumnType("datetime");
            });

            modelBuilder.Entity<Box>(entity =>
            {
                entity.ToTable("Box");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DelayedReport).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");
            });

            modelBuilder.Entity<BoxCrew>(entity =>
            {
                entity.ToTable("BoxCrew");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.BoxCrews)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("fk_bc_box");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.BoxCrews)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_bc_emp");
            });

            modelBuilder.Entity<BoxFlightPlanItem>(entity =>
            {
                entity.ToTable("BoxFlightPlanItem");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.BoxFlightPlanItems)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("fk_bfp_box");
            });

            modelBuilder.Entity<BoxItem>(entity =>
            {
                entity.ToTable("BoxItem");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.BoxItems)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("fk_bi_b");

                entity.HasOne(d => d.PlanItem)
                    .WithMany(p => p.BoxItems)
                    .HasForeignKey(d => d.PlanItemId)
                    .HasConstraintName("fk_bi_pi");
            });

            modelBuilder.Entity<CaoBasic>(entity =>
            {
                entity.ToTable("CaoBasic");

                entity.Property(e => e.CaoGroup)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.HasOne(d => d.CaoBasicLicenseType)
                    .WithMany(p => p.CaoBasics)
                    .HasForeignKey(d => d.CaoBasicLicenseTypeId)
                    .HasConstraintName("FK_CaoBasic_CaoBasicLicenseType");
            });

            modelBuilder.Entity<CaoBasicLicenseType>(entity =>
            {
                entity.ToTable("CaoBasicLicenseType");

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.ResultTextCatA)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ResultTextCatB)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ResultTextCatC)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<CaoBasicType>(entity =>
            {
                entity.ToTable("CaoBasicType");

                entity.HasOne(d => d.CaoBasic)
                    .WithMany(p => p.CaoBasicTypes)
                    .HasForeignKey(d => d.CaoBasicId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CaoBasicType_CaoBasic");

                entity.HasOne(d => d.CaoType)
                    .WithMany(p => p.CaoBasicTypes)
                    .HasForeignKey(d => d.CaoTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CaoBasicType_CaoType");
            });

            modelBuilder.Entity<CaoCategory>(entity =>
            {
                entity.ToTable("CaoCategory");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CaoType>(entity =>
            {
                entity.ToTable("CaoType");

                entity.Property(e => e.CaoGroup)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.HasOne(d => d.AircraftType)
                    .WithMany(p => p.CaoTypes)
                    .HasForeignKey(d => d.AircraftTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_CAOTYPE_AIRCRAFTTYPE");
            });

            modelBuilder.Entity<CertificateType>(entity =>
            {
                entity.ToTable("CertificateType");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Certification>(entity =>
            {
                entity.ToTable("Certification");

                entity.Property(e => e.DateExpire).HasColumnType("datetime");

                entity.Property(e => e.DateIrvalid)
                    .HasColumnType("datetime")
                    .HasColumnName("DateIRValid");

                entity.Property(e => e.DateIssue).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.EmployedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Limitation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.No)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Occupation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Rating)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TypeTitle).HasMaxLength(500);
            });

            modelBuilder.Entity<Chapter>(entity =>
            {
                entity.ToTable("Chapter");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.Chapters)
                    .HasForeignKey(d => d.BookId)
                    .HasConstraintName("FK_CHAPTER_BOOK");
            });

            modelBuilder.Entity<City>(entity =>
            {
                entity.ToTable("City");

                entity.Property(e => e.AccuWeatherCode).HasMaxLength(255);

                entity.Property(e => e.Latitude).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<ClaimRemark>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ClaimRemark");

                entity.Property(e => e.ClaimRemark1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ClaimRemark");

                entity.Property(e => e.ClaimType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Client>(entity =>
            {
                entity.ToTable("Client");

                entity.Property(e => e.Id).HasMaxLength(500);

                entity.Property(e => e.AllowedOrigin).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Secret)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<Coord>(entity =>
            {
                entity.ToTable("Coord");

                entity.Property(e => e.Lg).HasColumnType("decimal(20, 8)");

                entity.Property(e => e.Lt).HasColumnType("decimal(20, 8)");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.ToTable("Country");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SortName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Course>(entity =>
            {
                entity.ToTable("Course");

                entity.Property(e => e.DateDeadlineRegistration).HasColumnType("date");

                entity.Property(e => e.DateDeadlineRegistrationP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateEndP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateEndPractical).HasColumnType("date");

                entity.Property(e => e.DateEndPracticalP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.DateStartP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateStartPractical).HasColumnType("date");

                entity.Property(e => e.DateStartPracticalP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Department).HasMaxLength(500);

                entity.Property(e => e.Instructor).HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(500);

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.Property(e => e.TrainingDirector).HasMaxLength(500);

                entity.HasOne(d => d.AircraftModel)
                    .WithMany(p => p.Courses)
                    .HasForeignKey(d => d.AircraftModelId)
                    .HasConstraintName("FK_Course_ACMODEL");

                entity.HasOne(d => d.AircraftType)
                    .WithMany(p => p.Courses)
                    .HasForeignKey(d => d.AircraftTypeId)
                    .HasConstraintName("FK_Course_ACTYPE");

                entity.HasOne(d => d.CaoType)
                    .WithMany(p => p.Courses)
                    .HasForeignKey(d => d.CaoTypeId)
                    .HasConstraintName("FK_Course_CaoType");

                entity.HasOne(d => d.CourseType)
                    .WithMany(p => p.Courses)
                    .HasForeignKey(d => d.CourseTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Course_Type");
            });

            modelBuilder.Entity<CourseAircraftType>(entity =>
            {
                entity.ToTable("CourseAircraftType");

                entity.Property(e => e.Remark).HasMaxLength(255);

                entity.HasOne(d => d.AircraftType)
                    .WithMany(p => p.CourseAircraftTypes)
                    .HasForeignKey(d => d.AircraftTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CRSACTYPE_ACTYPE");

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseAircraftTypes)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_CRSACTYPE_CRS");
            });

            modelBuilder.Entity<CourseCatRate>(entity =>
            {
                entity.ToTable("CourseCatRate");

                entity.Property(e => e.Remark).HasMaxLength(255);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseCatRates)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_CRSCATRATE_CRS");
            });

            modelBuilder.Entity<CourseCategory>(entity =>
            {
                entity.ToTable("CourseCategory");

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_CourseCategory_CourseCategory");
            });

            modelBuilder.Entity<CourseRelatedAircraftType>(entity =>
            {
                entity.ToTable("CourseRelatedAircraftType");

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.HasOne(d => d.AircraftType)
                    .WithMany(p => p.CourseRelatedAircraftTypes)
                    .HasForeignKey(d => d.AircraftTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_COURSEACTYPE_ACTYPE");

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseRelatedAircraftTypes)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_COURSEACTYPE_COURSE");
            });

            modelBuilder.Entity<CourseRelatedCourse>(entity =>
            {
                entity.ToTable("CourseRelatedCourse");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseRelatedCourseCourses)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_COURSE_COURSE");

                entity.HasOne(d => d.RelatedCourse)
                    .WithMany(p => p.CourseRelatedCourseRelatedCourses)
                    .HasForeignKey(d => d.RelatedCourseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_COURSE_COURSERELATED");
            });

            modelBuilder.Entity<CourseRelatedCourseType>(entity =>
            {
                entity.ToTable("CourseRelatedCourseType");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseRelatedCourseTypes)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_COURSETYPE_COURSE");

                entity.HasOne(d => d.CourseType)
                    .WithMany(p => p.CourseRelatedCourseTypes)
                    .HasForeignKey(d => d.CourseTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_COURSETYPE_TYPE");
            });

            modelBuilder.Entity<CourseRelatedEmployee>(entity =>
            {
                entity.ToTable("CourseRelatedEmployee");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseRelatedEmployees)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_COURSEEMPLOYEE_COURSE");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.CourseRelatedEmployees)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_COURSEEMPLOYEE_EMPLOYEE");
            });

            modelBuilder.Entity<CourseRelatedGroup>(entity =>
            {
                entity.ToTable("CourseRelatedGroup");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseRelatedGroups)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_COURSEGROUP_COURSE");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.CourseRelatedGroups)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_COURSEGROUP_GROUP");
            });

            modelBuilder.Entity<CourseRelatedStudyField>(entity =>
            {
                entity.ToTable("CourseRelatedStudyField");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseRelatedStudyFields)
                    .HasForeignKey(d => d.CourseId)
                    .HasConstraintName("FK_COURSESTUDYFIELD");
            });

            modelBuilder.Entity<CourseSession>(entity =>
            {
                entity.ToTable("CourseSession");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.CourseSessions)
                    .HasForeignKey(d => d.CourseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_session_course");
            });

            modelBuilder.Entity<CourseSessionPresence>(entity =>
            {
                entity.ToTable("CourseSessionPresence");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.CourseSessionPresences)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("fk_presence_employee");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.CourseSessionPresences)
                    .HasForeignKey(d => d.SessionId)
                    .HasConstraintName("fk_presence_session");
            });

            modelBuilder.Entity<CourseType>(entity =>
            {
                entity.ToTable("CourseType");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.HasOne(d => d.CourseCategory)
                    .WithMany(p => p.CourseTypes)
                    .HasForeignKey(d => d.CourseCategoryId)
                    .HasConstraintName("FK_UserCourseType_CourseCategory");

                entity.HasOne(d => d.LicenseResultBasic)
                    .WithMany(p => p.CourseTypes)
                    .HasForeignKey(d => d.LicenseResultBasicId)
                    .HasConstraintName("FK_CourseType_LicenseResultBasic");
            });

            modelBuilder.Entity<CrewAvailability>(entity =>
            {
                entity.ToTable("CrewAvailability");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrewAvailabilityStatus>(entity =>
            {
                entity.ToTable("CrewAvailabilityStatus");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrewPickupSm>(entity =>
            {
                entity.ToTable("CrewPickupSMS");

                entity.HasIndex(e => e.Sender, "IDX_CrewPickupSMS_Sender");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.DateVisit).HasColumnType("datetime");

                entity.Property(e => e.DutyDate).HasColumnType("datetime");

                entity.Property(e => e.DutyType).HasMaxLength(500);

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FltIds)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Flts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Message)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Pickup).HasColumnType("datetime");

                entity.Property(e => e.RecMobile)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RecName).HasMaxLength(500);

                entity.Property(e => e.RefId)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Routes)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sender)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.Fdp)
                    .WithMany(p => p.CrewPickupSms)
                    .HasForeignKey(d => d.Fdpid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("cps_fdp");
            });

            modelBuilder.Entity<CrewSecretCode>(entity =>
            {
                entity.HasKey(e => new { e.CrewId, e.Code })
                    .HasName("PK__CrewSecr__F3993983347B45C3");

                entity.ToTable("CrewSecretCode");

                entity.Property(e => e.Code)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrewTypeRequirement>(entity =>
            {
                entity.ToTable("CrewTypeRequirement");
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.ToTable("Currency");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.Symbol).HasMaxLength(255);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.ToTable("Customer");

                entity.Property(e => e.Address)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(200)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Idno)
                    .HasMaxLength(1000)
                    .HasColumnName("IDNo")
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.MapUrl)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Nid)
                    .HasMaxLength(1000)
                    .HasColumnName("NID")
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Phone1)
                    .HasMaxLength(100)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Phone2)
                    .HasMaxLength(100)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Phone3)
                    .HasMaxLength(100)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Website)
                    .HasMaxLength(200)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Customers)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_CSUTOMER_COUNTRY");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Customers)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("FK_CUSTOMER_OPTION");
            });

            modelBuilder.Entity<Cyear>(entity =>
            {
                entity.ToTable("_CYear");

                entity.Property(e => e.Cyear1).HasColumnName("CYear");

                entity.Property(e => e.CyearStr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CYearStr");
            });

            modelBuilder.Entity<CyearFlight>(entity =>
            {
                entity.ToTable("_CYearFlight");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");

                entity.Property(e => e.Cday).HasColumnName("CDay");

                entity.Property(e => e.Cmonth).HasColumnName("CMonth");

                entity.Property(e => e.Cyear).HasColumnName("CYear");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Day>(entity =>
            {
                entity.HasKey(e => e.Date)
                    .HasName("PK__Day__77387D064D3A9941");

                entity.ToTable("Day");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<DayFlight>(entity =>
            {
                entity.ToTable("DayFlight");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Dh).HasColumnName("DH");

                entity.Property(e => e.Dh28).HasColumnName("DH28");

                entity.Property(e => e.Dh28local).HasColumnName("DH28Local");

                entity.Property(e => e.Dhcyear).HasColumnName("DHCYear");

                entity.Property(e => e.DhcyearLocal).HasColumnName("DHCYearLocal");

                entity.Property(e => e.Dhlocal).HasColumnName("DHLocal");

                entity.Property(e => e.Dhyear).HasColumnName("DHYear");

                entity.Property(e => e.DhyearLocal).HasColumnName("DHYearLocal");

                entity.Property(e => e.Flt).HasColumnName("FLT");

                entity.Property(e => e.Flt28).HasColumnName("FLT28");

                entity.Property(e => e.Flt28local).HasColumnName("FLT28Local");

                entity.Property(e => e.Fltcyear).HasColumnName("FLTCYear");

                entity.Property(e => e.FltcyearLocal).HasColumnName("FLTCYearLocal");

                entity.Property(e => e.Fltlocal).HasColumnName("FLTLocal");

                entity.Property(e => e.Fltyear).HasColumnName("FLTYear");

                entity.Property(e => e.FltyearLocal).HasColumnName("FLTYearLocal");
            });

            modelBuilder.Entity<DayGp>(entity =>
            {
                entity.HasKey(e => e.Gdate)
                    .HasName("PK___DayGP__869A7EA480228815");

                entity.ToTable("_DayGP");

                entity.Property(e => e.Gdate)
                    .HasColumnType("datetime")
                    .HasColumnName("GDate");

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pdate2).HasColumnName("PDate2");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.PyearName)
                    .HasMaxLength(255)
                    .HasColumnName("PYearName");
            });

            modelBuilder.Entity<DayGp1>(entity =>
            {
                entity.HasKey(e => e.Gdate)
                    .HasName("PK__DayGP__869A7EA480228815");

                entity.ToTable("DayGP");

                entity.Property(e => e.Gdate)
                    .HasColumnType("datetime")
                    .HasColumnName("GDate");

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pdate2).HasColumnName("PDate2");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.PyearName)
                    .HasMaxLength(255)
                    .HasColumnName("PYearName");
            });

            modelBuilder.Entity<DelayAvgByAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DelayAvgByAirport");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");
            });

            modelBuilder.Entity<DelayAvgByAirportCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DelayAvgByAirportCategory");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");
            });

            modelBuilder.Entity<DelayAvgByCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DelayAvgByCategory");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DelayAvgByRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DelayAvgByRegister");

                entity.Property(e => e.Register)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");
            });

            modelBuilder.Entity<DelayAvgByRegisterCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DelayAvgByRegisterCategory");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Register)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");
            });

            modelBuilder.Entity<DelayCode>(entity =>
            {
                entity.ToTable("DelayCode");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Icategory)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.DelayCategory)
                    .WithMany(p => p.DelayCodes)
                    .HasForeignKey(d => d.DelayCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_dc_cdc");
            });

            modelBuilder.Entity<DelayCodeCategory>(entity =>
            {
                entity.ToTable("DelayCodeCategory");

                entity.Property(e => e.MainCategory)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<DelayId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_DelayIds");

                entity.Property(e => e.FlightId).HasMaxLength(255);
            });

            modelBuilder.Entity<DelayNotified>(entity =>
            {
                entity.ToTable("DelayNotified");
            });

            modelBuilder.Entity<DlyGrp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrp");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<DlyGrpAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpAirport");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<DlyGrpAirportAb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpAirportAbs");

                entity.Property(e => e.Mm).HasColumnName("MM");

                entity.Property(e => e.Yy).HasColumnName("YY");
            });

            modelBuilder.Entity<DlyGrpAirportCat>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpAirportCat");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Icategory)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<DlyGrpAirportDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpAirportDaily");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<DlyGrpCat>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpCat");

                entity.Property(e => e.Icategory)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<DlyGrpCatAirportDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpCatAirportDaily");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Icategory)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<DlyGrpCatDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpCatDaily");

                entity.Property(e => e.Icategory)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<DlyGrpCatRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpCatRegister");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Icategory)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");
            });

            modelBuilder.Entity<DlyGrpCatRegisterDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpCatRegisterDaily");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Icategory)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");
            });

            modelBuilder.Entity<DlyGrpDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpDaily");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<DlyGrpFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpFlight");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<DlyGrpFlightAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpFlightAirport");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<DlyGrpFlightCat>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpFlightCat");

                entity.Property(e => e.Icategory)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<DlyGrpFlightCatAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpFlightCatAirport");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Icategory)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<DlyGrpFlightCatRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DlyGrpFlightCatRegister");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Icategory)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");
            });

            modelBuilder.Entity<Document>(entity =>
            {
                entity.ToTable("Document");

                entity.Property(e => e.FileType).HasMaxLength(500);

                entity.Property(e => e.FileUrl).HasMaxLength(1000);

                entity.Property(e => e.SysUrl).HasMaxLength(1000);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_DOC_DOC");
            });

            modelBuilder.Entity<Dood>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("dood");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Ccm1)
                    .HasColumnType("datetime")
                    .HasColumnName("CCM1");

                entity.Property(e => e.Ccm1dh).HasColumnName("CCM1DH");

                entity.Property(e => e.Ccm1name).HasColumnName("CCM1Name");

                entity.Property(e => e.Ccm2)
                    .HasColumnType("datetime")
                    .HasColumnName("CCM2");

                entity.Property(e => e.Ccm2dh).HasColumnName("CCM2DH");

                entity.Property(e => e.Ccm2name).HasColumnName("CCM2Name");

                entity.Property(e => e.Ccm3)
                    .HasColumnType("datetime")
                    .HasColumnName("CCM3");

                entity.Property(e => e.Ccm3dh).HasColumnName("CCM3DH");

                entity.Property(e => e.Ccm3name).HasColumnName("CCM3Name");

                entity.Property(e => e.Ccm4)
                    .HasColumnType("datetime")
                    .HasColumnName("CCM4");

                entity.Property(e => e.Ccm4dh).HasColumnName("CCM4DH");

                entity.Property(e => e.Ccm4name).HasColumnName("CCM4Name");

                entity.Property(e => e.Ccm5)
                    .HasColumnType("datetime")
                    .HasColumnName("CCM5");

                entity.Property(e => e.Ccm5dh).HasColumnName("CCM5DH");

                entity.Property(e => e.Ccm5name).HasColumnName("CCM5Name");

                entity.Property(e => e.Check1)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECK1");

                entity.Property(e => e.Check1dh).HasColumnName("CHECK1DH");

                entity.Property(e => e.Check1name).HasColumnName("CHECK1Name");

                entity.Property(e => e.Check2)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECK2");

                entity.Property(e => e.Check2dh).HasColumnName("CHECK2DH");

                entity.Property(e => e.Check2name).HasColumnName("CHECK2Name");

                entity.Property(e => e.Color1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Color2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Duration)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Fsta)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FSTA");

                entity.Property(e => e.Fstalocal)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FSTALocal");

                entity.Property(e => e.Fstd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FSTD");

                entity.Property(e => e.Fstdlocal)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FSTDLocal");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Ip1)
                    .HasColumnType("datetime")
                    .HasColumnName("IP1");

                entity.Property(e => e.Ip1dh).HasColumnName("IP1DH");

                entity.Property(e => e.Ip1name).HasColumnName("IP1Name");

                entity.Property(e => e.Ip2)
                    .HasColumnType("datetime")
                    .HasColumnName("IP2");

                entity.Property(e => e.Ip2dh).HasColumnName("IP2DH");

                entity.Property(e => e.Ip2name).HasColumnName("IP2Name");

                entity.Property(e => e.Isccm1)
                    .HasColumnType("datetime")
                    .HasColumnName("ISCCM1");

                entity.Property(e => e.Isccm1dh).HasColumnName("ISCCM1DH");

                entity.Property(e => e.Isccm1name).HasColumnName("ISCCM1Name");

                entity.Property(e => e.Obs1)
                    .HasColumnType("datetime")
                    .HasColumnName("OBS1");

                entity.Property(e => e.Obs1dh).HasColumnName("OBS1DH");

                entity.Property(e => e.Obs1name).HasColumnName("OBS1Name");

                entity.Property(e => e.Obs2)
                    .HasColumnType("datetime")
                    .HasColumnName("OBS2");

                entity.Property(e => e.Obs2dh).HasColumnName("OBS2DH");

                entity.Property(e => e.Obs2name).HasColumnName("OBS2Name");

                entity.Property(e => e.P11).HasColumnType("datetime");

                entity.Property(e => e.P11dh).HasColumnName("P11DH");

                entity.Property(e => e.P11name).HasColumnName("P11Name");

                entity.Property(e => e.P12).HasColumnType("datetime");

                entity.Property(e => e.P12dh).HasColumnName("P12DH");

                entity.Property(e => e.P12name).HasColumnName("P12Name");

                entity.Property(e => e.P13).HasColumnType("datetime");

                entity.Property(e => e.P13dh).HasColumnName("P13DH");

                entity.Property(e => e.P13name).HasColumnName("P13Name");

                entity.Property(e => e.P14).HasColumnType("datetime");

                entity.Property(e => e.P14dh).HasColumnName("P14DH");

                entity.Property(e => e.P14name).HasColumnName("P14Name");

                entity.Property(e => e.P15).HasColumnType("datetime");

                entity.Property(e => e.P15dh).HasColumnName("P15DH");

                entity.Property(e => e.P15name).HasColumnName("P15Name");

                entity.Property(e => e.P21).HasColumnType("datetime");

                entity.Property(e => e.P21dh).HasColumnName("P21DH");

                entity.Property(e => e.P21name).HasColumnName("P21Name");

                entity.Property(e => e.P22).HasColumnType("datetime");

                entity.Property(e => e.P22dh).HasColumnName("P22DH");

                entity.Property(e => e.P22name).HasColumnName("P22Name");

                entity.Property(e => e.P23).HasColumnType("datetime");

                entity.Property(e => e.P23dh).HasColumnName("P23DH");

                entity.Property(e => e.P23name).HasColumnName("P23Name");

                entity.Property(e => e.P24).HasColumnType("datetime");

                entity.Property(e => e.P24dh).HasColumnName("P24DH");

                entity.Property(e => e.P24name).HasColumnName("P24Name");

                entity.Property(e => e.P25).HasColumnType("datetime");

                entity.Property(e => e.P25dh).HasColumnName("P25DH");

                entity.Property(e => e.P25name).HasColumnName("P25Name");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.Safety1).HasColumnType("datetime");

                entity.Property(e => e.Safety1Dh).HasColumnName("Safety1DH");

                entity.Property(e => e.Safety2).HasColumnType("datetime");

                entity.Property(e => e.Safety2Dh).HasColumnName("Safety2DH");

                entity.Property(e => e.Sccm1)
                    .HasColumnType("datetime")
                    .HasColumnName("SCCM1");

                entity.Property(e => e.Sccm1dh).HasColumnName("SCCM1DH");

                entity.Property(e => e.Sccm1name).HasColumnName("SCCM1Name");

                entity.Property(e => e.Sccm2)
                    .HasColumnType("datetime")
                    .HasColumnName("SCCM2");

                entity.Property(e => e.Sccm2dh).HasColumnName("SCCM2DH");

                entity.Property(e => e.Sccm2name).HasColumnName("SCCM2Name");

                entity.Property(e => e.Sccm3).HasColumnName("SCCM3");

                entity.Property(e => e.Sccm3dh).HasColumnName("SCCM3DH");

                entity.Property(e => e.Sccm3name)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SCCM3Name");

                entity.Property(e => e.Sccm4).HasColumnName("SCCM4");

                entity.Property(e => e.Sccm4dh).HasColumnName("SCCM4DH");

                entity.Property(e => e.Sccm4name)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SCCM4Name");

                entity.Property(e => e.Sccm5).HasColumnName("SCCM5");

                entity.Property(e => e.Sccm5dh).HasColumnName("SCCM5DH");

                entity.Property(e => e.Sccm5name)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SCCM5Name");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<DutyFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_DutyFlight");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");

                entity.Property(e => e.DatePart).HasColumnType("date");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FdpitemId).HasColumnName("FDPItemId");
            });

            modelBuilder.Entity<Efbasr>(entity =>
            {
                entity.ToTable("EFBASR");

                entity.Property(e => e.Aatatcinstruction)
                    .HasMaxLength(255)
                    .HasColumnName("AATATCInstruction");

                entity.Property(e => e.AatcallSign)
                    .HasMaxLength(255)
                    .HasColumnName("AATCallSign");

                entity.Property(e => e.AatclearedAltitude)
                    .HasMaxLength(255)
                    .HasColumnName("AATClearedAltitude");

                entity.Property(e => e.Aatfrequency)
                    .HasMaxLength(255)
                    .HasColumnName("AATFrequency");

                entity.Property(e => e.Aatheading)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("AATHeading");

                entity.Property(e => e.AathorizontalPlane).HasColumnName("AATHorizontalPlane");

                entity.Property(e => e.AatisActionTaken)
                    .HasColumnName("AATIsActionTaken")
                    .HasComment("Yes or No");

                entity.Property(e => e.AatisRafollowed)
                    .HasColumnName("AATIsRAFollowed")
                    .HasComment("Yes or No");

                entity.Property(e => e.Aatlighting)
                    .HasMaxLength(255)
                    .HasColumnName("AATLighting");

                entity.Property(e => e.AatmarkingColour)
                    .HasMaxLength(255)
                    .HasColumnName("AATMarkingColour");

                entity.Property(e => e.AatminHorizontalSep)
                    .HasMaxLength(255)
                    .HasColumnName("AATMinHorizontalSep")
                    .HasComment("M/Nm");

                entity.Property(e => e.AatminVerticalSep)
                    .HasMaxLength(255)
                    .HasColumnName("AATMinVerticalSep")
                    .HasComment("Ft");

                entity.Property(e => e.AatotherActype)
                    .HasMaxLength(255)
                    .HasColumnName("AATOtherACType");

                entity.Property(e => e.AatreportedToAtc)
                    .HasMaxLength(255)
                    .HasColumnName("AATReportedToATC");

                entity.Property(e => e.AatriskId).HasColumnName("AATRiskId");

                entity.Property(e => e.AattcasalertId).HasColumnName("AATTCASAlertId");

                entity.Property(e => e.AattypeRa)
                    .HasMaxLength(255)
                    .HasColumnName("AATTypeRA");

                entity.Property(e => e.AatverticalDeviation)
                    .HasMaxLength(255)
                    .HasColumnName("AATVerticalDeviation");

                entity.Property(e => e.Aatxabove).HasColumnName("AATXAbove");

                entity.Property(e => e.Aatxastern).HasColumnName("AATXAstern");

                entity.Property(e => e.Aatyabove).HasColumnName("AATYAbove");

                entity.Property(e => e.Aatyastern).HasColumnName("AATYAstern");

                entity.Property(e => e.AcconfigAp)
                    .HasMaxLength(255)
                    .HasColumnName("ACConfigAP");

                entity.Property(e => e.AcconfigAthr)
                    .HasMaxLength(255)
                    .HasColumnName("ACConfigATHR");

                entity.Property(e => e.AcconfigFlap)
                    .HasMaxLength(255)
                    .HasColumnName("ACConfigFlap");

                entity.Property(e => e.AcconfigGear)
                    .HasMaxLength(255)
                    .HasColumnName("ACConfigGear");

                entity.Property(e => e.AcconfigSlat)
                    .HasMaxLength(255)
                    .HasColumnName("ACConfigSlat");

                entity.Property(e => e.AcconfigSpoilers)
                    .HasMaxLength(255)
                    .HasColumnName("ACConfigSpoilers");

                entity.Property(e => e.ActualWx)
                    .HasMaxLength(500)
                    .HasColumnName("ActualWX");

                entity.Property(e => e.Acweight)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ACWeight")
                    .HasComment("KGs/Lbs");

                entity.Property(e => e.Altitude).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.BsbirdType)
                    .HasMaxLength(255)
                    .HasColumnName("BSBirdType");

                entity.Property(e => e.Bsheading).HasColumnName("BSHeading");

                entity.Property(e => e.BsimpactDec)
                    .HasMaxLength(1000)
                    .HasColumnName("BSImpactDec");

                entity.Property(e => e.BsnrSeenId).HasColumnName("BSNrSeenId");

                entity.Property(e => e.BsnrStruckId).HasColumnName("BSNrStruckId");

                entity.Property(e => e.BstimeId).HasColumnName("BSTimeId");

                entity.Property(e => e.BsturningId).HasColumnName("BSTurningId");

                entity.Property(e => e.DateUpdate)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EventTypeId).HasComment("ASR-AIRPROX/ATC-TCAS RA-WAKE TURBULENCE-BIRD STRIKE");

                entity.Property(e => e.FuelJettisoned)
                    .HasColumnType("decimal(18, 0)")
                    .HasComment("KGs/Lbs");

                entity.Property(e => e.IsAirproxAtc).HasColumnName("IsAirproxATC");

                entity.Property(e => e.IsTcasra).HasColumnName("IsTCASRA");

                entity.Property(e => e.JldatePicapproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDatePICApproved");

                entity.Property(e => e.JlsignedBy)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("JLSignedBy");

                entity.Property(e => e.Locairport)
                    .HasMaxLength(255)
                    .HasColumnName("LOCAirport");

                entity.Property(e => e.Locgeoaltitude)
                    .HasMaxLength(255)
                    .HasColumnName("LOCGEOAltitude");

                entity.Property(e => e.Locgeolongtitude)
                    .HasMaxLength(255)
                    .HasColumnName("LOCGEOLongtitude");

                entity.Property(e => e.Locrunway)
                    .HasMaxLength(255)
                    .HasColumnName("LOCRunway");

                entity.Property(e => e.Locstand)
                    .HasMaxLength(255)
                    .HasColumnName("LOCStand");

                entity.Property(e => e.Metid).HasColumnName("METId");

                entity.Property(e => e.OccurrenceDate)
                    .HasColumnType("datetime")
                    .HasComment("Date of Occurrence & UTCTime");

                entity.Property(e => e.OpsconfirmDate)
                    .HasColumnType("datetime")
                    .HasColumnName("OPSConfirmDate");

                entity.Property(e => e.Opsid).HasColumnName("OPSId");

                entity.Property(e => e.Opsremark)
                    .HasMaxLength(4000)
                    .HasColumnName("OPSRemark");

                entity.Property(e => e.OpsremarkDate)
                    .HasColumnType("datetime")
                    .HasColumnName("OPSRemarkDate");

                entity.Property(e => e.OpsstaffConfirmDate)
                    .HasColumnType("datetime")
                    .HasColumnName("OPSStaffConfirmDate");

                entity.Property(e => e.OpsstaffDateVisit)
                    .HasColumnType("datetime")
                    .HasColumnName("OPSStaffDateVisit");

                entity.Property(e => e.OpsstaffId).HasColumnName("OPSStaffId");

                entity.Property(e => e.OpsstaffRemark)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("OPSStaffRemark");

                entity.Property(e => e.OpsstaffRemarkDate)
                    .HasColumnType("datetime")
                    .HasColumnName("OPSStaffRemarkDate");

                entity.Property(e => e.OpsstaffStatusId).HasColumnName("OPSStaffStatusId");

                entity.Property(e => e.OpsstaffUser)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("OPSStaffUser");

                entity.Property(e => e.OpsstatusId).HasColumnName("OPSStatusId");

                entity.Property(e => e.Opsuser)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("OPSUser");

                entity.Property(e => e.OthersInfo).HasMaxLength(2000);

                entity.Property(e => e.Pic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PIC");

                entity.Property(e => e.Picdate)
                    .HasColumnType("date")
                    .HasColumnName("PICDate");

                entity.Property(e => e.Picid).HasColumnName("PICId");

                entity.Property(e => e.Result).HasMaxLength(2000);

                entity.Property(e => e.SigxWxid).HasColumnName("SigxWXId");

                entity.Property(e => e.SigxWxtypeId).HasColumnName("SigxWXTypeId");

                entity.Property(e => e.Squawk)
                    .HasMaxLength(255)
                    .HasColumnName("SQUAWK");

                entity.Property(e => e.Summary).HasMaxLength(2000);

                entity.Property(e => e.TechLogItemNo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TechLogItemNO");

                entity.Property(e => e.TechLogPageNo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TechLogPageNO");

                entity.Property(e => e.User)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.WtattitudeChangeDeg)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("WTAttitudeChangeDeg");

                entity.Property(e => e.WtattitudeChangeId).HasColumnName("WTAttitudeChangeId");

                entity.Property(e => e.WtdescribeVa)
                    .HasMaxLength(1000)
                    .HasColumnName("WTDescribeVA");

                entity.Property(e => e.WtextendedCenterlinePosId).HasColumnName("WTExtendedCenterlinePosId");

                entity.Property(e => e.WtglideSlopePosId).HasColumnName("WTGlideSlopePosId");

                entity.Property(e => e.Wtheading)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("WTHeading");

                entity.Property(e => e.WtisAware)
                    .HasColumnName("WTIsAware")
                    .HasComment("Yes or No");

                entity.Property(e => e.WtisBuffet)
                    .HasColumnName("WTIsBuffet")
                    .HasComment("Yes or No");

                entity.Property(e => e.WtisStickShaker)
                    .HasColumnName("WTIsStickShaker")
                    .HasComment("Yes or No");

                entity.Property(e => e.WtprecedingAc)
                    .HasMaxLength(255)
                    .HasColumnName("WTPrecedingAC");

                entity.Property(e => e.Wtsuspect)
                    .HasMaxLength(1000)
                    .HasColumnName("WTSuspect");

                entity.Property(e => e.WtturningId).HasColumnName("WTTurningId");
            });

            modelBuilder.Entity<EfbbirdStrikeCao>(entity =>
            {
                entity.ToTable("EFBBirdStrikeCAO");

                entity.Property(e => e.ACpartEngineNo1).HasColumnName("A/CPartEngineNO1");

                entity.Property(e => e.ACpartEngineNo2).HasColumnName("A/CPartEngineNO2");

                entity.Property(e => e.ACpartEngineNo3).HasColumnName("A/CPartEngineNO3");

                entity.Property(e => e.ACpartEngineNo4).HasColumnName("A/CPartEngineNO4");

                entity.Property(e => e.ACpartFuselage).HasColumnName("A/CPartFuselage");

                entity.Property(e => e.ACpartLandingGear).HasColumnName("A/CPartLandingGear");

                entity.Property(e => e.ACpartLight).HasColumnName("A/CPartLight");

                entity.Property(e => e.ACpartNose).HasColumnName("A/CPartNose");

                entity.Property(e => e.ACpartOtherSpecify).HasColumnName("A/CPartOther(Specify)");

                entity.Property(e => e.ACpartPropeller).HasColumnName("A/CPartPropeller");

                entity.Property(e => e.ACpartRadom)
                    .HasColumnName("A/CPartRadom")
                    .HasComment("0:Struck 1:Damaged");

                entity.Property(e => e.ACpartTail).HasColumnName("A/CPartTail");

                entity.Property(e => e.ACpartWindShield)
                    .HasColumnName("A/CPartWindShield")
                    .HasComment("0:Struck 1:Damaged");

                entity.Property(e => e.ACpartWingRotor).HasColumnName("A/CPartWing/Rotor");

                entity.Property(e => e.AerodromeName).HasMaxLength(255);

                entity.Property(e => e.BirdSpecies).HasMaxLength(255);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.EnRouteLoc).HasMaxLength(255);

                entity.Property(e => e.EngineModel).HasMaxLength(255);

                entity.Property(e => e.HeightAgl)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("HeightAGl")
                    .HasComment("Ft");

                entity.Property(e => e.IsEffectNone).HasColumnName("IsEffect\r\nNone");

                entity.Property(e => e.IsPrecipitationFog).HasComment("");

                entity.Property(e => e.IsPrecipitationRain).HasComment("");

                entity.Property(e => e.IsPrecipitationSnow).HasComment("");

                entity.Property(e => e.Remarks).HasMaxLength(1000);

                entity.Property(e => e.RunwayUsed).HasMaxLength(255);

                entity.Property(e => e.SpeedIas)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("Speed(IAS)")
                    .HasComment("kt");
            });

            modelBuilder.Entity<Efbdsprelease>(entity =>
            {
                entity.ToTable("EFBDSPRelease");

                entity.Property(e => e.ActualWxcpt).HasColumnName("ActualWXCPT");

                entity.Property(e => e.ActualWxcptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("ActualWXCPTRemark");

                entity.Property(e => e.ActualWxdsp).HasColumnName("ActualWXDSP");

                entity.Property(e => e.ActualWxdspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("ActualWXDSPRemark");

                entity.Property(e => e.AtcflightPlanCpt).HasColumnName("ATCFlightPlanCPT");

                entity.Property(e => e.AtcflightPlanCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("ATCFlightPlanCPTRemark");

                entity.Property(e => e.AtcflightPlanDsp).HasColumnName("ATCFlightPlanDSP");

                entity.Property(e => e.AtcflightPlanDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("ATCFlightPlanDSPRemark");

                entity.Property(e => e.AtsflightPlanCmdr).HasColumnName("ATSFlightPlanCMDR");

                entity.Property(e => e.AtsflightPlanCmdrremark)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ATSFlightPlanCMDRRemark");

                entity.Property(e => e.AtsflightPlanFoo).HasColumnName("ATSFlightPlanFOO");

                entity.Property(e => e.AtsflightPlanFooremark)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ATSFlightPlanFOORemark");

                entity.Property(e => e.AvsecincidentReportCpt).HasColumnName("AVSECIncidentReportCPT");

                entity.Property(e => e.AvsecincidentReportCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("AVSECIncidentReportCPTRemark");

                entity.Property(e => e.AvsecincidentReportDsp).HasColumnName("AVSECIncidentReportDSP");

                entity.Property(e => e.AvsecincidentReportDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("AVSECIncidentReportDSPRemark");

                entity.Property(e => e.ComputedFligthPlanCpt).HasColumnName("ComputedFligthPlanCPT");

                entity.Property(e => e.ComputedFligthPlanCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("ComputedFligthPlanCPTRemark");

                entity.Property(e => e.ComputedFligthPlanDsp).HasColumnName("ComputedFligthPlanDSP");

                entity.Property(e => e.ComputedFligthPlanDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("ComputedFligthPlanDSPRemark");

                entity.Property(e => e.DateConfirmed).HasColumnType("date");

                entity.Property(e => e.DateUpdate)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FlightReportCpt).HasColumnName("FlightReportCPT");

                entity.Property(e => e.FlightReportCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("FlightReportCPTRemark");

                entity.Property(e => e.FlightReportDsp).HasColumnName("FlightReportDSP");

                entity.Property(e => e.FlightReportDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("FlightReportDSPRemark");

                entity.Property(e => e.FlightSafetyReportCpt).HasColumnName("FlightSafetyReportCPT");

                entity.Property(e => e.FlightSafetyReportCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("FlightSafetyReportCPTRemark");

                entity.Property(e => e.FlightSafetyReportDsp).HasColumnName("FlightSafetyReportDSP");

                entity.Property(e => e.FlightSafetyReportDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("FlightSafetyReportDSPRemark");

                entity.Property(e => e.GeneralDeclarationCpt).HasColumnName("GeneralDeclarationCPT");

                entity.Property(e => e.GeneralDeclarationCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("GeneralDeclarationCPTRemark");

                entity.Property(e => e.GeneralDeclarationDsp).HasColumnName("GeneralDeclarationDSP");

                entity.Property(e => e.GeneralDeclarationDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("GeneralDeclarationDSPRemark");

                entity.Property(e => e.GoodDeclarationCpt).HasColumnName("GoodDeclarationCPT");

                entity.Property(e => e.GoodDeclarationCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("GoodDeclarationCPTRemark");

                entity.Property(e => e.GoodDeclarationDsp).HasColumnName("GoodDeclarationDSP");

                entity.Property(e => e.GoodDeclarationDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("GoodDeclarationDSPRemark");

                entity.Property(e => e.Ipadcpt).HasColumnName("IPADCPT");

                entity.Property(e => e.Ipadcptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("IPADCPTRemark");

                entity.Property(e => e.Ipaddsp).HasColumnName("IPADDSP");

                entity.Property(e => e.Ipaddspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("IPADDSPRemark");

                entity.Property(e => e.JeppesenAirwayManualCpt).HasColumnName("JeppesenAirwayManualCPT");

                entity.Property(e => e.JeppesenAirwayManualCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("JeppesenAirwayManualCPTRemark");

                entity.Property(e => e.JeppesenAirwayManualDsp).HasColumnName("JeppesenAirwayManualDSP");

                entity.Property(e => e.JeppesenAirwayManualDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("JeppesenAirwayManualDSPRemark");

                entity.Property(e => e.JldatePicapproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDatePICApproved");

                entity.Property(e => e.JlsignedBy)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("JLSignedBy");

                entity.Property(e => e.LoadSheetCpt).HasColumnName("LoadSheetCPT");

                entity.Property(e => e.LoadSheetCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("LoadSheetCPTRemark");

                entity.Property(e => e.LoadSheetDsp).HasColumnName("LoadSheetDSP");

                entity.Property(e => e.LoadSheetDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("LoadSheetDSPRemark");

                entity.Property(e => e.MinFuelRequiredCfp)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("MinFuelRequiredCFP");

                entity.Property(e => e.MinFuelRequiredCpt).HasColumnName("MinFuelRequiredCPT");

                entity.Property(e => e.MinFuelRequiredDsp).HasColumnName("MinFuelRequiredDSP");

                entity.Property(e => e.MinFuelRequiredPilotReq).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.NotamCpt).HasColumnName("NotamCPT");

                entity.Property(e => e.NotamCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("NotamCPTRemark");

                entity.Property(e => e.NotamDsp).HasColumnName("NotamDSP");

                entity.Property(e => e.NotamDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("NotamDSPRemark");

                entity.Property(e => e.Note).IsUnicode(false);

                entity.Property(e => e.OperationEngineeringCpt).HasColumnName("OperationEngineeringCPT");

                entity.Property(e => e.OperationEngineeringCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("OperationEngineeringCPTRemark");

                entity.Property(e => e.OperationEngineeringDsp).HasColumnName("OperationEngineeringDSP");

                entity.Property(e => e.OperationEngineeringDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("OperationEngineeringDSPRemark");

                entity.Property(e => e.OperationalFlightPlanCmdr).HasColumnName("OperationalFlightPlanCMDR");

                entity.Property(e => e.OperationalFlightPlanCmdrremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OperationalFlightPlanCMDRRemark");

                entity.Property(e => e.OperationalFlightPlanFoo).HasColumnName("OperationalFlightPlanFOO");

                entity.Property(e => e.OperationalFlightPlanFooremark)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OperationalFlightPlanFOORemark");

                entity.Property(e => e.PermissionsCpt).HasColumnName("PermissionsCPT");

                entity.Property(e => e.PermissionsCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("PermissionsCPTRemark");

                entity.Property(e => e.PermissionsDsp).HasColumnName("PermissionsDSP");

                entity.Property(e => e.PermissionsDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("PermissionsDSPRemark");

                entity.Property(e => e.Pic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PIC");

                entity.Property(e => e.Picid).HasColumnName("PICId");

                entity.Property(e => e.Pifcpt).HasColumnName("PIFCPT");

                entity.Property(e => e.Pifcptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("PIFCPTRemark");

                entity.Property(e => e.Pifdsp).HasColumnName("PIFDSP");

                entity.Property(e => e.Pifdspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("PIFDSPRemark");

                entity.Property(e => e.SigxWxcpt).HasColumnName("SigxWXCPT");

                entity.Property(e => e.SigxWxcptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("SigxWXCPTRemark");

                entity.Property(e => e.SigxWxdsp).HasColumnName("SigxWXDSP");

                entity.Property(e => e.SigxWxdspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("SigxWXDSPRemark");

                entity.Property(e => e.TolndCardsCpt).HasColumnName("TOLndCardsCPT");

                entity.Property(e => e.TolndCardsCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("TOLndCardsCPTRemark");

                entity.Property(e => e.TolndCardsDsp).HasColumnName("TOLndCardsDSP");

                entity.Property(e => e.TolndCardsDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("TOLndCardsDSPRemark");

                entity.Property(e => e.User)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.VldCmccmdr).HasColumnName("VldCMCCMDR");

                entity.Property(e => e.VldCmccmdrremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldCMCCMDRRemark");

                entity.Property(e => e.VldCmcfoo).HasColumnName("VldCMCFOO");

                entity.Property(e => e.VldCmcfooremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldCMCFOORemark");

                entity.Property(e => e.VldEfbcmdr).HasColumnName("VldEFBCMDR");

                entity.Property(e => e.VldEfbcmdrremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldEFBCMDRRemark");

                entity.Property(e => e.VldEfbfoo).HasColumnName("VldEFBFOO");

                entity.Property(e => e.VldEfbfooremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldEFBFOORemark");

                entity.Property(e => e.VldFlightCrewCmdr).HasColumnName("VldFlightCrewCMDR");

                entity.Property(e => e.VldFlightCrewCmdrremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldFlightCrewCMDRRemark");

                entity.Property(e => e.VldFlightCrewFoo).HasColumnName("VldFlightCrewFOO");

                entity.Property(e => e.VldFlightCrewFooremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldFlightCrewFOORemark");

                entity.Property(e => e.VldMedicalCmdr).HasColumnName("VldMedicalCMDR");

                entity.Property(e => e.VldMedicalCmdrremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldMedicalCMDRRemark");

                entity.Property(e => e.VldMedicalFoo).HasColumnName("VldMedicalFOO");

                entity.Property(e => e.VldMedicalFooremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldMedicalFOORemark");

                entity.Property(e => e.VldPassportCmdr).HasColumnName("VldPassportCMDR");

                entity.Property(e => e.VldPassportCmdrremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldPassportCMDRRemark");

                entity.Property(e => e.VldPassportFoo).HasColumnName("VldPassportFOO");

                entity.Property(e => e.VldPassportFooremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldPassportFOORemark");

                entity.Property(e => e.VldRampPassCmdr).HasColumnName("VldRampPassCMDR");

                entity.Property(e => e.VldRampPassCmdrremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldRampPassCMDRRemark");

                entity.Property(e => e.VldRampPassFoo).HasColumnName("VldRampPassFOO");

                entity.Property(e => e.VldRampPassFooremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldRampPassFOORemark");

                entity.Property(e => e.VoyageReportCpt).HasColumnName("VoyageReportCPT");

                entity.Property(e => e.VoyageReportCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("VoyageReportCPTRemark");

                entity.Property(e => e.VoyageReportDsp).HasColumnName("VoyageReportDSP");

                entity.Property(e => e.VoyageReportDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("VoyageReportDSPRemark");

                entity.Property(e => e.WindChartCpt).HasColumnName("WindChartCPT");

                entity.Property(e => e.WindChartCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("WindChartCPTRemark");

                entity.Property(e => e.WindChartDsp).HasColumnName("WindChartDSP");

                entity.Property(e => e.WindChartDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("WindChartDSPRemark");

                entity.Property(e => e.WxforcastCpt).HasColumnName("WXForcastCPT");

                entity.Property(e => e.WxforcastCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("WXForcastCPTRemark");

                entity.Property(e => e.WxforcastDsp).HasColumnName("WXForcastDSP");

                entity.Property(e => e.WxforcastDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("WXForcastDSPRemark");

                entity.HasOne(d => d.Dispatcher)
                    .WithMany(p => p.Efbdspreleases)
                    .HasForeignKey(d => d.DispatcherId)
                    .HasConstraintName("fk_EFB_EMP");

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.Efbdspreleases)
                    .HasForeignKey(d => d.FlightId)
                    .HasConstraintName("fk_EFB_FI");
            });

            modelBuilder.Entity<EfbflightIrregularity>(entity =>
            {
                entity.ToTable("EFBFlightIrregularity");

                entity.HasOne(d => d.VoyageReport)
                    .WithMany(p => p.EfbflightIrregularities)
                    .HasForeignKey(d => d.VoyageReportId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk-Irr-vr");
            });

            modelBuilder.Entity<EfboccurrenceCao>(entity =>
            {
                entity.ToTable("EFBOccurrenceCAO");

                entity.Property(e => e.AcflightPhaseId).HasColumnName("ACFlightPhaseId");

                entity.Property(e => e.AcflightPhaseRemark)
                    .HasMaxLength(500)
                    .HasColumnName("ACFlightPhaseRemark");

                entity.Property(e => e.Altitude).HasMaxLength(255);

                entity.Property(e => e.DamageDetail).HasMaxLength(1000);

                entity.Property(e => e.EquipmentAirportPlacard).HasMaxLength(255);

                entity.Property(e => e.EquipmentCompany).HasMaxLength(255);

                entity.Property(e => e.EquipmentContan).HasMaxLength(255);

                entity.Property(e => e.EquipmentDriverName).HasMaxLength(255);

                entity.Property(e => e.EquipmentIdNo)
                    .HasMaxLength(1)
                    .HasColumnName("EquipmentIdNO");

                entity.Property(e => e.EquipmentType).HasMaxLength(255);

                entity.Property(e => e.EventTimeWx)
                    .HasMaxLength(1)
                    .HasColumnName("EventTimeWX");

                entity.Property(e => e.ForcastWx)
                    .HasMaxLength(255)
                    .HasColumnName("ForcastWX");

                entity.Property(e => e.IsDay).HasComment("Day / Night");

                entity.Property(e => e.Location).HasMaxLength(255);

                entity.Property(e => e.OccurrenceDate).HasColumnType("datetime");

                entity.Property(e => e.OtherDangerousGood).HasMaxLength(255);

                entity.Property(e => e.PriorEventWx)
                    .HasMaxLength(255)
                    .HasColumnName("PriorEventWX");
            });

            modelBuilder.Entity<Efbreason>(entity =>
            {
                entity.ToTable("EFBReason");

                entity.HasOne(d => d.VoyageReport)
                    .WithMany(p => p.Efbreasons)
                    .HasForeignKey(d => d.VoyageReportId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk-reason-vr");
            });

            modelBuilder.Entity<EfbvoyageReport>(entity =>
            {
                entity.ToTable("EFBVoyageReport");

                entity.Property(e => e.DateActioned).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("date");

                entity.Property(e => e.DatePicsignature)
                    .HasColumnType("date")
                    .HasColumnName("DatePICSignature");

                entity.Property(e => e.DateUpdate)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.JldatePicapproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDatePICApproved");

                entity.Property(e => e.JlsignedBy)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("JLSignedBy");

                entity.Property(e => e.OpsconfirmDate)
                    .HasColumnType("datetime")
                    .HasColumnName("OPSConfirmDate");

                entity.Property(e => e.Opsid).HasColumnName("OPSId");

                entity.Property(e => e.Opsremark)
                    .HasMaxLength(4000)
                    .HasColumnName("OPSRemark");

                entity.Property(e => e.OpsremarkDate)
                    .HasColumnType("datetime")
                    .HasColumnName("OPSRemarkDate");

                entity.Property(e => e.OpsstaffConfirmDate)
                    .HasColumnType("datetime")
                    .HasColumnName("OPSStaffConfirmDate");

                entity.Property(e => e.OpsstaffDateVisit)
                    .HasColumnType("datetime")
                    .HasColumnName("OPSStaffDateVisit");

                entity.Property(e => e.OpsstaffId).HasColumnName("OPSStaffId");

                entity.Property(e => e.OpsstaffRemark)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("OPSStaffRemark");

                entity.Property(e => e.OpsstaffRemarkDate)
                    .HasColumnType("datetime")
                    .HasColumnName("OPSStaffRemarkDate");

                entity.Property(e => e.OpsstaffStatusId).HasColumnName("OPSStaffStatusId");

                entity.Property(e => e.OpsstaffUser)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("OPSStaffUser");

                entity.Property(e => e.OpsstatusId).HasColumnName("OPSStatusId");

                entity.Property(e => e.Opsuser)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("OPSUser");

                entity.Property(e => e.Pic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PIC");

                entity.Property(e => e.Picid).HasColumnName("PICId");

                entity.Property(e => e.Route).HasMaxLength(255);

                entity.Property(e => e.User)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.ToTable("Employee");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.DateInactiveBegin).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveEnd).HasColumnType("datetime");

                entity.Property(e => e.Phone).HasMaxLength(500);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.HasOne(d => d.BaseAirport)
                    .WithMany(p => p.EmployeeBaseAirports)
                    .HasForeignKey(d => d.BaseAirportId)
                    .HasConstraintName("fk_emp_baseairport");

                entity.HasOne(d => d.CurrentLocationAirportNavigation)
                    .WithMany(p => p.EmployeeCurrentLocationAirportNavigations)
                    .HasForeignKey(d => d.CurrentLocationAirport)
                    .HasConstraintName("fk_emp_airport");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.Employee)
                    .HasForeignKey<Employee>(d => d.Id)
                    .HasConstraintName("FK_EMPLOYEE_PERSONCUSTOMER");
            });

            modelBuilder.Entity<EmployeeBookStatus>(entity =>
            {
                entity.ToTable("EmployeeBookStatus");

                entity.Property(e => e.DateDownload).HasColumnType("datetime");

                entity.Property(e => e.DateVisit).HasColumnType("datetime");

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.EmployeeBookStatuses)
                    .HasForeignKey(d => d.BookId)
                    .HasConstraintName("FK_EmployeeBookStatus_Book_Id");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeBookStatuses)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_EmployeeBookStatus_Employee_Id");
            });

            modelBuilder.Entity<EmployeeCalendar>(entity =>
            {
                entity.ToTable("EmployeeCalendar");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateCease).HasColumnType("datetime");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.HasOne(d => d.Fdp)
                    .WithMany(p => p.EmployeeCalendars)
                    .HasForeignKey(d => d.Fdpid)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ec_fdpid");
            });

            modelBuilder.Entity<EmployeeCalendarSplited>(entity =>
            {
                entity.ToTable("EmployeeCalendarSplited");

                entity.Property(e => e.DateCease).HasColumnType("datetime");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.EmployeeCalendarSpliteds)
                    .HasForeignKey(d => d.BoxId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ecs_bc");

                entity.HasOne(d => d.Master)
                    .WithMany(p => p.EmployeeCalendarSpliteds)
                    .HasForeignKey(d => d.MasterId)
                    .HasConstraintName("fk_cd_cm");
            });

            modelBuilder.Entity<EmployeeLocation>(entity =>
            {
                entity.ToTable("EmployeeLocation");

                entity.Property(e => e.DateActiveEnd).HasColumnType("datetime");

                entity.Property(e => e.DateActiveEndP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateActiveStart).HasColumnType("datetime");

                entity.Property(e => e.DateActiveStartP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.EmployeeLocations)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("FK_EMPLOCATION_EMPLOYEE");

                entity.HasOne(d => d.Location)
                    .WithMany(p => p.EmployeeLocations)
                    .HasForeignKey(d => d.LocationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EMPLOCATION_LOCATION");
            });

            modelBuilder.Entity<ExpFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ExpFlight");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalDay).HasColumnType("date");

                entity.Property(e => e.ArrivalDayLocal).HasColumnType("date");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureDay).HasColumnType("date");

                entity.Property(e => e.DepartureDayLocal).HasColumnType("date");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Destination).HasMaxLength(255);

                entity.Property(e => e.DestinationIcao)
                    .HasMaxLength(255)
                    .HasColumnName("DestinationICAO");

                entity.Property(e => e.FlightNo).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.Origin).HasMaxLength(255);

                entity.Property(e => e.OriginIcao)
                    .HasMaxLength(255)
                    .HasColumnName("OriginICAO");

                entity.Property(e => e.PersianDate).HasMaxLength(500);

                entity.Property(e => e.PersianDayName).HasMaxLength(255);

                entity.Property(e => e.PersianMonthName).HasMaxLength(255);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");
            });

            modelBuilder.Entity<ExtIdea>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ExtIdea");

                entity.Property(e => e.BeginDate).HasColumnType("datetime");

                entity.Property(e => e.City)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ClassId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ClassID");

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Days)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Expire).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Instructor)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Issue).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Location)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Nid)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NID");

                entity.Property(e => e.PersonalCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Extension>(entity =>
            {
                entity.ToTable("Extension");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.MaxFdp).HasColumnName("MaxFDP");

                entity.Property(e => e.MaxFdph).HasColumnName("MaxFDPH");
            });

            modelBuilder.Entity<ExtensionHistory>(entity =>
            {
                entity.ToTable("ExtensionHistory");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.Fdp)
                    .WithMany(p => p.ExtensionHistories)
                    .HasForeignKey(d => d.Fdpid)
                    .HasConstraintName("fk_exh_fdp");
            });

            modelBuilder.Entity<Fdm>(entity =>
            {
                entity.ToTable("FDM");

                entity.Property(e => e.AircraftType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovedBy).HasMaxLength(255);

                entity.Property(e => e.Context)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasPrecision(0);

                entity.Property(e => e.DateApproved).HasPrecision(0);

                entity.Property(e => e.DateCreate).HasPrecision(0);

                entity.Property(e => e.DateRemoved).HasPrecision(0);

                entity.Property(e => e.EventName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FileName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Ip)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IP");

                entity.Property(e => e.Ipid).HasColumnName("IPId");

                entity.Property(e => e.IsLockedDate).HasPrecision(0);

                entity.Property(e => e.IsVisibleDate).HasPrecision(0);

                entity.Property(e => e.Key)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Limit)
                    .HasMaxLength(53)
                    .IsUnicode(false);

                entity.Property(e => e.P1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.P1id).HasColumnName("P1Id");

                entity.Property(e => e.P2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.Pflr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PFLR");

                entity.Property(e => e.Phase)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PublishedBy).HasMaxLength(255);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.RemovedBy).HasMaxLength(255);

                entity.Property(e => e.Severity)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StateName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Tddatetime)
                    .HasPrecision(0)
                    .HasColumnName("TDDatetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.Todatetime)
                    .HasPrecision(0)
                    .HasColumnName("TODatetime");

                entity.Property(e => e.Type)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Units)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Value).HasMaxLength(53);

                entity.Property(e => e.ValueName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FdmactionRecipient>(entity =>
            {
                entity.ToTable("FDMActionRecipient");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.RemarkDate).HasPrecision(0);

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.FdmactionRecipients)
                    .HasForeignKey(d => d.ActionId)
                    .HasConstraintName("fk_actionId");
            });

            modelBuilder.Entity<FdmactionType>(entity =>
            {
                entity.ToTable("FDMActionTypes");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(255);
            });

            modelBuilder.Entity<FdmairportMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMAirportMonthly");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Phase)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<FdmcptAirportMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMCptAirportMonthly");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Phase)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<FdmcptAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMCptAll");

                entity.Property(e => e.CptCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CptName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FdmcptAnnually>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMCptAnnually");

                entity.Property(e => e.CptCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CptName)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.IncidentCount).HasColumnName("incidentCount");
            });

            modelBuilder.Entity<FdmcptDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMCptDaily");

                entity.Property(e => e.CptCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CptName)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Day).HasColumnType("date");

                entity.Property(e => e.ForesEventsCount).HasColumnName("FOResEventsCount");

                entity.Property(e => e.IpeventCount).HasColumnName("IPEventCount");

                entity.Property(e => e.IphighCount).HasColumnName("IPHighCount");

                entity.Property(e => e.IplowCount).HasColumnName("IPLowCount");

                entity.Property(e => e.IpmediumCount).HasColumnName("IPMediumCount");

                entity.Property(e => e.IpotherResEventsCount).HasColumnName("IPOtherResEventsCount");

                entity.Property(e => e.IpresEventsCount).HasColumnName("IPResEventsCount");

                entity.Property(e => e.IpselfResEventsCount).HasColumnName("IPSelfResEventsCount");

                entity.Property(e => e.P1EventCount).HasColumnName("p1EventCount");

                entity.Property(e => e.P1highCount).HasColumnName("P1HighCount");

                entity.Property(e => e.P1lowCount).HasColumnName("P1LowCount");

                entity.Property(e => e.P1mediumCount).HasColumnName("P1MediumCount");

                entity.Property(e => e.P1otherResEventsCount).HasColumnName("P1OtherResEventsCount");

                entity.Property(e => e.P1resEventsCount).HasColumnName("P1ResEventsCount");

                entity.Property(e => e.P1selfResEventsCount).HasColumnName("P1SelfResEventsCount");
            });

            modelBuilder.Entity<FdmcptEventDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMCptEventDaily");

                entity.Property(e => e.CptCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CptName)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Day).HasColumnType("date");

                entity.Property(e => e.EventName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FdmcptEventMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMCptEventMonthly");

                entity.Property(e => e.CptCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CptName)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.EventName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FdmcptFoDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMCptFoDaily");

                entity.Property(e => e.Day).HasColumnType("date");

                entity.Property(e => e.IpCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ipid).HasColumnName("IPId");

                entity.Property(e => e.Ipname)
                    .HasMaxLength(1001)
                    .HasColumnName("IPName");

                entity.Property(e => e.P1code)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P1Code");

                entity.Property(e => e.P1id).HasColumnName("P1Id");

                entity.Property(e => e.P1name)
                    .HasMaxLength(1001)
                    .HasColumnName("P1Name");

                entity.Property(e => e.P2code)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P2Code");

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.P2name)
                    .HasMaxLength(1001)
                    .HasColumnName("P2Name");
            });

            modelBuilder.Entity<FdmcptFoMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMCptFoMonthly");

                entity.Property(e => e.IpCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ipid).HasColumnName("IPId");

                entity.Property(e => e.Ipname)
                    .HasMaxLength(1001)
                    .HasColumnName("IPName");

                entity.Property(e => e.P1code)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P1Code");

                entity.Property(e => e.P1id).HasColumnName("P1Id");

                entity.Property(e => e.P1name)
                    .HasMaxLength(1001)
                    .HasColumnName("P1Name");

                entity.Property(e => e.P2code)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P2Code");

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.P2name)
                    .HasMaxLength(1001)
                    .HasColumnName("P2Name");
            });

            modelBuilder.Entity<FdmcptIpDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMCptIpDaily");

                entity.Property(e => e.Day).HasColumnType("date");

                entity.Property(e => e.IpCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IpName).HasMaxLength(1001);

                entity.Property(e => e.P1code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P1Code");

                entity.Property(e => e.P1id).HasColumnName("P1Id");

                entity.Property(e => e.P1name)
                    .HasMaxLength(1001)
                    .HasColumnName("P1Name");
            });

            modelBuilder.Entity<FdmcptIpMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMCptIpMonthly");

                entity.Property(e => e.IpCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IpName).HasMaxLength(1001);

                entity.Property(e => e.P1Id).HasColumnName("p1Id");

                entity.Property(e => e.P1code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P1Code");

                entity.Property(e => e.P1name)
                    .HasMaxLength(1001)
                    .HasColumnName("P1Name");
            });

            modelBuilder.Entity<FdmcptMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMCptMonthly");

                entity.Property(e => e.CptCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CptName)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.ForesEventsCount).HasColumnName("FOResEventsCount");

                entity.Property(e => e.IpeventCount).HasColumnName("IPEventCount");

                entity.Property(e => e.IphighCount).HasColumnName("IPHighCount");

                entity.Property(e => e.IplowCount).HasColumnName("IPLowCount");

                entity.Property(e => e.IpmediumCount).HasColumnName("IPMediumCount");

                entity.Property(e => e.IpotherResEventsCount).HasColumnName("IPOtherResEventsCount");

                entity.Property(e => e.IpresEventsCount).HasColumnName("IPResEventsCount");

                entity.Property(e => e.IpselfResEventsCount).HasColumnName("IPSelfResEventsCount");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.P1EventCount).HasColumnName("p1EventCount");

                entity.Property(e => e.P1highCount).HasColumnName("P1HighCount");

                entity.Property(e => e.P1lowCount).HasColumnName("P1LowCount");

                entity.Property(e => e.P1mediumCount).HasColumnName("P1MediumCount");

                entity.Property(e => e.P1otherResEventsCount).HasColumnName("P1OtherResEventsCount");

                entity.Property(e => e.P1resEventsCount).HasColumnName("P1ResEventsCount");

                entity.Property(e => e.P1selfResEventsCount).HasColumnName("P1SelfResEventsCount");
            });

            modelBuilder.Entity<Fdmdaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMDaily");

                entity.Property(e => e.FlightDate).HasColumnType("date");
            });

            modelBuilder.Entity<FdmeventAction>(entity =>
            {
                entity.ToTable("FDMEventAction");

                entity.Property(e => e.ActionInfo)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.ActionType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ClassId).HasMaxLength(500);

                entity.Property(e => e.CourseInstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseLocation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasPrecision(0);

                entity.Property(e => e.EndDate).HasPrecision(0);

                entity.Property(e => e.Fdmid).HasColumnName("FDMId");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.StartDate).HasPrecision(0);

                entity.Property(e => e.TrainingResult)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Crew)
                    .WithMany(p => p.FdmeventActions)
                    .HasForeignKey(d => d.CrewId)
                    .HasConstraintName("fk_crew");

                entity.HasOne(d => d.Fdm)
                    .WithMany(p => p.FdmeventActions)
                    .HasForeignKey(d => d.Fdmid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_fdm");

                entity.HasOne(d => d.Fdp)
                    .WithMany(p => p.FdmeventActions)
                    .HasForeignKey(d => d.Fdpid)
                    .HasConstraintName("fk_action_fdp");
            });

            modelBuilder.Entity<FdmeventDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMEventDaily");

                entity.Property(e => e.EventName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FlightDate).HasColumnType("date");
            });

            modelBuilder.Entity<FdmeventMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMEventMonthly");

                entity.Property(e => e.EventName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FdmfoDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMFoDaily");

                entity.Property(e => e.Day).HasColumnType("date");

                entity.Property(e => e.P2code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P2Code");

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.P2name)
                    .HasMaxLength(1001)
                    .HasColumnName("P2Name");

                entity.Property(e => e.ScoresPerFlight).HasColumnName("scoresPerFlight");
            });

            modelBuilder.Entity<FdmfoEventDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMFoEventDaily");

                entity.Property(e => e.Day).HasColumnType("date");

                entity.Property(e => e.EventName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.P2code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P2Code");

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.P2name)
                    .HasMaxLength(1001)
                    .HasColumnName("P2Name");
            });

            modelBuilder.Entity<FdmfoEventMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMFoEventMonthly");

                entity.Property(e => e.EventName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.P2code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P2Code");

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.P2name)
                    .HasMaxLength(1001)
                    .HasColumnName("P2Name");
            });

            modelBuilder.Entity<FdmfoMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMFoMonthly");

                entity.Property(e => e.P2code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P2Code");

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.P2name)
                    .HasMaxLength(1001)
                    .HasColumnName("P2Name");

                entity.Property(e => e.ScoresPerFlight).HasColumnName("scoresPerFlight");
            });

            modelBuilder.Entity<FdmphaseMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMPhaseMonthly");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Phase)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FdmphaseRouteDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMPhaseRouteDaily");

                entity.Property(e => e.FlightDate).HasColumnType("date");

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.Phase)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("phase");

                entity.Property(e => e.Rout)
                    .IsRequired()
                    .HasMaxLength(511);

                entity.Property(e => e.ToAirport).HasMaxLength(255);
            });

            modelBuilder.Entity<FdmphaseTypeMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMPhaseTypeMonthly");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Phase)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Severity)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FdmregCptAnnually>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMRegCptAnnually");

                entity.Property(e => e.CptCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CptName)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");
            });

            modelBuilder.Entity<FdmregCptDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMRegCptDaily ");

                entity.Property(e => e.CptCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CptName)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Day).HasColumnType("date");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");
            });

            modelBuilder.Entity<FdmregCptFoAnnully>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMRegCptFoAnnully");

                entity.Property(e => e.P1id).HasColumnName("P1Id");

                entity.Property(e => e.P1name)
                    .HasMaxLength(1001)
                    .HasColumnName("P1Name");

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.P2name)
                    .HasMaxLength(1001)
                    .HasColumnName("P2Name");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");
            });

            modelBuilder.Entity<FdmregCptFoDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMRegCptFoDaily");

                entity.Property(e => e.Day).HasColumnType("date");

                entity.Property(e => e.P1code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P1Code");

                entity.Property(e => e.P1id).HasColumnName("P1Id");

                entity.Property(e => e.P1name)
                    .HasMaxLength(1001)
                    .HasColumnName("P1Name");

                entity.Property(e => e.P2code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P2Code");

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.P2name)
                    .HasMaxLength(1001)
                    .HasColumnName("P2Name");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");
            });

            modelBuilder.Entity<FdmregCptFoMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMRegCptFoMonthly");

                entity.Property(e => e.P1code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P1Code");

                entity.Property(e => e.P1id).HasColumnName("P1Id");

                entity.Property(e => e.P1name)
                    .HasMaxLength(1001)
                    .HasColumnName("P1Name");

                entity.Property(e => e.P2code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P2Code");

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.P2name)
                    .HasMaxLength(1001)
                    .HasColumnName("P2Name");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");
            });

            modelBuilder.Entity<FdmregCptMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMRegCptMonthly");

                entity.Property(e => e.CptCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CptName)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");
            });

            modelBuilder.Entity<FdmregDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMRegDaily");

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");
            });

            modelBuilder.Entity<FdmregEventDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMRegEventDaily");

                entity.Property(e => e.Day).HasColumnType("date");

                entity.Property(e => e.EventName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Register)
                    .HasMaxLength(50)
                    .HasColumnName("register");

                entity.Property(e => e.RegisterId).HasColumnName("registerId");
            });

            modelBuilder.Entity<FdmregEventMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMRegEventMonthly");

                entity.Property(e => e.EventName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Register)
                    .HasMaxLength(50)
                    .HasColumnName("register");

                entity.Property(e => e.RegisterId).HasColumnName("registerId");

                entity.Property(e => e.YearMonthName).HasMaxLength(4000);
            });

            modelBuilder.Entity<FdmregFoDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMRegFoDaily");

                entity.Property(e => e.Day).HasColumnType("date");

                entity.Property(e => e.P2code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P2Code");

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.P2name)
                    .HasMaxLength(1001)
                    .HasColumnName("P2Name");

                entity.Property(e => e.Register).HasMaxLength(50);
            });

            modelBuilder.Entity<FdmregFoMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMRegFoMonthly");

                entity.Property(e => e.P1code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P1Code");

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.P2name)
                    .HasMaxLength(1001)
                    .HasColumnName("P2Name");

                entity.Property(e => e.Register).HasMaxLength(50);
            });

            modelBuilder.Entity<FdmregMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMRegMonthly");

                entity.Property(e => e.Register).HasMaxLength(50);
            });

            modelBuilder.Entity<FdmtypeAnnually>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMTypeAnnually");

                entity.Property(e => e.AircraftType).HasMaxLength(255);
            });

            modelBuilder.Entity<FdmtypeDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMTypeDaily");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.Flightcount).HasColumnName("flightcount");
            });

            modelBuilder.Entity<FdmtypeMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FDMTypeMonthly");

                entity.Property(e => e.AircraftType).HasMaxLength(255);
            });

            modelBuilder.Entity<Fdp>(entity =>
            {
                entity.ToTable("FDP");

                entity.HasIndex(e => e.CrewId, "idx_fdp_crewid");

                entity.Property(e => e.Bl).HasColumnName("BL");

                entity.Property(e => e.CanceledNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CanceledRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Cp).HasColumnName("CP");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FdpreportingTime)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPReportingTime");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.Fx).HasColumnName("FX");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.InitEnd).HasColumnType("datetime");

                entity.Property(e => e.InitFlights)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitFromIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("InitFromIATA");

                entity.Property(e => e.InitGroup)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InitKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRank)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InitRestTo).HasColumnType("datetime");

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitStart).HasColumnType("datetime");

                entity.Property(e => e.InitToIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("InitToIATA");

                entity.Property(e => e.Key)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MaxFdp)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("MaxFDP");

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark2).HasMaxLength(500);

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Upd).HasColumnName("UPD");

                entity.Property(e => e.UserName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.Fdps)
                    .HasForeignKey(d => d.BoxId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_fdp_box");

                entity.HasOne(d => d.Crew)
                    .WithMany(p => p.Fdps)
                    .HasForeignKey(d => d.CrewId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_fdp_employee");

                entity.HasOne(d => d.FdpNavigation)
                    .WithMany(p => p.InverseFdpNavigation)
                    .HasForeignKey(d => d.Fdpid)
                    .HasConstraintName("fk_fdp_fdp");
            });

            modelBuilder.Entity<Fdpextra>(entity =>
            {
                entity.ToTable("FDPExtra");

                entity.HasIndex(e => e.Fdpid, "idx_fpdextra_fdp");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.MaxFdp)
                    .HasColumnType("decimal(10, 5)")
                    .HasColumnName("MaxFDP");

                entity.HasOne(d => d.Fdp)
                    .WithMany(p => p.Fdpextras)
                    .HasForeignKey(d => d.Fdpid)
                    .HasConstraintName("fk_fdpextra_fdp");
            });

            modelBuilder.Entity<Fdpitem>(entity =>
            {
                entity.ToTable("FDPItem");

                entity.HasIndex(e => e.FlightId, "idx_fdpi_f");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.Pickup).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Fdp)
                    .WithMany(p => p.Fdpitems)
                    .HasForeignKey(d => d.Fdpid)
                    .HasConstraintName("fk_fdpitem_fdp");

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.Fdpitems)
                    .HasForeignKey(d => d.FlightId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_fdpitem_flight");
            });

            modelBuilder.Entity<FdpitemRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_FDPItemRank");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Fdplog>(entity =>
            {
                entity.ToTable("FDPLog");

                entity.Property(e => e.Action)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CanceledNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CanceledRoute)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateAction).HasColumnType("datetime");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.InitEnd).HasColumnType("datetime");

                entity.Property(e => e.InitFlights)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitFromIata)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("InitFromIATA");

                entity.Property(e => e.InitKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRank)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRestTo).HasColumnType("datetime");

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitStart).HasColumnType("datetime");

                entity.Property(e => e.InitToIata)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("InitToIATA");

                entity.Property(e => e.UserName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FdpmaxDaily>(entity =>
            {
                entity.ToTable("FDPMaxDaily");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.MaxFdp).HasColumnName("MaxFDP");

                entity.Property(e => e.MaxFdph).HasColumnName("MaxFDPH");
            });

            modelBuilder.Entity<FdpvisibleDate>(entity =>
            {
                entity.ToTable("FDPVisibleDate");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FileType>(entity =>
            {
                entity.ToTable("FileType");

                entity.Property(e => e.FileExtension)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.IconUrl).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<FixTimeRoute>(entity =>
            {
                entity.HasKey(e => e.Route)
                    .HasName("PK__FixTimeR__FF6D13710E491661");

                entity.ToTable("FixTimeRoute");

                entity.Property(e => e.Route)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FixTimeRouteExtra>(entity =>
            {
                entity.ToTable("FixTimeRouteExtra");

                entity.Property(e => e.Route)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FixTimeRouteHistory>(entity =>
            {
                entity.ToTable("FixTimeRouteHistory");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FlighPlanCalendar>(entity =>
            {
                entity.ToTable("FlighPlanCalendar");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.HasOne(d => d.FlightPlan)
                    .WithMany(p => p.FlighPlanCalendars)
                    .HasForeignKey(d => d.FlightPlanId)
                    .HasConstraintName("fp_fpca_fp");
            });

            modelBuilder.Entity<FlightChangeHistory>(entity =>
            {
                entity.ToTable("FlightChangeHistory");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.NewFlightNumber)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NewLanding).HasColumnType("datetime");

                entity.Property(e => e.NewOffBlock).HasColumnType("datetime");

                entity.Property(e => e.NewOnBlock).HasColumnType("datetime");

                entity.Property(e => e.NewSta)
                    .HasColumnType("datetime")
                    .HasColumnName("NewSTA");

                entity.Property(e => e.NewStd)
                    .HasColumnType("datetime")
                    .HasColumnName("NewSTD");

                entity.Property(e => e.NewTakeOff).HasColumnType("datetime");

                entity.Property(e => e.OldFlightNumer)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OldLanding).HasColumnType("datetime");

                entity.Property(e => e.OldOffBlock).HasColumnType("datetime");

                entity.Property(e => e.OldOnBlock).HasColumnType("datetime");

                entity.Property(e => e.OldSta)
                    .HasColumnType("datetime")
                    .HasColumnName("OldSTA");

                entity.Property(e => e.OldStd)
                    .HasColumnType("datetime")
                    .HasColumnName("OldSTD");

                entity.Property(e => e.OldTakeOff).HasColumnType("datetime");

                entity.Property(e => e.User).HasMaxLength(500);
            });

            modelBuilder.Entity<FlightCrew>(entity =>
            {
                entity.ToTable("FlightCrew");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Status).HasComment("Crew Change");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.FlightCrews)
                    .HasForeignKey(d => d.EmployeeId)
                    .HasConstraintName("fk_flightcrew_employee");

                entity.HasOne(d => d.FlightInformation)
                    .WithMany(p => p.FlightCrews)
                    .HasForeignKey(d => d.FlightInformationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FlightCrew_FlightInformation");

                entity.HasOne(d => d.FlightPlanCrew)
                    .WithMany(p => p.FlightCrews)
                    .HasForeignKey(d => d.FlightPlanCrewId)
                    .HasConstraintName("fk_flightcrew_fpc");
            });

            modelBuilder.Entity<FlightCrewArchived>(entity =>
            {
                entity.ToTable("FlightCrewArchived");

                entity.HasIndex(e => e.FlightId, "idx_arc_flightid");

                entity.HasIndex(e => e.Position, "idx_arc_position");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.FlightNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Position)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Route)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FlightCrewChangeHistory>(entity =>
            {
                entity.ToTable("FlightCrewChangeHistory");

                entity.Property(e => e.DateChange).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FlightDatePart>(entity =>
            {
                entity.ToTable("FlightDatePart");

                entity.Property(e => e.DateAfter).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateRef).HasColumnType("datetime");
            });

            modelBuilder.Entity<FlightDelay>(entity =>
            {
                entity.ToTable("FlightDelay");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Hh)
                    .HasColumnName("HH")
                    .HasComment("Hour");

                entity.Property(e => e.Icategory)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Mm)
                    .HasColumnName("MM")
                    .HasComment("Minute");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.HasOne(d => d.DelayCode)
                    .WithMany(p => p.FlightDelays)
                    .HasForeignKey(d => d.DelayCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FlightDelay_G_DelayCode");

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.FlightDelays)
                    .HasForeignKey(d => d.FlightId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FlightDelay_FlightInformation");
            });

            modelBuilder.Entity<FlightGroup>(entity =>
            {
                entity.ToTable("FlightGroup");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.FlightGroups)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_flightgroup_employee");
            });

            modelBuilder.Entity<FlightInformation>(entity =>
            {
                entity.ToTable("_FlightInformation");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.Alt1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT1");

                entity.Property(e => e.Alt2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT2");

                entity.Property(e => e.Alt3)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT3");

                entity.Property(e => e.Alt4)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT4");

                entity.Property(e => e.Alt5)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT5");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.AttAsr).HasColumnName("AttASR");

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CancelRemark).HasMaxLength(500);

                entity.Property(e => e.Cargo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("CARGO");

                entity.Property(e => e.CargoUnitId).HasColumnName("CargoUnitID");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.CommanderNote).HasMaxLength(2000);

                entity.Property(e => e.CpcrewId).HasColumnName("CPCrewId");

                entity.Property(e => e.Cpdh).HasColumnName("CPDH");

                entity.Property(e => e.Cpfdpid).HasColumnName("CPFDPId");

                entity.Property(e => e.CpfdpitemId).HasColumnName("CPFDPItemId");

                entity.Property(e => e.CpflightTypeId).HasColumnName("CPFlightTypeId");

                entity.Property(e => e.Cpinstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPInstructor");

                entity.Property(e => e.Cpisccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPISCCM");

                entity.Property(e => e.Cpp1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP1");

                entity.Property(e => e.Cpp2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP2");

                entity.Property(e => e.CppositionId).HasColumnName("CPPositionId");

                entity.Property(e => e.Cpregister)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPRegister");

                entity.Property(e => e.Cpsccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPSCCM");

                entity.Property(e => e.DateApplied).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightGroupId).HasColumnName("FlightGroupID");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FpflightHh).HasColumnName("FPFlightHH");

                entity.Property(e => e.FpflightMm).HasColumnName("FPFlightMM");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.FptripFuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPTripFuel");

                entity.Property(e => e.FuelActual).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDensity).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelPlanned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.Guid).HasColumnName("GUID");

                entity.Property(e => e.Gwland)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("GWLand");

                entity.Property(e => e.Gwto)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("GWTO");

                entity.Property(e => e.JlapproverId).HasColumnName("JLApproverId");

                entity.Property(e => e.Jlblhh).HasColumnName("JLBLHH");

                entity.Property(e => e.Jlblmm).HasColumnName("JLBLMM");

                entity.Property(e => e.Jldate)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDate");

                entity.Property(e => e.JldateApproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDateApproved");

                entity.Property(e => e.JldatePicapproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDatePICApproved");

                entity.Property(e => e.Jllanding)
                    .HasColumnType("datetime")
                    .HasColumnName("JLLanding");

                entity.Property(e => e.Jlno)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("JLNo");

                entity.Property(e => e.JloffBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("JLOffBlock");

                entity.Property(e => e.JlonBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("JLOnBlock");

                entity.Property(e => e.JlsignedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("JLSignedBy");

                entity.Property(e => e.JltakeOff)
                    .HasColumnType("datetime")
                    .HasColumnName("JLTakeOff");

                entity.Property(e => e.JluserId).HasColumnName("JLUserId");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.Ltr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LTR");

                entity.Property(e => e.Osta)
                    .HasColumnType("datetime")
                    .HasColumnName("OSTA");

                entity.Property(e => e.OtoAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OToAirportIATA");

                entity.Property(e => e.OtoAirportId).HasColumnName("OToAirportId");

                entity.Property(e => e.Pf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PF");

                entity.Property(e => e.Pflr).HasColumnName("PFLR");

                entity.Property(e => e.Pic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PIC");

                entity.Property(e => e.Picid).HasColumnName("PICId");

                entity.Property(e => e.RampDate).HasColumnType("datetime");

                entity.Property(e => e.RampRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RedirectDate).HasColumnType("datetime");

                entity.Property(e => e.RedirectRemark).HasMaxLength(500);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.RvsmFltCpt)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_CPT");

                entity.Property(e => e.RvsmFltFo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_FO");

                entity.Property(e => e.RvsmFltStby)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_STBY");

                entity.Property(e => e.RvsmGndCpt)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_CPT");

                entity.Property(e => e.RvsmGndFo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_FO");

                entity.Property(e => e.RvsmGndStby)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_STBY");

                entity.Property(e => e.SerialNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Sic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SIC");

                entity.Property(e => e.Sicid).HasColumnName("SICId");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.Updnote)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UPDNOTE");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Utcdiff).HasColumnName("UTCDIFF");
            });

            modelBuilder.Entity<FlightInformation1>(entity =>
            {
                entity.ToTable("FlightInformation");

                entity.HasIndex(e => e.FlightPlanId, "idx_flt_fpi");

                entity.HasIndex(e => e.RegisterId, "idx_flt_registerid");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.Alt1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT1");

                entity.Property(e => e.Alt2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT2");

                entity.Property(e => e.Alt3)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT3");

                entity.Property(e => e.Alt4)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT4");

                entity.Property(e => e.Alt5)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT5");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.Atcplan)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("ATCPlan");

                entity.Property(e => e.Atl)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ATL");

                entity.Property(e => e.AttAsr).HasColumnName("AttASR");

                entity.Property(e => e.BlockH).HasComment("Actual Time Hours");

                entity.Property(e => e.BlockM).HasComment("Actual Time Minute");

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CancelRemark).HasMaxLength(500);

                entity.Property(e => e.Cargo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("CARGO");

                entity.Property(e => e.CargoUnitId).HasColumnName("CargoUnitID");

                entity.Property(e => e.Charterer).HasMaxLength(50);

                entity.Property(e => e.ChocksIn)
                    .HasColumnType("datetime")
                    .HasComment("ChocksIn");

                entity.Property(e => e.ChocksOut)
                    .HasColumnType("datetime")
                    .HasComment("ChocksOut");

                entity.Property(e => e.ChrCode).HasMaxLength(300);

                entity.Property(e => e.ChrTitle).HasMaxLength(300);

                entity.Property(e => e.CommanderNote).HasMaxLength(2000);

                entity.Property(e => e.CpcrewId).HasColumnName("CPCrewId");

                entity.Property(e => e.Cpdh).HasColumnName("CPDH");

                entity.Property(e => e.Cpfdpid).HasColumnName("CPFDPId");

                entity.Property(e => e.CpfdpitemId).HasColumnName("CPFDPItemId");

                entity.Property(e => e.CpflightTypeId).HasColumnName("CPFlightTypeId");

                entity.Property(e => e.Cpinstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPInstructor");

                entity.Property(e => e.Cpisccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPISCCM");

                entity.Property(e => e.Cpp1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP1");

                entity.Property(e => e.Cpp2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP2");

                entity.Property(e => e.CppositionId).HasColumnName("CPPositionId");

                entity.Property(e => e.Cpregister)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPRegister");

                entity.Property(e => e.Cpsccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPSCCM");

                entity.Property(e => e.Cpt1).HasColumnName("CPT1");

                entity.Property(e => e.Cpt2).HasColumnName("CPT2");

                entity.Property(e => e.Cpt3).HasColumnName("CPT3");

                entity.Property(e => e.Cpt4).HasColumnName("CPT4");

                entity.Property(e => e.DateApplied).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.Dli)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("DLI");

                entity.Property(e => e.Doi)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("DOI");

                entity.Property(e => e.Dow).HasColumnName("DOW");

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightGroupId).HasColumnName("FlightGroupID");

                entity.Property(e => e.FlightH).HasComment("Flight Time Hours");

                entity.Property(e => e.FlightM).HasComment("Flight Time Minute");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.Fm).HasColumnName("FM");

                entity.Property(e => e.FpflightHh).HasColumnName("FPFlightHH");

                entity.Property(e => e.FpflightMm).HasColumnName("FPFlightMM");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.FptripFuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPTripFuel");

                entity.Property(e => e.Fso).HasColumnName("FSO");

                entity.Property(e => e.FuelActual).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDensity).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelPlanned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.Guid).HasColumnName("GUID");

                entity.Property(e => e.Gwland)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("GWLand")
                    .HasComment("Gross Weight at Landing");

                entity.Property(e => e.Gwto)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("GWTO")
                    .HasComment("Gross Weight at take-off");

                entity.Property(e => e.JlapproverId).HasColumnName("JLApproverId");

                entity.Property(e => e.Jlblhh).HasColumnName("JLBLHH");

                entity.Property(e => e.Jlblmm).HasColumnName("JLBLMM");

                entity.Property(e => e.Jldate)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDate");

                entity.Property(e => e.JldateApproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDateApproved");

                entity.Property(e => e.JldatePicapproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDatePICApproved");

                entity.Property(e => e.Jllanding)
                    .HasColumnType("datetime")
                    .HasColumnName("JLLanding");

                entity.Property(e => e.Jlno)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("JLNo");

                entity.Property(e => e.JloffBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("JLOffBlock");

                entity.Property(e => e.JlonBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("JLOnBlock");

                entity.Property(e => e.JlsignedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("JLSignedBy");

                entity.Property(e => e.JltakeOff)
                    .HasColumnType("datetime")
                    .HasColumnName("JLTakeOff");

                entity.Property(e => e.JluserId).HasColumnName("JLUserId");

                entity.Property(e => e.Landing)
                    .HasColumnType("datetime")
                    .HasComment("Landing");

                entity.Property(e => e.Lilnw)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("LILNW");

                entity.Property(e => e.Litow)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("LITOW");

                entity.Property(e => e.Lizfw)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("LIZFW");

                entity.Property(e => e.Lnw)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("LNW");

                entity.Property(e => e.Ltr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LTR");

                entity.Property(e => e.Maclnw)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("MACLNW");

                entity.Property(e => e.Mactow)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("MACTOW");

                entity.Property(e => e.Maczfw)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("MACZFW");

                entity.Property(e => e.Maxlnw).HasColumnName("MAXLNW");

                entity.Property(e => e.Maxtow).HasColumnName("MAXTOW");

                entity.Property(e => e.Maxzfw).HasColumnName("MAXZFW");

                entity.Property(e => e.Oasec).HasColumnName("OASec");

                entity.Property(e => e.Obsec).HasColumnName("OBSec");

                entity.Property(e => e.Ocsec).HasColumnName("OCSec");

                entity.Property(e => e.Odsec).HasColumnName("ODSec");

                entity.Property(e => e.Osta)
                    .HasColumnType("datetime")
                    .HasColumnName("OSTA");

                entity.Property(e => e.OtoAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OToAirportIATA");

                entity.Property(e => e.OtoAirportId).HasColumnName("OToAirportId");

                entity.Property(e => e.PantryCode).HasMaxLength(1);

                entity.Property(e => e.Pf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PF");

                entity.Property(e => e.Pflr).HasColumnName("PFLR");

                entity.Property(e => e.Pic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PIC");

                entity.Property(e => e.Picid).HasColumnName("PICId");

                entity.Property(e => e.RampDate).HasColumnType("datetime");

                entity.Property(e => e.RampRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RedirectDate).HasColumnType("datetime");

                entity.Property(e => e.RedirectRemark).HasMaxLength(500);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.RvsmFltCpt)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_CPT");

                entity.Property(e => e.RvsmFltFo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_FO");

                entity.Property(e => e.RvsmFltStby)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_STBY");

                entity.Property(e => e.RvsmGndCpt)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_CPT");

                entity.Property(e => e.RvsmGndFo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_FO");

                entity.Property(e => e.RvsmGndStby)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_STBY");

                entity.Property(e => e.SerialNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Sic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SIC");

                entity.Property(e => e.Sicid).HasColumnName("SICId");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA")
                    .HasComment("Standard Time of Arrival");

                entity.Property(e => e.StabTrimFifteen).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.StabTrimFive).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD")
                    .HasComment("Scheduled Time of Departure");

                entity.Property(e => e.Takeoff)
                    .HasColumnType("datetime")
                    .HasComment("Takeoff");

                entity.Property(e => e.Tow)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("TOW");

                entity.Property(e => e.Ttl).HasColumnName("TTL");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.Updnote)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UPDNOTE");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Utcdiff).HasColumnName("UTCDIFF");

                entity.Property(e => e.Zfw)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("ZFW");

                entity.HasOne(d => d.AirlineOperators)
                    .WithMany(p => p.FlightInformation1s)
                    .HasForeignKey(d => d.AirlineOperatorsId)
                    .HasConstraintName("FK_FlightInformation_G_AirlineOperators");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.FlightInformation1s)
                    .HasForeignKey(d => d.BoxId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_flighti_box");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.FlightInformation1s)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("fk_flightinformation_customer");

                entity.HasOne(d => d.FlightGroup)
                    .WithMany(p => p.FlightInformation1s)
                    .HasForeignKey(d => d.FlightGroupId)
                    .HasConstraintName("FK_FlightInformation_FlightGroup");

                entity.HasOne(d => d.FlightPlan)
                    .WithMany(p => p.FlightInformation1s)
                    .HasForeignKey(d => d.FlightPlanId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_flightinformation_fpi");

                entity.HasOne(d => d.FlightStatus)
                    .WithMany(p => p.FlightInformation1s)
                    .HasForeignKey(d => d.FlightStatusId)
                    .HasConstraintName("FK_FlightInformation_FlightStatus");

                entity.HasOne(d => d.FromAirport)
                    .WithMany(p => p.FlightInformation1FromAirports)
                    .HasForeignKey(d => d.FromAirportId)
                    .HasConstraintName("fk_flightinformation_fromairport");

                entity.HasOne(d => d.Register)
                    .WithMany(p => p.FlightInformation1s)
                    .HasForeignKey(d => d.RegisterId)
                    .HasConstraintName("FK_FlightInformation_Ac_MSN");

                entity.HasOne(d => d.ToAirport)
                    .WithMany(p => p.FlightInformation1ToAirports)
                    .HasForeignKey(d => d.ToAirportId)
                    .HasConstraintName("fk_flightinformation_toairport");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.FlightInformation1s)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("FK_FlightInformation_Ac_Type");
            });

            modelBuilder.Entity<FlightLink>(entity =>
            {
                entity.HasKey(e => new { e.Flight1Id, e.Flight2Id })
                    .HasName("PK__FlightLi__919C0265DDC5053B");

                entity.ToTable("FlightLink");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.Flight1)
                    .WithMany(p => p.FlightLinkFlight1s)
                    .HasForeignKey(d => d.Flight1Id)
                    .HasConstraintName("fk_fll_flight1");

                entity.HasOne(d => d.Flight2)
                    .WithMany(p => p.FlightLinkFlight2s)
                    .HasForeignKey(d => d.Flight2Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_fll_flight2");
            });

            modelBuilder.Entity<FlightPermit>(entity =>
            {
                entity.ToTable("FlightPermit");

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<FlightPlan>(entity =>
            {
                entity.ToTable("FlightPlan");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateFirst).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateLast).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.FlightPlans)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_flightplan_customrt");
            });

            modelBuilder.Entity<FlightPlanCalanderCrew>(entity =>
            {
                entity.ToTable("FlightPlanCalanderCrew");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.FlightPlanCalanderCrews)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("fk_crew_box");

                entity.HasOne(d => d.Calander)
                    .WithMany(p => p.FlightPlanCalanderCrews)
                    .HasForeignKey(d => d.CalanderId)
                    .HasConstraintName("fk_crew_cal");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.FlightPlanCalanderCrews)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_crew_employee");

                entity.HasOne(d => d.FlightPlanItem)
                    .WithMany(p => p.FlightPlanCalanderCrews)
                    .HasForeignKey(d => d.FlightPlanItemId)
                    .HasConstraintName("fk_crew_item");
            });

            modelBuilder.Entity<FlightPlanDay>(entity =>
            {
                entity.HasKey(e => new { e.FlightPlanId, e.Day })
                    .HasName("PK__FlightPl__FFEDC54E1E096E66");

                entity.ToTable("FlightPlanDay");

                entity.HasOne(d => d.FlightPlan)
                    .WithMany(p => p.FlightPlanDays)
                    .HasForeignKey(d => d.FlightPlanId)
                    .HasConstraintName("fk_fpd_fp");
            });

            modelBuilder.Entity<FlightPlanGroup>(entity =>
            {
                entity.ToTable("FlightPlanGroup");

                entity.HasOne(d => d.FlightPlan)
                    .WithMany(p => p.FlightPlanGroups)
                    .HasForeignKey(d => d.FlightPlanId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_flightplangroup_flightplan");
            });

            modelBuilder.Entity<FlightPlanItem>(entity =>
            {
                entity.ToTable("FlightPlanItem");

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.DepartureRemark)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNumber).HasMaxLength(255);

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Unknown).HasMaxLength(255);

                entity.HasOne(d => d.AirlineOperators)
                    .WithMany(p => p.FlightPlanItems)
                    .HasForeignKey(d => d.AirlineOperatorsId)
                    .HasConstraintName("fk_fpi_organ");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.FlightPlanItems)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("fk_fpi_box");

                entity.HasOne(d => d.FlightPlan)
                    .WithMany(p => p.FlightPlanItems)
                    .HasForeignKey(d => d.FlightPlanId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_fpi_flightplan");

                entity.HasOne(d => d.FromAirportNavigation)
                    .WithMany(p => p.FlightPlanItemFromAirportNavigations)
                    .HasForeignKey(d => d.FromAirport)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_fpi_airportfrom");

                entity.HasOne(d => d.Register)
                    .WithMany(p => p.FlightPlanItems)
                    .HasForeignKey(d => d.RegisterId)
                    .HasConstraintName("fk_fpi_msn");

                entity.HasOne(d => d.ToAirportNavigation)
                    .WithMany(p => p.FlightPlanItemToAirportNavigations)
                    .HasForeignKey(d => d.ToAirport)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_fpi_airportto");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.FlightPlanItems)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("fk_fpi_actype");
            });

            modelBuilder.Entity<FlightPlanItemPermit>(entity =>
            {
                entity.ToTable("FlightPlanItemPermit");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateFlight).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.HasOne(d => d.FlightPlan)
                    .WithMany(p => p.FlightPlanItemPermits)
                    .HasForeignKey(d => d.FlightPlanId)
                    .HasConstraintName("fk_pip_plani");

                entity.HasOne(d => d.Permit)
                    .WithMany(p => p.FlightPlanItemPermits)
                    .HasForeignKey(d => d.PermitId)
                    .HasConstraintName("fk_pip_permit");
            });

            modelBuilder.Entity<FlightPlanMonth>(entity =>
            {
                entity.HasKey(e => new { e.FlightPlanId, e.Month })
                    .HasName("PK__FlightPl__FC478EA946B7FA1F");

                entity.ToTable("FlightPlanMonth");

                entity.HasOne(d => d.FlightPlan)
                    .WithMany(p => p.FlightPlanMonths)
                    .HasForeignKey(d => d.FlightPlanId)
                    .HasConstraintName("fk_fpm_fp");
            });

            modelBuilder.Entity<FlightPlanRegister>(entity =>
            {
                entity.ToTable("FlightPlanRegister");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateApproved).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.FlightPlan)
                    .WithMany(p => p.FlightPlanRegisters)
                    .HasForeignKey(d => d.FlightPlanId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_fpr_fp");

                entity.HasOne(d => d.PlannedRegister)
                    .WithMany(p => p.FlightPlanRegisterPlannedRegisters)
                    .HasForeignKey(d => d.PlannedRegisterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_fpr_pmsn");

                entity.HasOne(d => d.Register)
                    .WithMany(p => p.FlightPlanRegisterRegisters)
                    .HasForeignKey(d => d.RegisterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_fpr_msn");
            });

            modelBuilder.Entity<FlightPlanStatus>(entity =>
            {
                entity.ToTable("FlightPlanStatus");

                entity.Property(e => e.DateApproved).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.Approver)
                    .WithMany(p => p.FlightPlanStatuses)
                    .HasForeignKey(d => d.ApproverId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_fpa_approver");

                entity.HasOne(d => d.FlighPlan)
                    .WithMany(p => p.FlightPlanStatuses)
                    .HasForeignKey(d => d.FlighPlanId)
                    .HasConstraintName("fk_fpa_fp");
            });

            modelBuilder.Entity<FlightRegisterChangeLog>(entity =>
            {
                entity.ToTable("FlightRegisterChangeLog");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(1000);
            });

            modelBuilder.Entity<FlightRoute>(entity =>
            {
                entity.ToTable("FlightRoute");

                entity.Property(e => e.Equipment)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FlightStatus>(entity =>
            {
                entity.ToTable("FlightStatus");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.BgColor).HasMaxLength(255);

                entity.Property(e => e.Class).HasMaxLength(255);

                entity.Property(e => e.Color).HasMaxLength(255);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FlightStatus1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("FlightStatus");
            });

            modelBuilder.Entity<FlightStatusLog>(entity =>
            {
                entity.ToTable("FlightStatusLog");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.FlightId).HasColumnName("FlightID");

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.Remark).HasMaxLength(50);

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.FlightStatusLogs)
                    .HasForeignKey(d => d.FlightId)
                    .HasConstraintName("FK_FlightStatusLog_FlightInformation");
            });

            modelBuilder.Entity<FlightStatusWeather>(entity =>
            {
                entity.ToTable("FlightStatusWeather");

                entity.Property(e => e.CloudCover).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.DewPoint).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Humidity).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Icon).HasMaxLength(500);

                entity.Property(e => e.Pressure).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Summary).HasMaxLength(1000);

                entity.Property(e => e.Temprature).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Visibility).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.WindBearing).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.WindSpeed).HasColumnType("decimal(10, 4)");

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.FlightStatusWeathers)
                    .HasForeignKey(d => d.FlightId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_fsw_flight");
            });

            modelBuilder.Entity<Fltgroup>(entity =>
            {
                entity.ToTable("FLTGroup");

                entity.Property(e => e.Cdate)
                    .HasColumnType("date")
                    .HasColumnName("CDate");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FltgroupItem>(entity =>
            {
                entity.ToTable("FLTGroupItem");

                entity.Property(e => e.FltgroupId).HasColumnName("FLTGroupId");

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.FltgroupItems)
                    .HasForeignKey(d => d.FlightId)
                    .HasConstraintName("fk_fltgrpitem_flt");

                entity.HasOne(d => d.Fltgroup)
                    .WithMany(p => p.FltgroupItems)
                    .HasForeignKey(d => d.FltgroupId)
                    .HasConstraintName("fk_fltgrpitem_fltgrp");
            });

            modelBuilder.Entity<Fsg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_fsg");

                entity.Property(e => e.Birth).HasColumnType("date");

                entity.Property(e => e.FristName).HasMaxLength(255);

                entity.Property(e => e.Id)
                    .HasMaxLength(255)
                    .HasColumnName("ID");

                entity.Property(e => e.LastName).HasMaxLength(255);

                entity.Property(e => e.N1).HasMaxLength(255);

                entity.Property(e => e.N2).HasMaxLength(255);

                entity.Property(e => e.Post).HasMaxLength(255);
            });

            modelBuilder.Entity<FtlflightTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FTLFlightTime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FdpitemId).HasColumnName("FDPItemId");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");
            });

            modelBuilder.Entity<FtlflightTimeActual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FTLFlightTimeActual");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FdpitemId).HasColumnName("FDPItemId");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");
            });

            modelBuilder.Entity<FtlflightTimeActualDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FTLFlightTimeActualDaily");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");
            });

            modelBuilder.Entity<FtlflightTimeRatioMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FTLFlightTimeRatioMonthly");

                entity.Property(e => e.Cnt).HasColumnName("CNT");

                entity.Property(e => e.Ratio).HasColumnType("numeric(24, 12)");
            });

            modelBuilder.Entity<FtlflightTimeRatioTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FTLFlightTimeRatioTotal");

                entity.Property(e => e.Cnt).HasColumnName("CNT");

                entity.Property(e => e.Ratio).HasColumnType("numeric(24, 12)");
            });

            modelBuilder.Entity<Ftlhistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_FTLHistory");

                entity.Property(e => e.Cdate)
                    .HasColumnType("date")
                    .HasColumnName("CDate");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Ftlsummary>(entity =>
            {
                entity.HasKey(e => new { e.Cdate, e.CrewId })
                    .HasName("PK___FTLSumm__B21FDD89C2F936B0");

                entity.ToTable("_FTLSummary");

                entity.Property(e => e.Cdate)
                    .HasColumnType("date")
                    .HasColumnName("CDate");

                entity.Property(e => e.FlightCyear).HasColumnName("FlightCYear");
            });

            modelBuilder.Entity<Ftlsummary1>(entity =>
            {
                entity.HasKey(e => new { e.Cdate, e.CrewId })
                    .HasName("PK__FTLSumma__B21FDD8962121878");

                entity.ToTable("FTLSummary");

                entity.Property(e => e.Cdate)
                    .HasColumnType("date")
                    .HasColumnName("CDate");

                entity.Property(e => e.FlightCyear).HasColumnName("FlightCYear");

                entity.Property(e => e.FlightCyearOld)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FlightCYearOld");
            });

            modelBuilder.Entity<FuelAvg>(entity =>
            {
                entity.HasKey(e => new { e.FromAirportIata, e.ToAirportIata, e.TypeId })
                    .HasName("PK__FuelAvg__4F09351D82BA0D8E");

                entity.ToTable("FuelAvg");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.AircraftType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AvgfuelBurned)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("AVGFuelBurned");
            });

            modelBuilder.Entity<FuelAvgReg>(entity =>
            {
                entity.HasKey(e => new { e.FromAirportIata, e.ToAirportIata, e.TypeId, e.RegisterId })
                    .HasName("PK__FuelAvgR__52D3CBE42A427708");

                entity.ToTable("FuelAvgReg");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.AircraftType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AvgfuelBurned)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("AVGFuelBurned");

                entity.Property(e => e.Register)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GDelayCode>(entity =>
            {
                entity.ToTable("G_DelayCode");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DelayCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_G_DelayCode_G_DelayCode");
            });

            modelBuilder.Entity<GOpOneDelayType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("G_OpOneDelayType");

                entity.Property(e => e.DelayCodeStartWith)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.PkgOpOneDelayType)
                    .HasColumnName("PKG_OpOneDelayType")
                    .HasDefaultValueSql("(newsequentialid())");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<GrpAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GrpAirport");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");
            });

            modelBuilder.Entity<GrpDelayCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GrpDelayCategory");

                entity.Property(e => e.Icategory)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("ICategory");
            });

            modelBuilder.Entity<GrpFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GrpFlight");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<GrpFlightAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GrpFlightAirport");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<GrpFlightCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GrpFlightCal");

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.TotalPaxAllDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.TotalPaxDiff).HasColumnType("numeric(26, 12)");
            });

            modelBuilder.Entity<GrpFlightDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GrpFlightDaily");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<GrpFlightReg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GrpFlightReg");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");
            });

            modelBuilder.Entity<H2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_h2");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");

                entity.Property(e => e.DatePart).HasColumnType("date");

                entity.Property(e => e.Fdpcount).HasColumnName("FDPCount");
            });

            modelBuilder.Entity<HelperAirportFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperAirportFlight");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");
            });

            modelBuilder.Entity<HelperApplicableCourse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperApplicableCourse");
            });

            modelBuilder.Entity<HelperBook>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperBook");

                entity.Property(e => e.Abstract).HasMaxLength(4000);

                entity.Property(e => e.Category).HasMaxLength(1000);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateExposure).HasColumnType("datetime");

                entity.Property(e => e.DateRelease).HasColumnType("date");

                entity.Property(e => e.Doi)
                    .HasMaxLength(200)
                    .HasColumnName("DOI");

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Isbn)
                    .HasMaxLength(500)
                    .HasColumnName("ISBN");

                entity.Property(e => e.Issnelectronic)
                    .HasMaxLength(200)
                    .HasColumnName("ISSNElectronic");

                entity.Property(e => e.Issnprint)
                    .HasMaxLength(200)
                    .HasColumnName("ISSNPrint");

                entity.Property(e => e.Pages).HasMaxLength(50);

                entity.Property(e => e.Publisher).HasMaxLength(1000);

                entity.Property(e => e.PublisherWebsite).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<HelperBookApplicableEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperBookApplicableEmployee");
            });

            modelBuilder.Entity<HelperBookApplicableEmployeeStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperBookApplicableEmployeeStatus");

                entity.Property(e => e.DateDownload).HasColumnType("datetime");

                entity.Property(e => e.DateVisit).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperBookVisited>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperBookVisited");
            });

            modelBuilder.Entity<HelperBox>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperBox");

                entity.Property(e => e.DefaultEnd).HasColumnType("datetime");

                entity.Property(e => e.DefaultStart).HasColumnType("datetime");

                entity.Property(e => e.DelayedReport).HasColumnType("datetime");

                entity.Property(e => e.MaxFdp).HasColumnName("MaxFDP");

                entity.Property(e => e.MaxFdpbyReportingTime).HasColumnName("MaxFDPByReportingTime");
            });

            modelBuilder.Entity<HelperBoxCrew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperBoxCrew");

                entity.Property(e => e.Date).HasColumnType("date");
            });

            modelBuilder.Entity<HelperBoxCrewTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperBoxCrewTime");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperBoxFlightPlanItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperBoxFlightPlanItem");

                entity.Property(e => e.ItemArrival).HasColumnType("datetime");

                entity.Property(e => e.ItemDeparture).HasColumnType("datetime");

                entity.Property(e => e.PairItemArrival).HasColumnType("datetime");

                entity.Property(e => e.PairItemDeparture).HasColumnType("datetime");

                entity.Property(e => e.SplitDutyExtension).HasColumnType("numeric(12, 1)");

                entity.Property(e => e.Wocl).HasColumnName("WOCL");
            });

            modelBuilder.Entity<HelperBoxSector>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperBoxSector");
            });

            modelBuilder.Entity<HelperBoxTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperBoxTime");

                entity.Property(e => e.ActualArrival).HasColumnType("datetime");

                entity.Property(e => e.ActualDeparture).HasColumnType("datetime");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");
            });

            modelBuilder.Entity<HelperCalanderAssignedRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCalanderAssignedRegister");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<HelperCalendarDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCalendarDate");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");
            });

            modelBuilder.Entity<HelperCertAvsec>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertAVSEC");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertCcrm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertCCRM");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertCmc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertCMC");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertColdwx>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertCOLDWX");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertCrm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertCRM");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertDg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertDG");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertFirstaid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertFIRSTAID");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertHotwx>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertHOTWX");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertLicense>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertLICENSE");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertLINE");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertLpc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertLPC");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertLpr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertLPR");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertMedical>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertMEDICAL");

                entity.Property(e => e.ExpireDate).HasColumnType("date");

                entity.Property(e => e.IssueDate).HasColumnType("date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertOpc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertOPC");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertRecurrent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertRECURRENT");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertSeptp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertSEPTP");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertSeptt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertSEPTT");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertSm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertSMS");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertTre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertTRE");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertTri>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertTRI");

                entity.Property(e => e.ExpireDate).HasColumnType("datetime");

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);
            });

            modelBuilder.Entity<HelperCertificate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCertificate");

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CaoIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.CaoTypeTitle).HasMaxLength(300);

                entity.Property(e => e.CerNumber).HasMaxLength(500);

                entity.Property(e => e.CerUrl).HasMaxLength(255);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.CourseCalendarType).HasMaxLength(1000);

                entity.Property(e => e.CourseCategoryTitle).HasMaxLength(500);

                entity.Property(e => e.CourseDateStart).HasColumnType("date");

                entity.Property(e => e.CourseDepartment).HasMaxLength(500);

                entity.Property(e => e.CourseDuration2).HasMaxLength(1031);

                entity.Property(e => e.CourseDurationUnit).HasMaxLength(1000);

                entity.Property(e => e.CourseInstructor).HasMaxLength(500);

                entity.Property(e => e.CourseLocation).HasMaxLength(500);

                entity.Property(e => e.CourseNo).HasMaxLength(500);

                entity.Property(e => e.CourseOrganization).HasMaxLength(1000);

                entity.Property(e => e.CourseRemark).HasMaxLength(2000);

                entity.Property(e => e.CourseTitle).HasMaxLength(500);

                entity.Property(e => e.CourseTrainingDirector).HasMaxLength(500);

                entity.Property(e => e.CourseTypeTitle).HasMaxLength(500);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateExpire).HasColumnType("date");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.Property(e => e.DateIssueNdt)
                    .HasColumnType("date")
                    .HasColumnName("DateIssueNDT");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.ExpireDate).HasColumnType("date");

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Idno)
                    .HasMaxLength(500)
                    .HasColumnName("IDNo");

                entity.Property(e => e.IntervalNdt).HasColumnName("IntervalNDT");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.NdtintervalCalanderType)
                    .HasMaxLength(1000)
                    .HasColumnName("NDTIntervalCalanderType");

                entity.Property(e => e.NdtintervalCalanderTypeId).HasColumnName("NDTIntervalCalanderTypeId");

                entity.Property(e => e.Ndtnumber)
                    .HasMaxLength(200)
                    .HasColumnName("NDTNumber");

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.StampNumber).HasMaxLength(500);

                entity.Property(e => e.StampUrl).HasMaxLength(500);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HelperCourse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCourse");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<HelperCrewTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCrewTime");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");
            });

            modelBuilder.Entity<HelperCrewTimeSubQuery>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCrewTimeSubQueries");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");

                entity.Property(e => e.CyearFlight).HasColumnName("CYear_Flight");

                entity.Property(e => e.DateStr)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Day14Duty).HasColumnName("Day14_Duty");

                entity.Property(e => e.Day14Flight).HasColumnName("Day14_Flight");

                entity.Property(e => e.Day1Duty).HasColumnName("Day1_Duty");

                entity.Property(e => e.Day1Flight).HasColumnName("Day1_Flight");

                entity.Property(e => e.Day28Duty).HasColumnName("Day28_Duty");

                entity.Property(e => e.Day28Flight).HasColumnName("Day28_Flight");

                entity.Property(e => e.Day7Duty).HasColumnName("Day7_Duty");

                entity.Property(e => e.Day7Flight).HasColumnName("Day7_Flight");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.YearDuty)
                    .HasColumnType("numeric(2, 1)")
                    .HasColumnName("Year_Duty");

                entity.Property(e => e.YearFlight).HasColumnName("Year_Flight");
            });

            modelBuilder.Entity<HelperCurrentLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperCurrentLocation");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FdpitemId).HasColumnName("FDPItemId");

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<HelperDelayAirportDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDelayAirportDaily");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<HelperDelayAirportMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDelayAirportMonthly");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<HelperDelayCatAirportDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDelayCatAirportDaily");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Icategory)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<HelperDelayCatAirportMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDelayCatAirportMonthly");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Icategory)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.IcategoryId).HasColumnName("ICategoryId");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<HelperDelayCatDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDelayCatDaily");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Icategory)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<HelperDelayCatMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDelayCatMonthly");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Icategory)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<HelperDelayCatRegisterDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDelayCatRegisterDaily");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Icategory)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");
            });

            modelBuilder.Entity<HelperDelayCatRegisterMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDelayCatRegisterMonthly");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Icategory)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");
            });

            modelBuilder.Entity<HelperDelayDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDelayDaily");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.AtotalPax).HasColumnName("ATotalPax");

                entity.Property(e => e.AtotalPaxAll).HasColumnName("ATotalPaxAll");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedPaxPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<HelperDelayMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDelayMonthly");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.AtotalPax).HasColumnName("ATotalPax");

                entity.Property(e => e.AtotalPaxAll).HasColumnName("ATotalPaxAll");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedPaxPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.OnTimeFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<HelperDutyCalendar>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDutyCalendar");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");

                entity.Property(e => e.DateEndActual).HasColumnType("datetime");

                entity.Property(e => e.DateEndActualLocal).HasColumnType("datetime");

                entity.Property(e => e.DatePart).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<HelperDutyStart>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperDutyStart");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperEmployee");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HelperEmployeeName>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperEmployeeName");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.UserId).HasMaxLength(128);
            });

            modelBuilder.Entity<HelperFdp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFDP");

                entity.Property(e => e.ActypeId).HasColumnName("ACTypeId");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.Fdpend)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPEnd");

                entity.Property(e => e.FdpreductionByStandBy).HasColumnName("FDPReductionByStandBy");

                entity.Property(e => e.Fdpstart)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPStart");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.MaxFdp).HasColumnName("MaxFDP");

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.ReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.StandByStart).HasColumnType("datetime");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.ToAirport).HasMaxLength(255);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<HelperFdpItemForDutyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFdpItemForDutyCal");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");
            });

            modelBuilder.Entity<HelperFdpbox>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFDPBox");

                entity.Property(e => e.ActypeId).HasColumnName("ACTypeId");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.LastFlightStatusId).HasColumnName("LastFlightStatusID");

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.ReportingTimeLcl)
                    .HasColumnType("datetime")
                    .HasColumnName("ReportingTimeLCL");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<HelperFdpdate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFDPDates");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");
            });

            modelBuilder.Entity<HelperFdpfirst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFDPFirst");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperFdpitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFDPItem");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Pickup).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HelperFdpitemNodh>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFDPItemNODH");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.Pickup).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HelperFdpitemSex>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFDPItemSex");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.Sex).HasMaxLength(1000);
            });

            modelBuilder.Entity<HelperFdpranked>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFDPRanked");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperFdprest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFDPRest");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestFromLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperFdptemplateMferror>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFDPTemplateMFError");
            });

            modelBuilder.Entity<HelperFixTimeRoute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFixTimeRoute");

                entity.Property(e => e.Route)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HelperFlightCrewMatchingList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFlightCrewMatchingList");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");
            });

            modelBuilder.Entity<HelperFlightCrewSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFlightCrewSum");
            });

            modelBuilder.Entity<HelperFlightLink>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFlightLink");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(500);
            });

            modelBuilder.Entity<HelperFlightMovement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFlightMovement");

                entity.Property(e => e.ActualArrival).HasColumnType("datetime");

                entity.Property(e => e.ActualDeparture).HasColumnType("datetime");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");
            });

            modelBuilder.Entity<HelperFlightPlanItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFlightPlanItem");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<HelperFlightPlanItemCrew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFlightPlanItemCrew");
            });

            modelBuilder.Entity<HelperFlightPlanRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFlightPlanRegister");

                entity.Property(e => e.Flightplanid).HasColumnName("flightplanid");

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");
            });

            modelBuilder.Entity<HelperFlightPlanRegisterAssigned>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFlightPlanRegisterAssigned");

                entity.Property(e => e.Flightplanid).HasColumnName("flightplanid");

                entity.Property(e => e.MaxDateTo).HasColumnType("datetime");

                entity.Property(e => e.MinDateFrom).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperFlightPlanType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFlightPlanType");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<HelperFlightSexSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFlightSexSum");

                entity.Property(e => e.Sex).HasMaxLength(1000);
            });

            modelBuilder.Entity<HelperFuelAvg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFuelAVG");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.AvgfuelBurned)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("AVGFuelBurned");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<HelperFuelAvgReg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFuelAvgReg");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.AvgfuelBurned)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("AVGFuelBurned");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<HelperFuelMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperFuelMonthly");

                entity.Property(e => e.DistanceKm).HasColumnName("DistanceKM");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(38, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.FpfuelKilo)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("FPFuelKilo");

                entity.Property(e => e.FpfuelPerDistance).HasColumnName("FPFuelPerDistance");

                entity.Property(e => e.FpfuelPerLeg)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("FPFuelPerLeg");

                entity.Property(e => e.FpfuelPerPax)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("FPFuelPerPax");

                entity.Property(e => e.FpfuelPerWeight)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("FPFuelPerWeight");

                entity.Property(e => e.FpfuelPerWeightDistanceToneKm).HasColumnName("FPFuelPerWeightDistanceToneKM");

                entity.Property(e => e.FpfuelPerWeightTone)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("FPFuelPerWeightTone");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerDistanceKm).HasColumnName("UpliftPerDistanceKM");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeightDistanceKm).HasColumnName("UpliftPerWeightDistanceKM");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerDistanceKm).HasColumnName("UsedPerDistanceKM");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightDistanceKm).HasColumnName("UsedPerWeightDistanceKM");

                entity.Property(e => e.UsedPerWeightDistanceToneKm).HasColumnName("UsedPerWeightDistanceToneKM");

                entity.Property(e => e.UsedPerWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightDistanceToneKm).HasColumnName("WeightDistanceToneKM");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<HelperGrpFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperGrpFlight");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<HelperIdeaUnique>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperIdeaUnique");

                entity.Property(e => e.ClassId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ClassID");

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CourseType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CrewNid)
                    .HasMaxLength(500)
                    .HasColumnName("CrewNID");

                entity.Property(e => e.CrewPid)
                    .HasMaxLength(500)
                    .HasColumnName("CrewPID");

                entity.Property(e => e.DateBegin).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateExpire).HasColumnType("datetime");

                entity.Property(e => e.FirstName).HasMaxLength(500);

                entity.Property(e => e.IdeaId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(1003);

                entity.Property(e => e.Nid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NID");

                entity.Property(e => e.Pid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PID");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HelperMatchingList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperMatchingList");

                entity.Property(e => e.Rn).HasColumnName("RN");
            });

            modelBuilder.Entity<HelperMaxFdp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperMaxFDP");

                entity.Property(e => e.FdpreductionByStandBy).HasColumnName("FDPReductionByStandBy");

                entity.Property(e => e.MaxFdp).HasColumnName("MaxFDP");

                entity.Property(e => e.MaxFdpextended).HasColumnName("MaxFDPExtended");
            });

            modelBuilder.Entity<HelperMsn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperMSN");

                entity.Property(e => e.AcModelId).HasColumnName("AC_ModelID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MaxWeighUnit)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.MaxWeightLnd).HasColumnName("MaxWeightLND");

                entity.Property(e => e.MaxWeightTo).HasColumnName("MaxWeightTO");

                entity.Property(e => e.Msn).HasColumnName("MSN");

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Type).HasMaxLength(255);
            });

            modelBuilder.Entity<HelperPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperPerson");

                entity.Property(e => e.DateExpireNdt)
                    .HasColumnType("date")
                    .HasColumnName("DateExpireNDT");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.RemainAc).HasColumnName("RemainAC");

                entity.Property(e => e.RemainAnnex).HasColumnName("RemainANNEX");

                entity.Property(e => e.RemainAsd).HasColumnName("RemainASD");

                entity.Property(e => e.RemainAsf).HasColumnName("RemainASF");

                entity.Property(e => e.RemainCao).HasColumnName("RemainCAO");

                entity.Property(e => e.RemainCc).HasColumnName("RemainCC");

                entity.Property(e => e.RemainCcrm).HasColumnName("RemainCCRM");

                entity.Property(e => e.RemainCmc).HasColumnName("RemainCMC");

                entity.Property(e => e.RemainCre).HasColumnName("RemainCRE");

                entity.Property(e => e.RemainCri).HasColumnName("RemainCRI");

                entity.Property(e => e.RemainCrm).HasColumnName("RemainCRM");

                entity.Property(e => e.RemainDg).HasColumnName("RemainDG");

                entity.Property(e => e.RemainDrm).HasColumnName("RemainDRM");

                entity.Property(e => e.RemainEgpws).HasColumnName("RemainEGPWS");

                entity.Property(e => e.RemainErp).HasColumnName("RemainERP");

                entity.Property(e => e.RemainFmtd).HasColumnName("RemainFMTD");

                entity.Property(e => e.RemainGom).HasColumnName("RemainGOM");

                entity.Property(e => e.RemainHf).HasColumnName("RemainHF");

                entity.Property(e => e.RemainIre).HasColumnName("RemainIRE");

                entity.Property(e => e.RemainIri).HasColumnName("RemainIRI");

                entity.Property(e => e.RemainLicenceIr).HasColumnName("RemainLicenceIR");

                entity.Property(e => e.RemainLpcc1).HasColumnName("RemainLPCC1");

                entity.Property(e => e.RemainLpcc2).HasColumnName("RemainLPCC2");

                entity.Property(e => e.RemainLpcc3).HasColumnName("RemainLPCC3");

                entity.Property(e => e.RemainLpr).HasColumnName("RemainLPR");

                entity.Property(e => e.RemainLrc).HasColumnName("RemainLRC");

                entity.Property(e => e.RemainMb).HasColumnName("RemainMB");

                entity.Property(e => e.RemainMel).HasColumnName("RemainMEL");

                entity.Property(e => e.RemainMet).HasColumnName("RemainMET");

                entity.Property(e => e.RemainNdt).HasColumnName("RemainNDT");

                entity.Property(e => e.RemainOma1).HasColumnName("RemainOMA1");

                entity.Property(e => e.RemainOma2).HasColumnName("RemainOMA2");

                entity.Property(e => e.RemainOma3).HasColumnName("RemainOMA3");

                entity.Property(e => e.RemainOmb1).HasColumnName("RemainOMB1");

                entity.Property(e => e.RemainOmb2).HasColumnName("RemainOMB2");

                entity.Property(e => e.RemainOmb3).HasColumnName("RemainOMB3");

                entity.Property(e => e.RemainOmc1).HasColumnName("RemainOMC1");

                entity.Property(e => e.RemainOmc2).HasColumnName("RemainOMC2");

                entity.Property(e => e.RemainOmc3).HasColumnName("RemainOMC3");

                entity.Property(e => e.RemainOpcc1).HasColumnName("RemainOPCC1");

                entity.Property(e => e.RemainOpcc2).HasColumnName("RemainOPCC2");

                entity.Property(e => e.RemainOpcc3).HasColumnName("RemainOPCC3");

                entity.Property(e => e.RemainPer).HasColumnName("RemainPER");

                entity.Property(e => e.RemainProficiencyOpc).HasColumnName("RemainProficiencyOPC");

                entity.Property(e => e.RemainPs).HasColumnName("RemainPS");

                entity.Property(e => e.RemainRsp).HasColumnName("RemainRSP");

                entity.Property(e => e.RemainSept).HasColumnName("RemainSEPT");

                entity.Property(e => e.RemainSeptp).HasColumnName("RemainSEPTP");

                entity.Property(e => e.RemainSfe).HasColumnName("RemainSFE");

                entity.Property(e => e.RemainSfe2).HasColumnName("RemainSFE2");

                entity.Property(e => e.RemainSfi).HasColumnName("RemainSFI");

                entity.Property(e => e.RemainSfi2).HasColumnName("RemainSFI2");

                entity.Property(e => e.RemainSms).HasColumnName("RemainSMS");

                entity.Property(e => e.RemainSop).HasColumnName("RemainSOP");

                entity.Property(e => e.RemainTre).HasColumnName("RemainTRE");

                entity.Property(e => e.RemainTre2).HasColumnName("RemainTRE2");

                entity.Property(e => e.RemainTri).HasColumnName("RemainTRI");

                entity.Property(e => e.RemainTri2).HasColumnName("RemainTRI2");

                entity.Property(e => e.RemainTypeMd).HasColumnName("RemainTypeMD");

                entity.Property(e => e.RemainUprt).HasColumnName("RemainUPRT");
            });

            modelBuilder.Entity<HelperPersonModified>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperPersonModified");

                entity.Property(e => e.DateExpireNdt)
                    .HasColumnType("date")
                    .HasColumnName("DateExpireNDT");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.RemainAc).HasColumnName("RemainAC");

                entity.Property(e => e.RemainAnnex).HasColumnName("RemainANNEX");

                entity.Property(e => e.RemainAsd).HasColumnName("RemainASD");

                entity.Property(e => e.RemainAsf).HasColumnName("RemainASF");

                entity.Property(e => e.RemainCao).HasColumnName("RemainCAO");

                entity.Property(e => e.RemainCc).HasColumnName("RemainCC");

                entity.Property(e => e.RemainCcrm).HasColumnName("RemainCCRM");

                entity.Property(e => e.RemainCmc).HasColumnName("RemainCMC");

                entity.Property(e => e.RemainCre).HasColumnName("RemainCRE");

                entity.Property(e => e.RemainCri).HasColumnName("RemainCRI");

                entity.Property(e => e.RemainCrm).HasColumnName("RemainCRM");

                entity.Property(e => e.RemainDg).HasColumnName("RemainDG");

                entity.Property(e => e.RemainDrm).HasColumnName("RemainDRM");

                entity.Property(e => e.RemainEgpws).HasColumnName("RemainEGPWS");

                entity.Property(e => e.RemainErp).HasColumnName("RemainERP");

                entity.Property(e => e.RemainFmtd).HasColumnName("RemainFMTD");

                entity.Property(e => e.RemainGom).HasColumnName("RemainGOM");

                entity.Property(e => e.RemainHf).HasColumnName("RemainHF");

                entity.Property(e => e.RemainIre).HasColumnName("RemainIRE");

                entity.Property(e => e.RemainIri).HasColumnName("RemainIRI");

                entity.Property(e => e.RemainLicenceIr).HasColumnName("RemainLicenceIR");

                entity.Property(e => e.RemainLpcc1).HasColumnName("RemainLPCC1");

                entity.Property(e => e.RemainLpcc2).HasColumnName("RemainLPCC2");

                entity.Property(e => e.RemainLpcc3).HasColumnName("RemainLPCC3");

                entity.Property(e => e.RemainLpr).HasColumnName("RemainLPR");

                entity.Property(e => e.RemainLrc).HasColumnName("RemainLRC");

                entity.Property(e => e.RemainMb).HasColumnName("RemainMB");

                entity.Property(e => e.RemainMel).HasColumnName("RemainMEL");

                entity.Property(e => e.RemainMet).HasColumnName("RemainMET");

                entity.Property(e => e.RemainNdt).HasColumnName("RemainNDT");

                entity.Property(e => e.RemainOma1).HasColumnName("RemainOMA1");

                entity.Property(e => e.RemainOma2).HasColumnName("RemainOMA2");

                entity.Property(e => e.RemainOma3).HasColumnName("RemainOMA3");

                entity.Property(e => e.RemainOmb1).HasColumnName("RemainOMB1");

                entity.Property(e => e.RemainOmb2).HasColumnName("RemainOMB2");

                entity.Property(e => e.RemainOmb3).HasColumnName("RemainOMB3");

                entity.Property(e => e.RemainOmc1).HasColumnName("RemainOMC1");

                entity.Property(e => e.RemainOmc2).HasColumnName("RemainOMC2");

                entity.Property(e => e.RemainOmc3).HasColumnName("RemainOMC3");

                entity.Property(e => e.RemainOpcc1).HasColumnName("RemainOPCC1");

                entity.Property(e => e.RemainOpcc2).HasColumnName("RemainOPCC2");

                entity.Property(e => e.RemainOpcc3).HasColumnName("RemainOPCC3");

                entity.Property(e => e.RemainPer).HasColumnName("RemainPER");

                entity.Property(e => e.RemainProficiencyOpc).HasColumnName("RemainProficiencyOPC");

                entity.Property(e => e.RemainPs).HasColumnName("RemainPS");

                entity.Property(e => e.RemainRsp).HasColumnName("RemainRSP");

                entity.Property(e => e.RemainSept).HasColumnName("RemainSEPT");

                entity.Property(e => e.RemainSeptp).HasColumnName("RemainSEPTP");

                entity.Property(e => e.RemainSfe).HasColumnName("RemainSFE");

                entity.Property(e => e.RemainSfe2).HasColumnName("RemainSFE2");

                entity.Property(e => e.RemainSfi).HasColumnName("RemainSFI");

                entity.Property(e => e.RemainSfi2).HasColumnName("RemainSFI2");

                entity.Property(e => e.RemainSms).HasColumnName("RemainSMS");

                entity.Property(e => e.RemainSop).HasColumnName("RemainSOP");

                entity.Property(e => e.RemainTre).HasColumnName("RemainTRE");

                entity.Property(e => e.RemainTre2).HasColumnName("RemainTRE2");

                entity.Property(e => e.RemainTri).HasColumnName("RemainTRI");

                entity.Property(e => e.RemainTri2).HasColumnName("RemainTRI2");

                entity.Property(e => e.RemainTypeMd).HasColumnName("RemainTypeMD");

                entity.Property(e => e.RemainUprt).HasColumnName("RemainUPRT");
            });

            modelBuilder.Entity<HelperRealMsn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperRealMSN");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");
            });

            modelBuilder.Entity<HelperRestPeriod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperRestPeriod");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestFromLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelperUsedAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelperUsedAirport");

                entity.Property(e => e.Airport).HasMaxLength(255);
            });

            modelBuilder.Entity<Idea>(entity =>
            {
                entity.ToTable("Idea");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.BeginDate).HasMaxLength(255);

                entity.Property(e => e.City).HasMaxLength(255);

                entity.Property(e => e.ClassId)
                    .HasMaxLength(255)
                    .HasColumnName("ClassID");

                entity.Property(e => e.CourseCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CourseTitle).HasMaxLength(255);

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateExpire).HasColumnType("date");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasMaxLength(255);

                entity.Property(e => e.Expire)
                    .HasMaxLength(255)
                    .HasColumnName("expire");

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.Instructor)
                    .HasMaxLength(255)
                    .HasColumnName("instructor");

                entity.Property(e => e.Issue)
                    .HasMaxLength(255)
                    .HasColumnName("issue");

                entity.Property(e => e.LastName).HasMaxLength(255);

                entity.Property(e => e.Location).HasMaxLength(255);

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("NID");

                entity.Property(e => e.Pid)
                    .HasMaxLength(255)
                    .HasColumnName("PID");
            });

            modelBuilder.Entity<IdeaAll>(entity =>
            {
                entity.ToTable("IdeaAll");

                entity.Property(e => e.ClassId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ClassID");

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DateBegin).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateExpire).HasColumnType("datetime");

                entity.Property(e => e.IdeaId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Nid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NID");

                entity.Property(e => e.OriginalStr)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Pid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PID");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IdeaSession>(entity =>
            {
                entity.ToTable("IdeaSession");

                entity.Property(e => e.ClassId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ClassID");

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateBegin).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.IdeaId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nid)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NID");

                entity.Property(e => e.Pid)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PID");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SessionsStr)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IdeaSessionItem>(entity =>
            {
                entity.ToTable("IdeaSessionItem");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromUtc).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToUtc).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.HasOne(d => d.Fdp)
                    .WithMany(p => p.IdeaSessionItems)
                    .HasForeignKey(d => d.Fdpid)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_sesitem_fdp");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.IdeaSessionItems)
                    .HasForeignKey(d => d.SessionId)
                    .HasConstraintName("fk_sesitem_ses");
            });

            modelBuilder.Entity<IdeaSessionItemTemp>(entity =>
            {
                entity.ToTable("IdeaSessionItemTemp");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromUtc).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToUtc).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.IdeaSessionItemTemps)
                    .HasForeignKey(d => d.SessionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_sessitem_sesstemp");
            });

            modelBuilder.Entity<IdeaSessionTemp>(entity =>
            {
                entity.ToTable("IdeaSessionTemp");

                entity.Property(e => e.ClassId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ClassID");

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateBegin).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.IdeaId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nid)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NID");

                entity.Property(e => e.Pid)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PID");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SessionsStr)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IdeaSessionUpdateError>(entity =>
            {
                entity.ToTable("IdeaSessionUpdateError");

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.Flights)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.Route)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SessionDateFrom).HasColumnType("datetime");

                entity.Property(e => e.SessionDateTo).HasColumnType("datetime");

                entity.Property(e => e.VisitDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<IdeaUnique>(entity =>
            {
                entity.ToTable("IdeaUnique");

                entity.Property(e => e.ClassId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ClassID");

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DateBegin).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateExpire).HasColumnType("datetime");

                entity.Property(e => e.IdeaId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Nid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NID");

                entity.Property(e => e.OriginalStr)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Pid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PID");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ideapeople2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IDEAPEOPLE2");

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.LastName).HasMaxLength(255);

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.Nid)
                    .HasMaxLength(255)
                    .HasColumnName("NID");
            });

            modelBuilder.Entity<Ideaperson>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IDEAPEOPLE");

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.LastName).HasMaxLength(255);

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.Nid)
                    .HasMaxLength(255)
                    .HasColumnName("NID");

                entity.Property(e => e.Pid)
                    .HasMaxLength(255)
                    .HasColumnName("PID");
            });

            modelBuilder.Entity<Import2020>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IMPORT2020");

                entity.Property(e => e.Adult)
                    .HasMaxLength(255)
                    .HasColumnName("ADULT");

                entity.Property(e => e.Bag)
                    .HasMaxLength(255)
                    .HasColumnName("BAG");

                entity.Property(e => e.Cargo)
                    .HasMaxLength(255)
                    .HasColumnName("CARGO");

                entity.Property(e => e.Child)
                    .HasMaxLength(255)
                    .HasColumnName("CHILD");

                entity.Property(e => e.Date)
                    .HasMaxLength(255)
                    .HasColumnName("DATE");

                entity.Property(e => e.Flightno)
                    .HasMaxLength(255)
                    .HasColumnName("FLIGHTNO");

                entity.Property(e => e.From)
                    .HasMaxLength(255)
                    .HasColumnName("FROM");

                entity.Property(e => e.Fromid).HasColumnName("FROMID");

                entity.Property(e => e.Infant)
                    .HasMaxLength(255)
                    .HasColumnName("INFANT");

                entity.Property(e => e.Landing)
                    .HasMaxLength(255)
                    .HasColumnName("LANDING");

                entity.Property(e => e.Offblock)
                    .HasMaxLength(255)
                    .HasColumnName("OFFBLOCK");

                entity.Property(e => e.Onblock)
                    .HasMaxLength(255)
                    .HasColumnName("ONBLOCK");

                entity.Property(e => e.Register)
                    .HasMaxLength(255)
                    .HasColumnName("REGISTER");

                entity.Property(e => e.Registerid).HasColumnName("REGISTERID");

                entity.Property(e => e.Sta)
                    .HasMaxLength(255)
                    .HasColumnName("STA");

                entity.Property(e => e.Status)
                    .HasMaxLength(255)
                    .HasColumnName("STATUS");

                entity.Property(e => e.Statusid).HasColumnName("STATUSID");

                entity.Property(e => e.Std)
                    .HasMaxLength(255)
                    .HasColumnName("STD");

                entity.Property(e => e.Takeoff)
                    .HasMaxLength(255)
                    .HasColumnName("TAKEOFF");

                entity.Property(e => e.To)
                    .HasMaxLength(255)
                    .HasColumnName("TO");

                entity.Property(e => e.Toid).HasColumnName("TOID");

                entity.Property(e => e.Total)
                    .HasMaxLength(255)
                    .HasColumnName("TOTAL");

                entity.Property(e => e.Uplift)
                    .HasMaxLength(255)
                    .HasColumnName("UPLIFT");

                entity.Property(e => e.Used)
                    .HasMaxLength(255)
                    .HasColumnName("USED");
            });

            modelBuilder.Entity<ImportPlan>(entity =>
            {
                entity.HasKey(e => new { e.Date, e.Base, e.Reg, e.No, e.From, e.To })
                    .HasName("PK__ImportPl__AE719FA8E7193C53")
                    .IsClustered(false);

                entity.ToTable("ImportPlan");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Base).HasMaxLength(255);

                entity.Property(e => e.Reg).HasMaxLength(255);

                entity.Property(e => e.No).HasMaxLength(255);

                entity.Property(e => e.From).HasMaxLength(255);

                entity.Property(e => e.To).HasMaxLength(255);

                entity.Property(e => e.Duration).HasMaxLength(255);

                entity.Property(e => e.Line).HasMaxLength(255);

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Type).HasMaxLength(255);
            });

            modelBuilder.Entity<Index>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_index");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("sta");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("std");
            });

            modelBuilder.Entity<Ipaccess>(entity =>
            {
                entity.ToTable("IPAccess");

                entity.Property(e => e.Ip)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IP");

                entity.Property(e => e.UserId)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<JobGroup>(entity =>
            {
                entity.ToTable("JobGroup");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FullCode)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FullCode2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_JOBGROUP_PARENT");
            });

            modelBuilder.Entity<Journal>(entity =>
            {
                entity.ToTable("Journal");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Title).HasMaxLength(1000);

                entity.Property(e => e.Website).HasMaxLength(500);
            });

            modelBuilder.Entity<Journals2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("journals2");

                entity.Property(e => e.Done).HasColumnName("done");

                entity.Property(e => e.Title).HasMaxLength(2000);

                entity.Property(e => e.Title2).HasMaxLength(500);
            });

            modelBuilder.Entity<LibraryFolder>(entity =>
            {
                entity.ToTable("LibraryFolder");

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FullCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LicenseResultBasic>(entity =>
            {
                entity.ToTable("LicenseResultBasic");

                entity.Property(e => e.Result).HasMaxLength(200);
            });

            modelBuilder.Entity<Location>(entity =>
            {
                entity.ToTable("Location");

                entity.Property(e => e.Address)
                    .HasMaxLength(2000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Code)
                    .HasMaxLength(100)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.FullCode)
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(200)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Website)
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Locations)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LOCATION_CUSTOMER");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_LOCATION_LOCATION");

                entity.HasOne(d => d.RootLocationNavigation)
                    .WithMany(p => p.InverseRootLocationNavigation)
                    .HasForeignKey(d => d.RootLocation)
                    .HasConstraintName("FK_LOCATION_ROOT");
            });

            modelBuilder.Entity<LogProp>(entity =>
            {
                entity.ToTable("LogProp");

                entity.Property(e => e.DateUpdate).HasColumnType("datetime");

                entity.Property(e => e.DateUpdateLocal).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PropName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PropValue)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.PropValueOld)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.User)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LoginInfo>(entity =>
            {
                entity.ToTable("LoginInfo");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.Info).IsUnicode(false);

                entity.Property(e => e.Ip)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("IP");

                entity.Property(e => e.LocationCity)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.User)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MainType>(entity =>
            {
                entity.ToTable("MainType");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MapDelayRemark>(entity =>
            {
                entity.ToTable("MapDelayRemark");

                entity.Property(e => e.DelayRemark).HasMaxLength(1000);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.Property(e => e.Title2).HasMaxLength(500);
            });

            modelBuilder.Entity<MatchingList>(entity =>
            {
                entity.ToTable("MatchingList");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");
            });

            modelBuilder.Entity<MigrationHistory>(entity =>
            {
                entity.HasKey(e => new { e.MigrationId, e.ContextKey })
                    .HasName("PK_dbo.__MigrationHistory");

                entity.ToTable("__MigrationHistory");

                entity.Property(e => e.MigrationId).HasMaxLength(150);

                entity.Property(e => e.ContextKey).HasMaxLength(300);

                entity.Property(e => e.Model).IsRequired();

                entity.Property(e => e.ProductVersion)
                    .IsRequired()
                    .HasMaxLength(32);
            });

            modelBuilder.Entity<MonthGp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MonthGP");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<MonthGpg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MonthGPG");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.YearMonthName).HasMaxLength(4000);
            });

            modelBuilder.Entity<Mv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MV");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");
            });

            modelBuilder.Entity<Mvt>(entity =>
            {
                entity.ToTable("MVT");

                entity.Property(e => e.Bag)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cpt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CPT");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.Dl)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("DL");

                entity.Property(e => e.Eta)
                    .HasColumnType("datetime")
                    .HasColumnName("ETA");

                entity.Property(e => e.FlightNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FromIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FromIATA");

                entity.Property(e => e.Message)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OffBlock).HasColumnType("datetime");

                entity.Property(e => e.OnBlock).HasColumnType("datetime");

                entity.Property(e => e.Pax)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Register)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SendFrom)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SendTo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.ToIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ToIATA");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.Mvts)
                    .HasForeignKey(d => d.FlightId)
                    .HasConstraintName("fk_mvt_flight");
            });

            modelBuilder.Entity<Mvtapi>(entity =>
            {
                entity.ToTable("MVTAPI");

                entity.Property(e => e.Bag)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Cpt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CPT");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.Dl)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("DL");

                entity.Property(e => e.Eta)
                    .HasColumnType("datetime")
                    .HasColumnName("ETA");

                entity.Property(e => e.FlightNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FromIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FromIATA");

                entity.Property(e => e.Message)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OffBlock).HasColumnType("datetime");

                entity.Property(e => e.OnBlock).HasColumnType("datetime");

                entity.Property(e => e.Pax)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Register)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SendFrom)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SendTo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.ToIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ToIATA");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.Mvtapis)
                    .HasForeignKey(d => d.FlightId)
                    .HasConstraintName("fk_mvtapi_flight");
            });

            modelBuilder.Entity<Nbl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NBL");

                entity.Property(e => e.Des)
                    .HasMaxLength(255)
                    .HasColumnName("DES");

                entity.Property(e => e.Desid).HasColumnName("DESID");

                entity.Property(e => e.Flt)
                    .HasMaxLength(255)
                    .HasColumnName("FLT");

                entity.Property(e => e.Flt2)
                    .HasMaxLength(255)
                    .HasColumnName("FLT2");

                entity.Property(e => e.Hh).HasColumnName("HH");

                entity.Property(e => e.Mm).HasColumnName("MM");

                entity.Property(e => e.Org)
                    .HasMaxLength(255)
                    .HasColumnName("ORG");

                entity.Property(e => e.Orgid).HasColumnName("ORGID");
            });

            modelBuilder.Entity<Newbl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("newbl");

                entity.Property(e => e.Des)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DES");

                entity.Property(e => e.Desid).HasColumnName("DESID");

                entity.Property(e => e.Hh).HasColumnName("HH");

                entity.Property(e => e.Mm).HasColumnName("MM");

                entity.Property(e => e.Org)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ORG");

                entity.Property(e => e.Orgid).HasColumnName("ORGID");
            });

            modelBuilder.Entity<NiraHistory>(entity =>
            {
                entity.ToTable("NiraHistory");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.Chtime)
                    .HasMaxLength(1000)
                    .HasColumnName("CHTIME");

                entity.Property(e => e.DateReplied).HasColumnType("datetime");

                entity.Property(e => e.DateSend).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.Flight)
                    .HasMaxLength(1000)
                    .HasColumnName("FLIGHT");

                entity.Property(e => e.Newaircraft)
                    .HasMaxLength(1000)
                    .HasColumnName("NEWAIRCRAFT");

                entity.Property(e => e.Newstatus)
                    .HasMaxLength(1000)
                    .HasColumnName("NEWSTATUS");

                entity.Property(e => e.Register)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(1000);
            });

            modelBuilder.Entity<Notam>(entity =>
            {
                entity.ToTable("NOTAM");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateDay).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.StationId)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Notamitem>(entity =>
            {
                entity.ToTable("NOTAMItem");

                entity.Property(e => e.Notamid).HasColumnName("NOTAMId");

                entity.Property(e => e.Text)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.HasOne(d => d.Notam)
                    .WithMany(p => p.Notamitems)
                    .HasForeignKey(d => d.Notamid)
                    .HasConstraintName("fk_nti_nt");
            });

            modelBuilder.Entity<Notification>(entity =>
            {
                entity.ToTable("Notification");

                entity.Property(e => e.AppIssue).HasMaxLength(500);

                entity.Property(e => e.DateAppSent).HasColumnType("datetime");

                entity.Property(e => e.DateAppVisited).HasColumnType("datetime");

                entity.Property(e => e.DateEmailSent).HasColumnType("datetime");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.DateSmssent)
                    .HasColumnType("datetime")
                    .HasColumnName("DateSMSSent");

                entity.Property(e => e.EmailIssue).HasMaxLength(500);

                entity.Property(e => e.Message).IsRequired();

                entity.Property(e => e.Sms).HasColumnName("SMS");

                entity.Property(e => e.Smsissue)
                    .HasMaxLength(500)
                    .HasColumnName("SMSIssue");

                entity.Property(e => e.Subject).HasMaxLength(500);
            });

            modelBuilder.Entity<NotificationGroup>(entity =>
            {
                entity.ToTable("NotificationGroup");

                entity.HasIndex(e => e.GroupTitle, "idx_notgrp");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.GroupTitle)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.NotificationGroups)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("idx_notgrp_user");
            });

            modelBuilder.Entity<OffItem>(entity =>
            {
                entity.HasKey(e => new { e.Fdpid, e.FlightId })
                    .HasName("PK__OffItem__ACAAD4F14B61A96F");

                entity.ToTable("OffItem");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.Remark)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Fdp)
                    .WithMany(p => p.OffItems)
                    .HasForeignKey(d => d.Fdpid)
                    .HasConstraintName("off_fdp");

                entity.HasOne(d => d.Flight)
                    .WithMany(p => p.OffItems)
                    .HasForeignKey(d => d.FlightId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("off_flight");
            });

            modelBuilder.Entity<Ofpimport>(entity =>
            {
                entity.ToTable("OFPImport");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateFlight).HasColumnType("date");

                entity.Property(e => e.DateUpdate)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Destination)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FileName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.FptripFuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPTripFuel");

                entity.Property(e => e.JldatePicapproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDatePICApproved");

                entity.Property(e => e.JlsignedBy)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("JLSignedBy");

                entity.Property(e => e.Origin)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Pic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PIC");

                entity.Property(e => e.Picid).HasColumnName("PICId");

                entity.Property(e => e.Text).IsUnicode(false);

                entity.Property(e => e.TextOutput).IsUnicode(false);

                entity.Property(e => e.User)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UserConfirmed)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OfpimportItem>(entity =>
            {
                entity.ToTable("OFPImportItem");

                entity.Property(e => e.Line)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Ofpid).HasColumnName("OFPId");

                entity.HasOne(d => d.Ofp)
                    .WithMany(p => p.OfpimportItems)
                    .HasForeignKey(d => d.Ofpid)
                    .HasConstraintName("fk_ofpl_ofp");
            });

            modelBuilder.Entity<OfpimportProp>(entity =>
            {
                entity.ToTable("OFPImportProp");

                entity.Property(e => e.DateUpdate)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DateUpdateLocal).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Ofpid).HasColumnName("OFPId");

                entity.Property(e => e.PropName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PropType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PropValue)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.User)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Ofp)
                    .WithMany(p => p.OfpimportProps)
                    .HasForeignKey(d => d.Ofpid)
                    .HasConstraintName("fk_ofpp_ofp");
            });

            modelBuilder.Entity<OpsCrewPhone>(entity =>
            {
                entity.HasKey(e => new { e.Fname, e.Lname, e.CellPhone })
                    .HasName("PK__OpsCrewP__47B503A6EDE4DC69");

                entity.ToTable("OpsCrewPhone");

                entity.Property(e => e.Fname)
                    .HasMaxLength(255)
                    .HasColumnName("FName");

                entity.Property(e => e.Lname)
                    .HasMaxLength(255)
                    .HasColumnName("LName");

                entity.Property(e => e.CellPhone).HasMaxLength(255);
            });

            modelBuilder.Entity<Option>(entity =>
            {
                entity.ToTable("Option");

                entity.Property(e => e.Prop1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<Organization>(entity =>
            {
                entity.ToTable("Organization");

                entity.Property(e => e.Address).HasMaxLength(1000);

                entity.Property(e => e.ContactPerson).HasMaxLength(1000);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.Fax)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LogoUrl)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Tel)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Website).HasMaxLength(500);
            });

            modelBuilder.Entity<Passcockpit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_passcockpit");

                entity.Property(e => e.Firstname)
                    .HasMaxLength(255)
                    .HasColumnName("FIRSTNAME");

                entity.Property(e => e.Lastname)
                    .HasMaxLength(255)
                    .HasColumnName("LASTNAME");

                entity.Property(e => e.Nid)
                    .HasMaxLength(255)
                    .HasColumnName("NID");
            });

            modelBuilder.Entity<Person>(entity =>
            {
                entity.ToTable("Person");

                entity.Property(e => e.AcexpireDate).HasColumnName("ACExpireDate");

                entity.Property(e => e.AcissueDate).HasColumnName("ACIssueDate");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.AnnexexpireDate).HasColumnName("ANNEXExpireDate");

                entity.Property(e => e.AnnexissueDate).HasColumnName("ANNEXIssueDate");

                entity.Property(e => e.AsdexpireDate).HasColumnName("ASDExpireDate");

                entity.Property(e => e.AsdissueDate).HasColumnName("ASDIssueDate");

                entity.Property(e => e.AsfexpireDate).HasColumnName("ASFExpireDate");

                entity.Property(e => e.AsfissueDate).HasColumnName("ASFIssueDate");

                entity.Property(e => e.AviationSecurityExpireDate).HasColumnType("datetime");

                entity.Property(e => e.AviationSecurityIssueDate).HasColumnType("datetime");

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CcexpireDate).HasColumnName("CCExpireDate");

                entity.Property(e => e.CcissueDate).HasColumnName("CCIssueDate");

                entity.Property(e => e.CcrmexpireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CCRMExpireDate");

                entity.Property(e => e.CcrmissueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CCRMIssueDate");

                entity.Property(e => e.CmcemployedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CMCEmployedBy");

                entity.Property(e => e.Cmcoccupation)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CMCOccupation");

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ColdWeatherOperationExpireDate).HasColumnType("datetime");

                entity.Property(e => e.ColdWeatherOperationIssueDate).HasColumnType("datetime");

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.CreexpireDate).HasColumnName("CREExpireDate");

                entity.Property(e => e.CreissueDate).HasColumnName("CREIssueDate");

                entity.Property(e => e.CrewMemberCertificateExpireDate).HasColumnType("datetime");

                entity.Property(e => e.CriexpireDate).HasColumnName("CRIExpireDate");

                entity.Property(e => e.CriissueDate).HasColumnName("CRIIssueDate");

                entity.Property(e => e.CrmexpireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CRMExpireDate");

                entity.Property(e => e.CrmissueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CRMIssueDate");

                entity.Property(e => e.CtuexpireDate).HasColumnName("CTUExpireDate");

                entity.Property(e => e.CtuissueDate).HasColumnName("CTUIssueDate");

                entity.Property(e => e.DangerousGoodsExpireDate).HasColumnType("datetime");

                entity.Property(e => e.DangerousGoodsIssueDate).HasColumnType("datetime");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateExpireNdt)
                    .HasColumnType("date")
                    .HasColumnName("DateExpireNDT");

                entity.Property(e => e.DateIssueNdt)
                    .HasColumnType("date")
                    .HasColumnName("DateIssueNDT");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateLastCheckUP");

                entity.Property(e => e.DateNextCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateNextCheckUP");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateTreexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("DateTREExpired");

                entity.Property(e => e.DateTriexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("DateTRIExpired");

                entity.Property(e => e.DateTypeExpire).HasColumnType("datetime");

                entity.Property(e => e.DateTypeIssue).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.DrmexpireDate).HasColumnName("DRMExpireDate");

                entity.Property(e => e.DrmissueDate).HasColumnName("DRMIssueDate");

                entity.Property(e => e.EgpwsexpireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EGPWSExpireDate");

                entity.Property(e => e.EgpwsissueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EGPWSIssueDate");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.EmailPassword).HasMaxLength(500);

                entity.Property(e => e.ErpexpireDate).HasColumnName("ERPExpireDate");

                entity.Property(e => e.ErpissueDate).HasColumnName("ERPIssueDate");

                entity.Property(e => e.FatherName).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstAidExpireDate).HasColumnType("datetime");

                entity.Property(e => e.FirstAidIssueDate).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FmtdexpireDate).HasColumnName("FMTDExpireDate");

                entity.Property(e => e.FmtdissueDate).HasColumnName("FMTDIssueDate");

                entity.Property(e => e.FmtexpireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FMTExpireDate");

                entity.Property(e => e.FmtissueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FMTIssueDate");

                entity.Property(e => e.GomexpireDate).HasColumnName("GOMExpireDate");

                entity.Property(e => e.GomissueDate).HasColumnName("GOMIssueDate");

                entity.Property(e => e.HfexpireDate).HasColumnName("HFExpireDate");

                entity.Property(e => e.HfissueDate).HasColumnName("HFIssueDate");

                entity.Property(e => e.HotWeatherOperationExpireDate).HasColumnType("datetime");

                entity.Property(e => e.HotWeatherOperationIssueDate).HasColumnType("datetime");

                entity.Property(e => e.Icaolprlevel).HasColumnName("ICAOLPRLevel");

                entity.Property(e => e.IcaolprvalidUntil)
                    .HasColumnType("datetime")
                    .HasColumnName("ICAOLPRValidUntil");

                entity.Property(e => e.Idno)
                    .HasMaxLength(500)
                    .HasColumnName("IDNo");

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.IntervalNdt).HasColumnName("IntervalNDT");

                entity.Property(e => e.IreexpireDate).HasColumnName("IREExpireDate");

                entity.Property(e => e.IreissueDate).HasColumnName("IREIssueDate");

                entity.Property(e => e.IriexpireDate).HasColumnName("IRIExpireDate");

                entity.Property(e => e.IriissueDate).HasColumnName("IRIIssueDate");

                entity.Property(e => e.JobGroup)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCourseExpireDate).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.LicenceDescription).HasMaxLength(2000);

                entity.Property(e => e.LicenceExpireDate).HasColumnType("datetime");

                entity.Property(e => e.LicenceInitialIssue).HasColumnType("datetime");

                entity.Property(e => e.LicenceIrexpireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LicenceIRExpireDate");

                entity.Property(e => e.LicenceIssueDate).HasColumnType("datetime");

                entity.Property(e => e.LicenceTitle).HasMaxLength(500);

                entity.Property(e => e.LineC1expireDate).HasColumnName("LineC1ExpireDate");

                entity.Property(e => e.LineC1issueDate).HasColumnName("LineC1IssueDate");

                entity.Property(e => e.LineC2expireDate).HasColumnName("LineC2ExpireDate");

                entity.Property(e => e.LineC2issueDate).HasColumnName("LineC2IssueDate");

                entity.Property(e => e.LineC3expireDate).HasColumnName("LineC3ExpireDate");

                entity.Property(e => e.LineC3issueDate).HasColumnName("LineC3IssueDate");

                entity.Property(e => e.LineExpireDate).HasColumnType("datetime");

                entity.Property(e => e.LineIssueDate).HasColumnType("datetime");

                entity.Property(e => e.LinkedIn).HasMaxLength(500);

                entity.Property(e => e.Lpcc1expireDate).HasColumnName("LPCC1ExpireDate");

                entity.Property(e => e.Lpcc1issueDate).HasColumnName("LPCC1IssueDate");

                entity.Property(e => e.Lpcc2expireDate).HasColumnName("LPCC2ExpireDate");

                entity.Property(e => e.Lpcc2issueDate).HasColumnName("LPCC2IssueDate");

                entity.Property(e => e.Lpcc3expireDate).HasColumnName("LPCC3ExpireDate");

                entity.Property(e => e.Lpcc3issueDate).HasColumnName("LPCC3IssueDate");

                entity.Property(e => e.LrcexpireDate).HasColumnName("LRCExpireDate");

                entity.Property(e => e.LrcissueDate)
                    .HasColumnName("LRCIssueDate")
                    .HasComment("Radio Comm");

                entity.Property(e => e.MbexpireDate).HasColumnName("MBExpireDate");

                entity.Property(e => e.MbissueDate).HasColumnName("MBIssueDate");

                entity.Property(e => e.MedicalLimitation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MelexpireDate).HasColumnName("MELExpireDate");

                entity.Property(e => e.MelissueDate).HasColumnName("MELIssueDate");

                entity.Property(e => e.MetexpireDate).HasColumnName("METExpireDate");

                entity.Property(e => e.MetissueDate)
                    .HasColumnName("METIssueDate")
                    .HasComment("meteorolog");

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.MultiType)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NdtintervalCalanderTypeId).HasColumnName("NDTIntervalCalanderTypeId");

                entity.Property(e => e.Ndtnumber)
                    .HasMaxLength(200)
                    .HasColumnName("NDTNumber");

                entity.Property(e => e.Nickname).HasMaxLength(50);

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.Oma1expireDate).HasColumnName("OMA1ExpireDate");

                entity.Property(e => e.Oma1issueDate).HasColumnName("OMA1IssueDate");

                entity.Property(e => e.Oma2expireDate).HasColumnName("OMA2ExpireDate");

                entity.Property(e => e.Oma2issueDate).HasColumnName("OMA2IssueDate");

                entity.Property(e => e.Oma3expireDate).HasColumnName("OMA3ExpireDate");

                entity.Property(e => e.Oma3issueDate).HasColumnName("OMA3IssueDate");

                entity.Property(e => e.Omb1expireDate).HasColumnName("OMB1ExpireDate");

                entity.Property(e => e.Omb1issueDate).HasColumnName("OMB1IssueDate");

                entity.Property(e => e.Omb2expireDate).HasColumnName("OMB2ExpireDate");

                entity.Property(e => e.Omb2issueDate).HasColumnName("OMB2IssueDate");

                entity.Property(e => e.Omb3expireDate).HasColumnName("OMB3ExpireDate");

                entity.Property(e => e.Omb3issueDate).HasColumnName("OMB3IssueDate");

                entity.Property(e => e.Omc1expireDate).HasColumnName("OMC1ExpireDate");

                entity.Property(e => e.Omc1issueDate).HasColumnName("OMC1IssueDate");

                entity.Property(e => e.Omc2expireDate).HasColumnName("OMC2ExpireDate");

                entity.Property(e => e.Omc2issueDate).HasColumnName("OMC2IssueDate");

                entity.Property(e => e.Omc3expireDate).HasColumnName("OMC3ExpireDate");

                entity.Property(e => e.Omc3issueDate).HasColumnName("OMC3IssueDate");

                entity.Property(e => e.Opcc1expireDate).HasColumnName("OPCC1ExpireDate");

                entity.Property(e => e.Opcc1issueDate).HasColumnName("OPCC1IssueDate");

                entity.Property(e => e.Opcc2expireDate).HasColumnName("OPCC2ExpireDate");

                entity.Property(e => e.Opcc2issueDate).HasColumnName("OPCC2IssueDate");

                entity.Property(e => e.Opcc3expireDate).HasColumnName("OPCC3ExpireDate");

                entity.Property(e => e.Opcc3issueDate).HasColumnName("OPCC3IssueDate");

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.PbnrnavexpireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PBNRNAVExpireDate");

                entity.Property(e => e.PbnrnavissueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PBNRNAVIssueDate");

                entity.Property(e => e.PerexpireDate).HasColumnName("PERExpireDate");

                entity.Property(e => e.PerissueDate)
                    .HasColumnName("PERIssueDate")
                    .HasComment("perfoemance");

                entity.Property(e => e.PfirstName)
                    .HasMaxLength(500)
                    .HasColumnName("PFirstName");

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.PlastName)
                    .HasMaxLength(500)
                    .HasColumnName("PLastName");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ProficiencyCheckDate).HasColumnType("datetime");

                entity.Property(e => e.ProficiencyCheckDateOpc)
                    .HasColumnType("datetime")
                    .HasColumnName("ProficiencyCheckDateOPC");

                entity.Property(e => e.ProficiencyDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ProficiencyDescriptionOpc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ProficiencyDescriptionOPC");

                entity.Property(e => e.ProficiencyExpireDate).HasColumnType("datetime");

                entity.Property(e => e.ProficiencyIpc).HasColumnName("ProficiencyIPC");

                entity.Property(e => e.ProficiencyOpc).HasColumnName("ProficiencyOPC");

                entity.Property(e => e.ProficiencyValidUntil).HasColumnType("datetime");

                entity.Property(e => e.ProficiencyValidUntilOpc)
                    .HasColumnType("datetime")
                    .HasColumnName("ProficiencyValidUntilOPC");

                entity.Property(e => e.PsexpireDate).HasColumnName("PSExpireDate");

                entity.Property(e => e.PsissueDate).HasColumnName("PSIssueDate");

                entity.Property(e => e.RaitingCertificates).HasMaxLength(500);

                entity.Property(e => e.RampPassExpireDate).HasColumnType("datetime");

                entity.Property(e => e.RampPassNo).HasMaxLength(500);

                entity.Property(e => e.RecurrentExpireDate).HasColumnType("datetime");

                entity.Property(e => e.RecurrentIssueDate).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.RspexpireDate).HasColumnName("RSPExpireDate");

                entity.Property(e => e.RspissueDate)
                    .HasColumnName("RSPIssueDate")
                    .HasComment("SITA-FLIGHTPLAN");

                entity.Property(e => e.SaexpireDate).HasColumnName("SAExpireDate");

                entity.Property(e => e.SaissueDate).HasColumnName("SAIssueDate");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SeptexpireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SEPTExpireDate");

                entity.Property(e => e.SeptissueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SEPTIssueDate");

                entity.Property(e => e.SeptpexpireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SEPTPExpireDate");

                entity.Property(e => e.SeptpissueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SEPTPIssueDate");

                entity.Property(e => e.Sfe2expireDate).HasColumnName("SFE2ExpireDate");

                entity.Property(e => e.Sfe2issueDate).HasColumnName("SFE2IssueDate");

                entity.Property(e => e.SfeexpireDate).HasColumnName("SFEExpireDate");

                entity.Property(e => e.SfeissueDate).HasColumnName("SFEIssueDate");

                entity.Property(e => e.Sfi2expireDate).HasColumnName("SFI2ExpireDate");

                entity.Property(e => e.Sfi2issueDate).HasColumnName("SFI2IssueDate");

                entity.Property(e => e.SfiexpireDate).HasColumnName("SFIExpireDate");

                entity.Property(e => e.SfiissueDate).HasColumnName("SFIIssueDate");

                entity.Property(e => e.SimulatorLastCheck).HasColumnType("datetime");

                entity.Property(e => e.SimulatorNextCheck).HasColumnType("datetime");

                entity.Property(e => e.SmsexpireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SMSExpireDate");

                entity.Property(e => e.SmsissueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SMSIssueDate");

                entity.Property(e => e.SopexpireDate).HasColumnName("SOPExpireDate");

                entity.Property(e => e.SopissueDate).HasColumnName("SOPIssueDate");

                entity.Property(e => e.StampNumber).HasMaxLength(500);

                entity.Property(e => e.StampUrl).HasMaxLength(500);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Telegram).HasMaxLength(255);

                entity.Property(e => e.Tre2expireDate).HasColumnName("TRE2ExpireDate");

                entity.Property(e => e.Tre2issueDate).HasColumnName("TRE2IssueDate");

                entity.Property(e => e.Tri2expireDate).HasColumnName("TRI2ExpireDate");

                entity.Property(e => e.Tri2issueDate).HasColumnName("TRI2IssueDate");

                entity.Property(e => e.TypeMdconversionIssueDate).HasColumnName("TypeMDConversionIssueDate");

                entity.Property(e => e.TypeMdexpireDate).HasColumnName("TypeMDExpireDate");

                entity.Property(e => e.TypeMdissueDate)
                    .HasColumnName("TypeMDIssueDate")
                    .HasComment("flight check");

                entity.Property(e => e.UprtexpireDate).HasColumnName("UPRTExpireDate");

                entity.Property(e => e.UprtissueDate).HasColumnName("UPRTIssueDate");

                entity.Property(e => e.UpsetRecoveryTrainingExpireDate).HasColumnType("datetime");

                entity.Property(e => e.UpsetRecoveryTrainingIssueDate).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.Property(e => e.VisaExpireDate).HasColumnType("datetime");

                entity.Property(e => e.WhatsApp).HasMaxLength(500);

                entity.HasOne(d => d.CaoIntervalCalanderType)
                    .WithMany(p => p.PersonCaoIntervalCalanderTypes)
                    .HasForeignKey(d => d.CaoIntervalCalanderTypeId)
                    .HasConstraintName("FK_PERSON_OPTION_ICAO");

                entity.HasOne(d => d.Marriage)
                    .WithMany(p => p.PersonMarriages)
                    .HasForeignKey(d => d.MarriageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PERSON_OPTION_MARRIAGE");

                entity.HasOne(d => d.NdtintervalCalanderType)
                    .WithMany(p => p.PersonNdtintervalCalanderTypes)
                    .HasForeignKey(d => d.NdtintervalCalanderTypeId)
                    .HasConstraintName("FK_PERSON_OPTION_INDT");
            });

            modelBuilder.Entity<PersonAircraftType>(entity =>
            {
                entity.ToTable("PersonAircraftType");

                entity.Property(e => e.DateLimitBegin).HasColumnType("datetime");

                entity.Property(e => e.DateLimitEnd).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.HasOne(d => d.AircraftType)
                    .WithMany(p => p.PersonAircraftTypes)
                    .HasForeignKey(d => d.AircraftTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UM_Type_Access_Ac_Type");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonAircraftTypes)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_UM_Type_Access_UM_Users");
            });

            modelBuilder.Entity<PersonCaoLicenceHistory>(entity =>
            {
                entity.ToTable("PersonCaoLicenceHistory");

                entity.Property(e => e.DateLicense).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.HasOne(d => d.CaoBasicType)
                    .WithMany(p => p.PersonCaoLicenceHistories)
                    .HasForeignKey(d => d.CaoBasicTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CaoUserLicenceHistory_CaoBasicType");

                entity.HasOne(d => d.CaoCategory)
                    .WithMany(p => p.PersonCaoLicenceHistories)
                    .HasForeignKey(d => d.CaoCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CaoUserLicenceHistory_CaoCategory");

                entity.HasOne(d => d.CaoUserLicense)
                    .WithMany(p => p.PersonCaoLicenceHistories)
                    .HasForeignKey(d => d.CaoUserLicenseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CaoUserLicenceHistory_CaoUserLicence");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonCaoLicenceHistories)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CaoUserLicenceHistory_Person");
            });

            modelBuilder.Entity<PersonCaoLicense>(entity =>
            {
                entity.ToTable("PersonCaoLicense");

                entity.Property(e => e.DateLicense).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Result)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CaoBasic)
                    .WithMany(p => p.PersonCaoLicenses)
                    .HasForeignKey(d => d.CaoBasicId)
                    .HasConstraintName("FK_TRN_CaoUserLicence_TRN_CaoBasic");

                entity.HasOne(d => d.CaoBasicType)
                    .WithMany(p => p.PersonCaoLicenses)
                    .HasForeignKey(d => d.CaoBasicTypeId)
                    .HasConstraintName("FK_CaoUserLicence_CaoBasicType");

                entity.HasOne(d => d.CaoCategory)
                    .WithMany(p => p.PersonCaoLicenses)
                    .HasForeignKey(d => d.CaoCategoryId)
                    .HasConstraintName("FK_CaoUserLicence_CaoCategory");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonCaoLicenses)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_CaoUserLicence_Person");
            });

            modelBuilder.Entity<PersonCourse>(entity =>
            {
                entity.ToTable("PersonCourse");

                entity.Property(e => e.CerNumber).HasMaxLength(500);

                entity.Property(e => e.CerUrl).HasMaxLength(255);

                entity.Property(e => e.DateExpire).HasColumnType("date");

                entity.Property(e => e.DateExpireP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.Property(e => e.DateIssueP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Grade).HasMaxLength(255);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.PersonCourses)
                    .HasForeignKey(d => d.CourseId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PersonCourse_Course");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonCourses)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_UserCourse_Person");
            });

            modelBuilder.Entity<PersonCustomer>(entity =>
            {
                entity.ToTable("PersonCustomer");

                entity.Property(e => e.C1groupId).HasColumnName("C1GroupId");

                entity.Property(e => e.C2groupId).HasColumnName("C2GroupId");

                entity.Property(e => e.C3groupId).HasColumnName("C3GroupId");

                entity.Property(e => e.DateActiveEnd).HasColumnType("datetime");

                entity.Property(e => e.DateActiveStart).HasColumnType("datetime");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateConfirmedP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateJoinCompanyP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateLastLogin).HasColumnType("datetime");

                entity.Property(e => e.DateLastLoginP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.DateRegisterP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Password).HasMaxLength(1000);

                entity.Property(e => e.Username).HasMaxLength(1000);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.PersonCustomers)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_PERSONCUSTOMER_CUSTOMER");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.PersonCustomers)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_PERSONCUSTOMER_GROUP");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonCustomers)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_PERSONCUSTOMER_PERSON");
            });

            modelBuilder.Entity<PersonDocument>(entity =>
            {
                entity.ToTable("PersonDocument");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonDocuments)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_PD_PERS");
            });

            modelBuilder.Entity<PersonDocumentFile>(entity =>
            {
                entity.HasKey(e => e.DocumentId)
                    .HasName("PK__PersonDo__1ABEEF0FFDB54387");

                entity.ToTable("PersonDocumentFile");

                entity.Property(e => e.DocumentId).ValueGeneratedNever();

                entity.HasOne(d => d.Document)
                    .WithOne(p => p.PersonDocumentFile)
                    .HasForeignKey<PersonDocumentFile>(d => d.DocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DF_DOC");

                entity.HasOne(d => d.PersonDocument)
                    .WithMany(p => p.PersonDocumentFiles)
                    .HasForeignKey(d => d.PersonDocumentId)
                    .HasConstraintName("FK_DF_PERSDOC");
            });

            modelBuilder.Entity<PersonEducation>(entity =>
            {
                entity.ToTable("PersonEducation");

                entity.Property(e => e.College).HasMaxLength(500);

                entity.Property(e => e.DateCatch).HasColumnType("date");

                entity.Property(e => e.FileTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.SysUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(60);

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonEducations)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_PERSONEDUCATION_PERSON");
            });

            modelBuilder.Entity<PersonEducationDocument>(entity =>
            {
                entity.HasKey(e => new { e.PersonEducationId, e.DocumentId })
                    .HasName("PK__PersonEd__543611E0F36BBB46");

                entity.ToTable("PersonEducationDocument");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.PersonEducationDocuments)
                    .HasForeignKey(d => d.DocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PERSONEDUDOC_DOC");

                entity.HasOne(d => d.PersonEducation)
                    .WithMany(p => p.PersonEducationDocuments)
                    .HasForeignKey(d => d.PersonEducationId)
                    .HasConstraintName("FK_PERSONEDUDOC_PERSONEDU");
            });

            modelBuilder.Entity<PersonExperiense>(entity =>
            {
                entity.ToTable("PersonExperiense");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.Employer).HasMaxLength(500);

                entity.Property(e => e.JobTitle).HasMaxLength(500);

                entity.Property(e => e.Organization).HasMaxLength(500);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonExperienses)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_PersonExperience_Person");
            });

            modelBuilder.Entity<PersonHistory>(entity =>
            {
                entity.ToTable("PersonHistory");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.User)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonMisc>(entity =>
            {
                entity.ToTable("PersonMisc");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.ImageUrl).HasMaxLength(500);

                entity.Property(e => e.Instagram).HasMaxLength(500);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LinkedIn).HasMaxLength(500);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Tel).HasMaxLength(500);

                entity.Property(e => e.Telegram).HasMaxLength(500);

                entity.Property(e => e.Website).HasMaxLength(500);
            });

            modelBuilder.Entity<PersonRating>(entity =>
            {
                entity.ToTable("PersonRating");

                entity.Property(e => e.DateExpire).HasColumnType("date");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.HasOne(d => d.AircraftType)
                    .WithMany(p => p.PersonRatings)
                    .HasForeignKey(d => d.AircraftTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonRating_AcType");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonRatings)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("FK_PersonRating_Person");

                entity.HasOne(d => d.Rating)
                    .WithMany(p => p.PersonRatings)
                    .HasForeignKey(d => d.RatingId)
                    .HasConstraintName("FK_PersonRating_Rating");
            });

            modelBuilder.Entity<PersonRatingDocument>(entity =>
            {
                entity.HasKey(e => e.PersonRatingId)
                    .HasName("PK__PersonRa__F36BF0D3784006F3");

                entity.ToTable("PersonRatingDocument");

                entity.Property(e => e.PersonRatingId).ValueGeneratedNever();

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.PersonRatingDocuments)
                    .HasForeignKey(d => d.DocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PRD_DOC");

                entity.HasOne(d => d.PersonRating)
                    .WithOne(p => p.PersonRatingDocument)
                    .HasForeignKey<PersonRatingDocument>(d => d.PersonRatingId)
                    .HasConstraintName("FK_PRD_PERSONRATING");
            });

            modelBuilder.Entity<PlanItem>(entity =>
            {
                entity.ToTable("PlanItem");

                entity.Property(e => e.Arr).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.Day)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Dep).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(500);

                entity.Property(e => e.Line)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Plupd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PLUPD");

                entity.Property(e => e.DayName).HasMaxLength(30);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.NewSta)
                    .HasColumnType("datetime")
                    .HasColumnName("NewSTA");

                entity.Property(e => e.NewStd)
                    .HasColumnType("datetime")
                    .HasColumnName("NewSTD");

                entity.Property(e => e.Nsta)
                    .HasColumnType("datetime")
                    .HasColumnName("NSTA");

                entity.Property(e => e.Nstd)
                    .HasColumnType("datetime")
                    .HasColumnName("NSTD");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<Rating>(entity =>
            {
                entity.ToTable("Rating");

                entity.Property(e => e.Rate).HasMaxLength(50);

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.Ratings)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RATING_ORG");
            });

            modelBuilder.Entity<RefreshToken>(entity =>
            {
                entity.ToTable("RefreshToken");

                entity.Property(e => e.Id).HasMaxLength(500);

                entity.Property(e => e.ClientId)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ExpiresUtc).HasColumnType("datetime");

                entity.Property(e => e.IssuedUtc).HasColumnType("datetime");

                entity.Property(e => e.ProtectedTicket)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<RegisterGround>(entity =>
            {
                entity.ToTable("RegisterGround");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportRoster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ReportRoster");

                entity.Property(e => e.Ccm).HasColumnName("CCM");

                entity.Property(e => e.Check).HasColumnName("CHECK");

                entity.Property(e => e.Checkc).HasColumnName("CHECKC");

                entity.Property(e => e.Cpt).HasColumnName("CPT");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.Fm).HasColumnName("FM");

                entity.Property(e => e.Fo).HasColumnName("FO");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Ip).HasColumnName("IP");

                entity.Property(e => e.Isccm).HasColumnName("ISCCM");

                entity.Property(e => e.Obs).HasColumnName("OBS");

                entity.Property(e => e.Obsc).HasColumnName("OBSC");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(4000)
                    .HasColumnName("PDATE");

                entity.Property(e => e.Positioning).HasColumnName("POSITIONING");

                entity.Property(e => e.Positioningcabin).HasColumnName("POSITIONINGCABIN");

                entity.Property(e => e.Positioningcockpit).HasColumnName("POSITIONINGCOCKPIT");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.Safety).HasColumnName("SAFETY");

                entity.Property(e => e.Sccm).HasColumnName("SCCM");

                entity.Property(e => e.Sta)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("STA");

                entity.Property(e => e.Staloc)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("STALOC");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Stax)
                    .HasColumnType("datetime")
                    .HasColumnName("STAx");

                entity.Property(e => e.Std)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdloc)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("STDLOC");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Stdx)
                    .HasColumnType("datetime")
                    .HasColumnName("STDx");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<RoleOrganizational>(entity =>
            {
                entity.ToTable("RoleOrganizational");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<RosterCrewSheet>(entity =>
            {
                entity.ToTable("RosterCrewSheet");

                entity.Property(e => e.Dh).HasColumnName("DH");

                entity.Property(e => e.FdpitemId).HasColumnName("FDPItemId");

                entity.HasOne(d => d.Fdpitem)
                    .WithMany(p => p.RosterCrewSheets)
                    .HasForeignKey(d => d.FdpitemId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_roster_fdpitem");
            });

            modelBuilder.Entity<RouteDistance>(entity =>
            {
                entity.ToTable("RouteDistance");

                entity.Property(e => e.FromIata)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FromIATA");

                entity.Property(e => e.ToIata)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ToIATA");
            });

            modelBuilder.Entity<RptAirportDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptAirportDaily");

                entity.Property(e => e.Airline)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Delays).HasMaxLength(4000);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.OffBlock).HasColumnType("datetime");

                entity.Property(e => e.OffBlockLocal).HasColumnType("datetime");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(4000)
                    .HasColumnName("PDate");

                entity.Property(e => e.PdateOffBlock)
                    .HasMaxLength(4000)
                    .HasColumnName("PDateOffBlock");

                entity.Property(e => e.PdateTakeOff)
                    .HasMaxLength(4000)
                    .HasColumnName("PDateTakeOff");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TakeOffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.Uplift).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<RptDeadHead>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDeadHead");

                entity.Property(e => e.BlockOff).HasColumnType("datetime");

                entity.Property(e => e.BlockOn).HasColumnType("datetime");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.DateFdp)
                    .HasColumnType("date")
                    .HasColumnName("DateFDP");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingStn).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.StddayLocal)
                    .HasColumnType("date")
                    .HasColumnName("STDDayLocal");

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TakeOffStn).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<RptDelayAirportDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayAirportDaily");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PreAblockTime).HasColumnName("PreABlockTime");

                entity.Property(e => e.PreAflightCount).HasColumnName("PreAFlightCount");

                entity.Property(e => e.PreAflightTime).HasColumnName("PreAFlightTime");

                entity.Property(e => e.PreDelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("PreDelayPerBL");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<RptDelayAirportDailyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayAirportDailyCal");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AblockTimeDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("ABlockTimeDiff");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightCountDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("AFlightCountDiff");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.AflightTimeDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("AFlightTimeDiff");

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerBldiff)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("DelayPerBLDiff");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTimeDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.OnTimeFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PreAblockTime).HasColumnName("PreABlockTime");

                entity.Property(e => e.PreAflightCount).HasColumnName("PreAFlightCount");

                entity.Property(e => e.PreAflightTime).HasColumnName("PreAFlightTime");

                entity.Property(e => e.PreDelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("PreDelayPerBL");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<RptDelayAirportMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayAirportMonthly");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayTotalRatio).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PreAblockTime).HasColumnName("PreABlockTime");

                entity.Property(e => e.PreAflightCount).HasColumnName("PreAFlightCount");

                entity.Property(e => e.PreAflightTime).HasColumnName("PreAFlightTime");

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("PreDelayPerBL");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<RptDelayAirportMonthlyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayAirportMonthlyCal");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AblockTimeDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("ABlockTimeDiff");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightCountDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("AFlightCountDiff");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.AflightTimeDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("AFlightTimeDiff");

                entity.Property(e => e.Airport)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.CountPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.Delay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerBldiff)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("DelayPerBLDiff");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayTotalRatio).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.DelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayUnder30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTimeDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.OnTimeFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreAblockTime).HasColumnName("PreABlockTime");

                entity.Property(e => e.PreAflightCount).HasColumnName("PreAFlightCount");

                entity.Property(e => e.PreAflightTime).HasColumnName("PreAFlightTime");

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("PreDelayPerBL");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");
            });

            modelBuilder.Entity<RptDelayCatAirportDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatAirportDaily");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Icategory)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PreAblockTime).HasColumnName("PreABlockTime");

                entity.Property(e => e.PreAflightCount).HasColumnName("PreAFlightCount");

                entity.Property(e => e.PreAflightTime).HasColumnName("PreAFlightTime");

                entity.Property(e => e.PreDelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("PreDelayPerBL");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<RptDelayCatAirportDailyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatAirportDailyCal");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AblockTimeDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("ABlockTimeDiff");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightCountDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("AFlightCountDiff");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.AflightTimeDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("AFlightTimeDiff");

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerBldiff)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("DelayPerBLDiff");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTimeDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Icategory)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.OnTimeFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PreAblockTime).HasColumnName("PreABlockTime");

                entity.Property(e => e.PreAflightCount).HasColumnName("PreAFlightCount");

                entity.Property(e => e.PreAflightTime).HasColumnName("PreAFlightTime");

                entity.Property(e => e.PreDelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("PreDelayPerBL");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<RptDelayCatAirportMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatAirportMonthly");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayAirportRatio).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Icategory)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.IcategoryId).HasColumnName("ICategoryId");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PreAblockTime).HasColumnName("PreABlockTime");

                entity.Property(e => e.PreAflightCount).HasColumnName("PreAFlightCount");

                entity.Property(e => e.PreAflightTime).HasColumnName("PreAFlightTime");

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("PreDelayPerBL");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<RptDelayCatAirportMonthlyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatAirportMonthlyCal");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AblockTimeDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("ABlockTimeDiff");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightCountDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("AFlightCountDiff");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.AflightTimeDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("AFlightTimeDiff");

                entity.Property(e => e.Airport)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.CountPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.Delay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayAirportRatio).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerBldiff)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("DelayPerBLDiff");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayUnder30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTimeDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Icategory)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.OnTimeFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreAblockTime).HasColumnName("PreABlockTime");

                entity.Property(e => e.PreAflightCount).HasColumnName("PreAFlightCount");

                entity.Property(e => e.PreAflightTime).HasColumnName("PreAFlightTime");

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("PreDelayPerBL");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");
            });

            modelBuilder.Entity<RptDelayCatDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatDaily");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Icategory)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PreAblockTime).HasColumnName("PreABlockTime");

                entity.Property(e => e.PreAflightCount).HasColumnName("PreAFlightCount");

                entity.Property(e => e.PreAflightTime).HasColumnName("PreAFlightTime");

                entity.Property(e => e.PreDelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("PreDelayPerBL");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<RptDelayCatDailyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatDailyCal");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AblockTimeDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("ABlockTimeDiff");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightCountDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("AFlightCountDiff");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.AflightTimeDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("AFlightTimeDiff");

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerBldiff)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("DelayPerBLDiff");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTimeDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Icategory)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.OnTimeFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.PreAblockTime).HasColumnName("PreABlockTime");

                entity.Property(e => e.PreAflightCount).HasColumnName("PreAFlightCount");

                entity.Property(e => e.PreAflightTime).HasColumnName("PreAFlightTime");

                entity.Property(e => e.PreDelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("PreDelayPerBL");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");
            });

            modelBuilder.Entity<RptDelayCatMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatMonthly");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Icategory)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PreAblockTime).HasColumnName("PreABlockTime");

                entity.Property(e => e.PreAflightCount).HasColumnName("PreAFlightCount");

                entity.Property(e => e.PreAflightTime).HasColumnName("PreAFlightTime");

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("PreDelayPerBL");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<RptDelayCatMonthlyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatMonthlyCal");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AblockTimeDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("ABlockTimeDiff");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightCountDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("AFlightCountDiff");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.AflightTimeDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("AFlightTimeDiff");

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.CountPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.Delay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerBldiff)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("DelayPerBLDiff");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayUnder30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTimeDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Icategory)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.OnTimeFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreAblockTime).HasColumnName("PreABlockTime");

                entity.Property(e => e.PreAflightCount).HasColumnName("PreAFlightCount");

                entity.Property(e => e.PreAflightTime).HasColumnName("PreAFlightTime");

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("PreDelayPerBL");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");
            });

            modelBuilder.Entity<RptDelayCatRegisterDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatRegisterDaily");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Icategory)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PreAblockTime).HasColumnName("PreABlockTime");

                entity.Property(e => e.PreAflightCount).HasColumnName("PreAFlightCount");

                entity.Property(e => e.PreAflightTime).HasColumnName("PreAFlightTime");

                entity.Property(e => e.PreDelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("PreDelayPerBL");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");
            });

            modelBuilder.Entity<RptDelayCatRegisterDailyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatRegisterDailyCal");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AblockTimeDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("ABlockTimeDiff");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightCountDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("AFlightCountDiff");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.AflightTimeDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("AFlightTimeDiff");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerBldiff)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("DelayPerBLDiff");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTimeDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Icategory)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.OnTimeFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PreAblockTime).HasColumnName("PreABlockTime");

                entity.Property(e => e.PreAflightCount).HasColumnName("PreAFlightCount");

                entity.Property(e => e.PreAflightTime).HasColumnName("PreAFlightTime");

                entity.Property(e => e.PreDelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("PreDelayPerBL");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");
            });

            modelBuilder.Entity<RptDelayCatRegisterMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatRegisterMonthly");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Icategory)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PreAblockTime).HasColumnName("PreABlockTime");

                entity.Property(e => e.PreAflightCount).HasColumnName("PreAFlightCount");

                entity.Property(e => e.PreAflightTime).HasColumnName("PreAFlightTime");

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("PreDelayPerBL");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");
            });

            modelBuilder.Entity<RptDelayCatRegisterMonthlyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayCatRegisterMonthlyCal");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AblockTimeDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("ABlockTimeDiff");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightCountDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("AFlightCountDiff");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.AflightTimeDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("AFlightTimeDiff");

                entity.Property(e => e.AircraftType)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.CountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.CountPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.Delay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerBldiff)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("DelayPerBLDiff");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayUnder30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTimeDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Icategory)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.OnTimeFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreAblockTime).HasColumnName("PreABlockTime");

                entity.Property(e => e.PreAflightCount).HasColumnName("PreAFlightCount");

                entity.Property(e => e.PreAflightTime).HasColumnName("PreAFlightTime");

                entity.Property(e => e.PreCountPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("PreDelayPerBL");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");
            });

            modelBuilder.Entity<RptDelayDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayDaily");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.AtotalPax).HasColumnName("ATotalPax");

                entity.Property(e => e.AtotalPaxAll).HasColumnName("ATotalPaxAll");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedPaxPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PreAblockTime).HasColumnName("PreABlockTime");

                entity.Property(e => e.PreAflightCount).HasColumnName("PreAFlightCount");

                entity.Property(e => e.PreAflightTime).HasColumnName("PreAFlightTime");

                entity.Property(e => e.PreAtotalPax).HasColumnName("PreATotalPax");

                entity.Property(e => e.PreAtotalPaxAll).HasColumnName("PreATotalPaxAll");

                entity.Property(e => e.PreDelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("PreDelayPerBL");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedPaxPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<RptDelayDailyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayDailyCal");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AblockTimeDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("ABlockTimeDiff");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightCountDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("AFlightCountDiff");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.AflightTimeDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("AFlightTimeDiff");

                entity.Property(e => e.AtotalPax).HasColumnName("ATotalPax");

                entity.Property(e => e.AtotalPaxAll).HasColumnName("ATotalPaxAll");

                entity.Property(e => e.AtotalPaxAllDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("ATotalPaxAllDiff");

                entity.Property(e => e.AtotalPaxDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("ATotalPaxDiff");

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerBldiff)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("DelayPerBLDiff");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTimeDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedPaxPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedPaxPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.OnTimeFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PreAblockTime).HasColumnName("PreABlockTime");

                entity.Property(e => e.PreAflightCount).HasColumnName("PreAFlightCount");

                entity.Property(e => e.PreAflightTime).HasColumnName("PreAFlightTime");

                entity.Property(e => e.PreAtotalPax).HasColumnName("PreATotalPax");

                entity.Property(e => e.PreAtotalPaxAll).HasColumnName("PreATotalPaxAll");

                entity.Property(e => e.PreDelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("PreDelayPerBL");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedPaxPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.TotalPaxAllDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.TotalPaxDiff).HasColumnType("numeric(26, 12)");
            });

            modelBuilder.Entity<RptDelayLeg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayLeg");

                entity.Property(e => e.ActualFlightHoffBlock).HasColumnName("ActualFlightHOffBlock");

                entity.Property(e => e.ActualFlightHtakeoff).HasColumnName("ActualFlightHTakeoff");

                entity.Property(e => e.ActualFlightMoffBlock)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMOffBlock");

                entity.Property(e => e.ActualFlightMtakeoff)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMTakeoff");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.BaseIata)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BaseIATA");

                entity.Property(e => e.BaseName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.DelayHh).HasColumnName("DelayHH");

                entity.Property(e => e.DelayMm).HasColumnName("DelayMM");

                entity.Property(e => e.DelayRemark).HasMaxLength(500);

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Duration)
                    .HasColumnType("numeric(19, 6)")
                    .HasColumnName("duration");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightType)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FlightTypeAbr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FromAirportCity).HasMaxLength(255);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FromAirportName).HasMaxLength(255);

                entity.Property(e => e.Icategory)
                    .HasMaxLength(500)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.PyearMonthName)
                    .HasMaxLength(511)
                    .HasColumnName("PYearMonthName");

                entity.Property(e => e.PyearName)
                    .HasMaxLength(255)
                    .HasColumnName("PYearName");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.SeasonTitle)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.StddayLocal)
                    .HasColumnType("date")
                    .HasColumnName("STDDayLocal");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ToAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.ToAirportName).HasMaxLength(255);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<RptDelayLegMap>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayLegMap");

                entity.Property(e => e.CategoryIata)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("CategoryIATA");

                entity.Property(e => e.Categoty)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MapTitle).HasMaxLength(500);

                entity.Property(e => e.MapTitle2).HasMaxLength(500);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");
            });

            modelBuilder.Entity<RptDelayMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayMonthly");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.AtotalPax).HasColumnName("ATotalPax");

                entity.Property(e => e.AtotalPaxAll).HasColumnName("ATotalPaxAll");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedPaxPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.OnTimeFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PreAblockTime).HasColumnName("PreABlockTime");

                entity.Property(e => e.PreAflightCount).HasColumnName("PreAFlightCount");

                entity.Property(e => e.PreAflightTime).HasColumnName("PreAFlightTime");

                entity.Property(e => e.PreAtotalPax).HasColumnName("PreATotalPax");

                entity.Property(e => e.PreAtotalPaxAll).HasColumnName("PreATotalPaxAll");

                entity.Property(e => e.PreDelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("PreDelayPerBL");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedPaxPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay120180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay120180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay3060PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay3060PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay60120PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay60120PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver240PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver240PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayUnder30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayUnder30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreOnTimeFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Pyear).HasColumnName("PYear");
            });

            modelBuilder.Entity<RptDelayMonthlyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptDelayMonthlyCal");

                entity.Property(e => e.AblockTime).HasColumnName("ABlockTime");

                entity.Property(e => e.AblockTimeDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("ABlockTimeDiff");

                entity.Property(e => e.AflightCount).HasColumnName("AFlightCount");

                entity.Property(e => e.AflightCountDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("AFlightCountDiff");

                entity.Property(e => e.AflightTime).HasColumnName("AFlightTime");

                entity.Property(e => e.AflightTimeDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("AFlightTimeDiff");

                entity.Property(e => e.AtotalPax).HasColumnName("ATotalPax");

                entity.Property(e => e.AtotalPaxAll).HasColumnName("ATotalPaxAll");

                entity.Property(e => e.AtotalPaxAllDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("ATotalPaxAllDiff");

                entity.Property(e => e.AtotalPaxDiff)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("ATotalPaxDiff");

                entity.Property(e => e.BlockTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay120180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay3060TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.Delay60120TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver180TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver240TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayOver30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("DelayPerBL");

                entity.Property(e => e.DelayPerBldiff)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("DelayPerBLDiff");

                entity.Property(e => e.DelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.DelayPerLegDiff).HasColumnType("numeric(38, 9)");

                entity.Property(e => e.DelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayUnder30TimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedFlightsPerOnTimeDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.DelayedPaxPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.DelayedPaxPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FlightTimeDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay120180PerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FltDelay120180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay3060PerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FltDelay3060PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelay60120PerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FltDelay60120PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver180PerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FltDelayOver180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver240PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayOver30PerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FltDelayOver30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.FltDelayUnder30PerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.FltDelayUnder30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.OnTimeFlightCountDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.OnTimeFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.OnTimeFlightsPerAllDiff).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.PaxDelay120180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelay3060Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelay60120Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelayOver180Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelayOver240Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelayOver30).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PaxDelayOver30Diff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreAblockTime).HasColumnName("PreABlockTime");

                entity.Property(e => e.PreAflightCount).HasColumnName("PreAFlightCount");

                entity.Property(e => e.PreAflightTime).HasColumnName("PreAFlightTime");

                entity.Property(e => e.PreAtotalPax).HasColumnName("PreATotalPax");

                entity.Property(e => e.PreAtotalPaxAll).HasColumnName("PreATotalPaxAll");

                entity.Property(e => e.PreDelayPerBl)
                    .HasColumnType("numeric(24, 12)")
                    .HasColumnName("PreDelayPerBL");

                entity.Property(e => e.PreDelayPerLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.PreDelayedFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedFlightsPerOnTime).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreDelayedPaxPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay120180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay120180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay3060PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay3060PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay60120PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelay60120PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver180PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver180PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver240PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayOver30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayUnder30PerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreFltDelayUnder30PerDelayed).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.PreOnTimeFlightsPerAll).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.TotalPaxAllDiff).HasColumnType("numeric(26, 12)");

                entity.Property(e => e.TotalPaxDiff).HasColumnType("numeric(26, 12)");
            });

            modelBuilder.Entity<RptFdp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFDP");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Flights).HasMaxLength(4000);

                entity.Property(e => e.HfixTime2).HasColumnName("HFixTime2");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.Route).HasMaxLength(4000);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.StadayUtc)
                    .HasColumnType("date")
                    .HasColumnName("STADayUTC");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.StddayUtc)
                    .HasColumnType("date")
                    .HasColumnName("STDDayUTC");
            });

            modelBuilder.Entity<RptFdpitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFDPItem");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.StadayUtc)
                    .HasColumnType("date")
                    .HasColumnName("STADayUTC");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.StddayUtc)
                    .HasColumnType("date")
                    .HasColumnName("STDDayUTC");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.ToAirport).HasMaxLength(255);
            });

            modelBuilder.Entity<RptFdpmonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFDPMonthly");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RptFdpmonthlyPersian>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFDPMonthlyPersian");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Fx300000).HasColumnName("FX300000");

                entity.Property(e => e.Fx300001).HasColumnName("FX300001");

                entity.Property(e => e.Fx300002).HasColumnName("FX300002");

                entity.Property(e => e.Fx300003).HasColumnName("FX300003");

                entity.Property(e => e.Fx300004).HasColumnName("FX300004");

                entity.Property(e => e.Fx300005).HasColumnName("FX300005");

                entity.Property(e => e.Fx300006).HasColumnName("FX300006");

                entity.Property(e => e.Fx300007).HasColumnName("FX300007");

                entity.Property(e => e.Fx300008).HasColumnName("FX300008");

                entity.Property(e => e.Fx300009).HasColumnName("FX300009");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RptFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFlight");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<RptFuelDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelDaily");

                entity.Property(e => e.Date).HasMaxLength(500);

                entity.Property(e => e.DayName).HasMaxLength(255);

                entity.Property(e => e.DistanceKm).HasColumnName("DistanceKM");

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsed).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerDistanceKm).HasColumnName("UpliftPerDistanceKM");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeightDistanceKm).HasColumnName("UpliftPerWeightDistanceKM");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerDistanceKm).HasColumnName("UsedPerDistanceKM");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightDistanceKm).HasColumnName("UsedPerWeightDistanceKM");

                entity.Property(e => e.UsedPerWeightDistanceToneKm).HasColumnName("UsedPerWeightDistanceToneKM");

                entity.Property(e => e.WeightDistanceToneKm).HasColumnName("WeightDistanceToneKM");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelDailyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelDailyCal");

                entity.Property(e => e.ArgStr).HasMaxLength(500);

                entity.Property(e => e.Date).HasMaxLength(500);

                entity.Property(e => e.DayName).HasMaxLength(255);

                entity.Property(e => e.DistanceKm).HasColumnName("DistanceKM");

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsed).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerDistanceKm).HasColumnName("UpliftPerDistanceKM");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeightDistanceKm).HasColumnName("UpliftPerWeightDistanceKM");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedDiff).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedDiffPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerLegPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerPaxPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerWeightPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerDistanceKm).HasColumnName("UsedPerDistanceKM");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightDistanceKm).HasColumnName("UsedPerWeightDistanceKM");

                entity.Property(e => e.UsedPerWeightDistanceToneKm).HasColumnName("UsedPerWeightDistanceToneKM");

                entity.Property(e => e.WeightDistanceToneKm).HasColumnName("WeightDistanceToneKM");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelDailyRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelDailyRegister");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Date).HasMaxLength(500);

                entity.Property(e => e.DayName).HasMaxLength(255);

                entity.Property(e => e.DistanceKm).HasColumnName("DistanceKM");

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerDistanceKm).HasColumnName("UpliftPerDistanceKM");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeightDistanceKm).HasColumnName("UpliftPerWeightDistanceKM");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerDistanceKm).HasColumnName("UsedPerDistanceKM");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightDistanceKm).HasColumnName("UsedPerWeightDistanceKM");

                entity.Property(e => e.WeightDistanceToneKm).HasColumnName("WeightDistanceToneKM");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelDailyRoute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelDailyRoute");

                entity.Property(e => e.Date).HasMaxLength(500);

                entity.Property(e => e.DayName).HasMaxLength(255);

                entity.Property(e => e.DistanceKm).HasColumnName("DistanceKM");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerDistanceKm).HasColumnName("UpliftPerDistanceKM");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeightDistanceKm).HasColumnName("UpliftPerWeightDistanceKM");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerDistanceKm).HasColumnName("UsedPerDistanceKM");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightDistanceKm).HasColumnName("UsedPerWeightDistanceKM");

                entity.Property(e => e.WeightDistanceToneKm).HasColumnName("WeightDistanceToneKM");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelLeg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelLeg");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.CargoUnit).HasMaxLength(1000);

                entity.Property(e => e.CargoUnitId).HasColumnName("CargoUnitID");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DistanceKm).HasColumnName("DistanceKM");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.FreightTone).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FuelUnit).HasMaxLength(1000);

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.PyearMonthName)
                    .HasMaxLength(511)
                    .HasColumnName("PYearMonthName");

                entity.Property(e => e.PyearName)
                    .HasMaxLength(255)
                    .HasColumnName("PYearName");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Remaining).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.Sitatime).HasColumnName("SITATime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TakeoffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.UpLift).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Used).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.WeightDistanceToneKm).HasColumnName("WeightDistanceToneKM");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(18, 6)");
            });

            modelBuilder.Entity<RptFuelMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelMonthly");

                entity.Property(e => e.DistanceKm).HasColumnName("DistanceKM");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(38, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.FpfuelKilo)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("FPFuelKilo");

                entity.Property(e => e.FpfuelPerDistance).HasColumnName("FPFuelPerDistance");

                entity.Property(e => e.FpfuelPerLeg)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("FPFuelPerLeg");

                entity.Property(e => e.FpfuelPerPax)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("FPFuelPerPax");

                entity.Property(e => e.FpfuelPerWeight)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("FPFuelPerWeight");

                entity.Property(e => e.FpfuelPerWeightDistanceToneKm).HasColumnName("FPFuelPerWeightDistanceToneKM");

                entity.Property(e => e.FpfuelPerWeightTone)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("FPFuelPerWeightTone");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsed).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerDistanceKm).HasColumnName("UpliftPerDistanceKM");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeightDistanceKm).HasColumnName("UpliftPerWeightDistanceKM");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerDistanceKm).HasColumnName("UsedPerDistanceKM");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightDistanceKm).HasColumnName("UsedPerWeightDistanceKM");

                entity.Property(e => e.UsedPerWeightDistanceToneKm).HasColumnName("UsedPerWeightDistanceToneKM");

                entity.Property(e => e.UsedPerWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightDistanceToneKm).HasColumnName("WeightDistanceToneKM");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelMonthlyCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelMonthlyCal");

                entity.Property(e => e.ArgStr).HasMaxLength(255);

                entity.Property(e => e.DistanceKm).HasColumnName("DistanceKM");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(38, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.FpfuelKilo)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("FPFuelKilo");

                entity.Property(e => e.FpfuelPerDistance).HasColumnName("FPFuelPerDistance");

                entity.Property(e => e.FpfuelPerLeg)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("FPFuelPerLeg");

                entity.Property(e => e.FpfuelPerPax)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("FPFuelPerPax");

                entity.Property(e => e.FpfuelPerWeight)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("FPFuelPerWeight");

                entity.Property(e => e.FpfuelPerWeightDistanceToneKm).HasColumnName("FPFuelPerWeightDistanceToneKM");

                entity.Property(e => e.FpfuelPerWeightTone)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("FPFuelPerWeightTone");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.PreUsed).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerDistanceKm).HasColumnName("UpliftPerDistanceKM");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeightDistanceKm).HasColumnName("UpliftPerWeightDistanceKM");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedDiff).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedDiffPerLeg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerLegPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerPaxPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPerWeightPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedDiffPercent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerDistanceKm).HasColumnName("UsedPerDistanceKM");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightDistanceKm).HasColumnName("UsedPerWeightDistanceKM");

                entity.Property(e => e.UsedPerWeightDistanceToneKm).HasColumnName("UsedPerWeightDistanceToneKM");

                entity.Property(e => e.UsedPerWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.WeightDistanceToneKm).HasColumnName("WeightDistanceToneKM");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelMonthlyRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelMonthlyRegister");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.DistanceKm).HasColumnName("DistanceKM");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerDistanceKm).HasColumnName("UpliftPerDistanceKM");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeightDistanceKm).HasColumnName("UpliftPerWeightDistanceKM");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerDistanceKm).HasColumnName("UsedPerDistanceKM");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightDistanceKm).HasColumnName("UsedPerWeightDistanceKM");

                entity.Property(e => e.WeightDistanceToneKm).HasColumnName("WeightDistanceToneKM");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptFuelMonthlyRoute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptFuelMonthlyRoute");

                entity.Property(e => e.ArgStr).HasMaxLength(255);

                entity.Property(e => e.DistanceKm).HasColumnName("DistanceKM");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxWeightTone).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.Route2).HasMaxLength(510);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.Uplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UpliftKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerDistanceKm).HasColumnName("UpliftPerDistanceKM");

                entity.Property(e => e.UpliftPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UpliftPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UpliftPerWeightDistanceKm).HasColumnName("UpliftPerWeightDistanceKM");

                entity.Property(e => e.Used).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedKilo).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloAvg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedKiloPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerDistanceKm).HasColumnName("UsedPerDistanceKM");

                entity.Property(e => e.UsedPerLeg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerLegAvg).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.UsedPerPax).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerPaxAvg).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeight).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.UsedPerWeightDistanceKm).HasColumnName("UsedPerWeightDistanceKM");

                entity.Property(e => e.WeightDistanceToneKm).HasColumnName("WeightDistanceToneKM");

                entity.Property(e => e.WeightTone).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<RptNoFdp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptNoFDP");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Fx).HasColumnName("FX");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RptNoFdpmonthlyPersian>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptNoFDPMonthlyPersian");

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Fx).HasColumnName("FX");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RptRedirect>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptRedirect");

                entity.Property(e => e.BlockOff).HasColumnType("datetime");

                entity.Property(e => e.BlockOn).HasColumnType("datetime");

                entity.Property(e => e.DateFdp)
                    .HasColumnType("date")
                    .HasColumnName("DateFDP");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.StddayLocal)
                    .HasColumnType("date")
                    .HasColumnName("STDDayLocal");

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<RptReposition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RptReposition");

                entity.Property(e => e.DateFdp)
                    .HasColumnType("date")
                    .HasColumnName("DateFDP");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Flights)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.Route)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RvAircraft>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RV_Aircraft");

                entity.Property(e => e.FuelCapacity).HasMaxLength(255);

                entity.Property(e => e.FuelUnit).HasMaxLength(255);

                entity.Property(e => e.GanttShowOrder).HasMaxLength(255);

                entity.Property(e => e.Id).HasMaxLength(255);

                entity.Property(e => e.MaxCargoWeight).HasMaxLength(255);

                entity.Property(e => e.Owner).HasMaxLength(255);

                entity.Property(e => e.Real).HasMaxLength(255);

                entity.Property(e => e.Reg).HasMaxLength(255);

                entity.Property(e => e.Seat).HasMaxLength(255);

                entity.Property(e => e.Type).HasMaxLength(255);
            });

            modelBuilder.Entity<RvAssign>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RV_Assign");

                entity.Property(e => e.Crew).HasMaxLength(255);

                entity.Property(e => e.DateUtc)
                    .HasMaxLength(255)
                    .HasColumnName("DateUTC");

                entity.Property(e => e.Id).HasMaxLength(255);

                entity.Property(e => e.JobType).HasMaxLength(255);

                entity.Property(e => e.PlanDesc).HasMaxLength(255);

                entity.Property(e => e.Rank).HasMaxLength(255);

                entity.Property(e => e.Route).HasMaxLength(255);

                entity.Property(e => e.RouteGroup).HasMaxLength(255);

                entity.Property(e => e.Scheduler).HasMaxLength(255);
            });

            modelBuilder.Entity<RvCrew>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RV_Crew");

                entity.Property(e => e.Active).HasMaxLength(255);

                entity.Property(e => e.Actype)
                    .HasMaxLength(255)
                    .HasColumnName("ACType");

                entity.Property(e => e.Additional).HasMaxLength(255);

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.AddressRegion).HasMaxLength(255);

                entity.Property(e => e.BaseStation).HasMaxLength(255);

                entity.Property(e => e.BirthDate).HasMaxLength(255);

                entity.Property(e => e.BirthPlace).HasMaxLength(255);

                entity.Property(e => e.BoxNo).HasMaxLength(255);

                entity.Property(e => e.CellPhone).HasMaxLength(255);

                entity.Property(e => e.Cmcexpire)
                    .HasMaxLength(255)
                    .HasColumnName("CMCExpire");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.CrewType).HasMaxLength(255);

                entity.Property(e => e.DigitCode).HasMaxLength(255);

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.EmployeeNo).HasMaxLength(255);

                entity.Property(e => e.Faddress).HasMaxLength(255);

                entity.Property(e => e.FatherName).HasMaxLength(255);

                entity.Property(e => e.Fax).HasMaxLength(255);

                entity.Property(e => e.Ffname).HasMaxLength(255);

                entity.Property(e => e.Flname)
                    .HasMaxLength(255)
                    .HasColumnName("FLName");

                entity.Property(e => e.Fname)
                    .HasMaxLength(255)
                    .HasColumnName("FName");

                entity.Property(e => e.FscheduleName)
                    .HasMaxLength(255)
                    .HasColumnName("FScheduleName");

                entity.Property(e => e.Gender).HasMaxLength(255);

                entity.Property(e => e.HireDate).HasMaxLength(255);

                entity.Property(e => e.Id).HasMaxLength(255);

                entity.Property(e => e.IdNo).HasMaxLength(255);

                entity.Property(e => e.InstructorType).HasMaxLength(255);

                entity.Property(e => e.JobPosition).HasMaxLength(255);

                entity.Property(e => e.JobShift).HasMaxLength(255);

                entity.Property(e => e.L4expire)
                    .HasMaxLength(255)
                    .HasColumnName("L4Expire");

                entity.Property(e => e.LastDoctor).HasMaxLength(255);

                entity.Property(e => e.LastFltTime).HasMaxLength(255);

                entity.Property(e => e.LicenceExpire).HasMaxLength(255);

                entity.Property(e => e.LicenceNo).HasMaxLength(255);

                entity.Property(e => e.Lname)
                    .HasMaxLength(255)
                    .HasColumnName("LName");

                entity.Property(e => e.MedicalAudio).HasMaxLength(255);

                entity.Property(e => e.MedicalCheckup).HasMaxLength(255);

                entity.Property(e => e.MedicalEcg)
                    .HasMaxLength(255)
                    .HasColumnName("MedicalECG");

                entity.Property(e => e.MedicalExpire).HasMaxLength(255);

                entity.Property(e => e.MedicalHistory).HasMaxLength(255);

                entity.Property(e => e.MultiType).HasMaxLength(255);

                entity.Property(e => e.NationalNo).HasMaxLength(255);

                entity.Property(e => e.Native).HasMaxLength(255);

                entity.Property(e => e.PassportExpire).HasMaxLength(255);

                entity.Property(e => e.PassportNo).HasMaxLength(255);

                entity.Property(e => e.Phone).HasMaxLength(255);

                entity.Property(e => e.ProductiveDate).HasMaxLength(255);

                entity.Property(e => e.ProficiencyExpire).HasMaxLength(255);

                entity.Property(e => e.RampPassExpire).HasMaxLength(255);

                entity.Property(e => e.RampPassNo).HasMaxLength(255);

                entity.Property(e => e.ScheduleName).HasMaxLength(255);

                entity.Property(e => e.Seniority).HasMaxLength(255);

                entity.Property(e => e.SetGroup).HasMaxLength(255);

                entity.Property(e => e.Simulator8MonthCheck).HasMaxLength(255);

                entity.Property(e => e.SimulatorAnnual).HasMaxLength(255);

                entity.Property(e => e.SimulatorAnnualCheck).HasMaxLength(255);

                entity.Property(e => e.SimulatorLastCheck).HasMaxLength(255);

                entity.Property(e => e.SimulatorNextCheck).HasMaxLength(255);

                entity.Property(e => e.Skill).HasMaxLength(255);

                entity.Property(e => e.TrainingSeatLos)
                    .HasMaxLength(255)
                    .HasColumnName("Training_Seat_Los");

                entity.Property(e => e.TrainingSeatRev)
                    .HasMaxLength(255)
                    .HasColumnName("Training_Seat_Rev");

                entity.Property(e => e.TrainingSeatTre)
                    .HasMaxLength(255)
                    .HasColumnName("Training_Seat_Tre_");
            });

            modelBuilder.Entity<RvCrewRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RV_CrewRpt");

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .HasColumnName("CODE");

                entity.Property(e => e.Fn)
                    .HasMaxLength(255)
                    .HasColumnName("FN");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(255)
                    .HasColumnName("PDATE");

                entity.Property(e => e.Sch)
                    .HasMaxLength(255)
                    .HasColumnName("SCH");
            });

            modelBuilder.Entity<RvDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RV_Daily");

                entity.Property(e => e.Adl)
                    .HasMaxLength(255)
                    .HasColumnName("ADL");

                entity.Property(e => e.Amount).HasMaxLength(255);

                entity.Property(e => e.Arr).HasMaxLength(255);

                entity.Property(e => e.Bag).HasMaxLength(255);

                entity.Property(e => e.Block).HasMaxLength(255);

                entity.Property(e => e.Cargo).HasMaxLength(255);

                entity.Property(e => e.Chd)
                    .HasMaxLength(255)
                    .HasColumnName("CHD");

                entity.Property(e => e.Currency).HasMaxLength(255);

                entity.Property(e => e.Date).HasMaxLength(255);

                entity.Property(e => e.Dep).HasMaxLength(255);

                entity.Property(e => e.F10)
                    .HasMaxLength(255)
                    .HasColumnName("f10");

                entity.Property(e => e.F12)
                    .HasMaxLength(255)
                    .HasColumnName("f12");

                entity.Property(e => e.F18)
                    .HasMaxLength(255)
                    .HasColumnName("f18");

                entity.Property(e => e.F20)
                    .HasMaxLength(255)
                    .HasColumnName("f20");

                entity.Property(e => e.F27)
                    .HasMaxLength(255)
                    .HasColumnName("f27");

                entity.Property(e => e.F32)
                    .HasMaxLength(255)
                    .HasColumnName("f32");

                entity.Property(e => e.F34)
                    .HasMaxLength(255)
                    .HasColumnName("f34");

                entity.Property(e => e.F6)
                    .HasMaxLength(255)
                    .HasColumnName("f6");

                entity.Property(e => e.Fix).HasMaxLength(255);

                entity.Property(e => e.Flight).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.Inf)
                    .HasMaxLength(255)
                    .HasColumnName("INF");

                entity.Property(e => e.Land)
                    .HasMaxLength(255)
                    .HasColumnName("Land.");

                entity.Property(e => e.No).HasMaxLength(255);

                entity.Property(e => e.OffB)
                    .HasMaxLength(255)
                    .HasColumnName("Off.B");

                entity.Property(e => e.OnB)
                    .HasMaxLength(255)
                    .HasColumnName("On.B");

                entity.Property(e => e.Reg).HasMaxLength(255);

                entity.Property(e => e.Sta)
                    .HasMaxLength(255)
                    .HasColumnName("STA");

                entity.Property(e => e.Station).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.Std)
                    .HasMaxLength(255)
                    .HasColumnName("STD");

                entity.Property(e => e.TOff)
                    .HasMaxLength(255)
                    .HasColumnName("T.off");

                entity.Property(e => e.Total).HasMaxLength(255);

                entity.Property(e => e.Total1).HasMaxLength(255);

                entity.Property(e => e.Trip).HasMaxLength(255);

                entity.Property(e => e.UpLift).HasMaxLength(255);
            });

            modelBuilder.Entity<RvDelivery>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RV_Delivery");

                entity.Property(e => e.Crew).HasMaxLength(255);

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.Id).HasMaxLength(255);

                entity.Property(e => e.PeriodId).HasMaxLength(255);

                entity.Property(e => e.Revision).HasMaxLength(255);

                entity.Property(e => e.Web).HasMaxLength(255);
            });

            modelBuilder.Entity<RvFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RV_Flight");

                entity.Property(e => e.Acreg)
                    .HasMaxLength(255)
                    .HasColumnName("ACReg");

                entity.Property(e => e.Actype)
                    .HasMaxLength(255)
                    .HasColumnName("ACType");

                entity.Property(e => e.AlternateStation).HasMaxLength(255);

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.Ata)
                    .HasMaxLength(255)
                    .HasColumnName("ATA");

                entity.Property(e => e.Atd)
                    .HasMaxLength(255)
                    .HasColumnName("ATD");

                entity.Property(e => e.BagPiece).HasMaxLength(255);

                entity.Property(e => e.Baggage).HasMaxLength(255);

                entity.Property(e => e.CargoPiece).HasMaxLength(255);

                entity.Property(e => e.CargoWeight).HasMaxLength(255);

                entity.Property(e => e.DateUtc)
                    .HasMaxLength(255)
                    .HasColumnName("DateUTC");

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.Female).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.FuelDefuel).HasMaxLength(255);

                entity.Property(e => e.FuelRemain).HasMaxLength(255);

                entity.Property(e => e.FuelTaxi).HasMaxLength(255);

                entity.Property(e => e.FuelTotal).HasMaxLength(255);

                entity.Property(e => e.FuelTrip).HasMaxLength(255);

                entity.Property(e => e.FuelUnit).HasMaxLength(255);

                entity.Property(e => e.FuelUpLift).HasMaxLength(255);

                entity.Property(e => e.Male).HasMaxLength(255);

                entity.Property(e => e.OffBlock).HasMaxLength(255);

                entity.Property(e => e.OnBlock).HasMaxLength(255);

                entity.Property(e => e.OnRunway).HasMaxLength(255);

                entity.Property(e => e.OverPax).HasMaxLength(255);

                entity.Property(e => e.Parking).HasMaxLength(255);

                entity.Property(e => e.PaxAdl)
                    .HasMaxLength(255)
                    .HasColumnName("PaxADL");

                entity.Property(e => e.PaxChd)
                    .HasMaxLength(255)
                    .HasColumnName("PaxCHD");

                entity.Property(e => e.PaxInf)
                    .HasMaxLength(255)
                    .HasColumnName("PaxINF");

                entity.Property(e => e.Paxstation)
                    .HasMaxLength(255)
                    .HasColumnName("PAXStation");

                entity.Property(e => e.SaveTime).HasMaxLength(255);

                entity.Property(e => e.Sta)
                    .HasMaxLength(255)
                    .HasColumnName("STA");

                entity.Property(e => e.StationIncomeCurrency).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.Std)
                    .HasMaxLength(255)
                    .HasColumnName("STD");

                entity.Property(e => e.Tag1).HasMaxLength(255);

                entity.Property(e => e.Tag2).HasMaxLength(255);

                entity.Property(e => e.Tag3).HasMaxLength(255);

                entity.Property(e => e.TakeOff).HasMaxLength(255);

                entity.Property(e => e.TotalSeats).HasMaxLength(255);
            });

            modelBuilder.Entity<RvFlightInformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RV_FlightInformation");

                entity.Property(e => e.Acreg)
                    .HasMaxLength(255)
                    .HasColumnName("ACReg");

                entity.Property(e => e.Actype)
                    .HasMaxLength(255)
                    .HasColumnName("ACType");

                entity.Property(e => e.AlternateStation).HasMaxLength(255);

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.Ata)
                    .HasMaxLength(255)
                    .HasColumnName("ATA");

                entity.Property(e => e.Atd)
                    .HasMaxLength(255)
                    .HasColumnName("ATD");

                entity.Property(e => e.BagPiece).HasMaxLength(255);

                entity.Property(e => e.Baggage).HasMaxLength(255);

                entity.Property(e => e.CargoPiece).HasMaxLength(255);

                entity.Property(e => e.CargoWeight).HasMaxLength(255);

                entity.Property(e => e.DateUtc)
                    .HasMaxLength(255)
                    .HasColumnName("DateUTC");

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.Female).HasMaxLength(255);

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.FuelDefuel).HasMaxLength(255);

                entity.Property(e => e.FuelRemain).HasMaxLength(255);

                entity.Property(e => e.FuelTaxi).HasMaxLength(255);

                entity.Property(e => e.FuelTotal).HasMaxLength(255);

                entity.Property(e => e.FuelTrip).HasMaxLength(255);

                entity.Property(e => e.FuelUnit).HasMaxLength(255);

                entity.Property(e => e.FuelUpLift).HasMaxLength(255);

                entity.Property(e => e.Male).HasMaxLength(255);

                entity.Property(e => e.OffBlock).HasMaxLength(255);

                entity.Property(e => e.OnBlock).HasMaxLength(255);

                entity.Property(e => e.OnRunway).HasMaxLength(255);

                entity.Property(e => e.OverPax).HasMaxLength(255);

                entity.Property(e => e.Parking).HasMaxLength(255);

                entity.Property(e => e.PaxAdl)
                    .HasMaxLength(255)
                    .HasColumnName("PaxADL");

                entity.Property(e => e.PaxChd)
                    .HasMaxLength(255)
                    .HasColumnName("PaxCHD");

                entity.Property(e => e.PaxInf)
                    .HasMaxLength(255)
                    .HasColumnName("PaxINF");

                entity.Property(e => e.Paxstation)
                    .HasMaxLength(255)
                    .HasColumnName("PAXStation");

                entity.Property(e => e.SaveTime).HasMaxLength(255);

                entity.Property(e => e.Sta)
                    .HasMaxLength(255)
                    .HasColumnName("STA");

                entity.Property(e => e.StationIncomeCurrency).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.Std)
                    .HasMaxLength(255)
                    .HasColumnName("STD");

                entity.Property(e => e.Tag1).HasMaxLength(255);

                entity.Property(e => e.Tag2).HasMaxLength(255);

                entity.Property(e => e.Tag3).HasMaxLength(255);

                entity.Property(e => e.TakeOff).HasMaxLength(255);

                entity.Property(e => e.TotalSeats).HasMaxLength(255);
            });

            modelBuilder.Entity<RvLeg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RV_Leg");

                entity.Property(e => e.Acreg)
                    .HasMaxLength(255)
                    .HasColumnName("ACReg");

                entity.Property(e => e.Actype)
                    .HasMaxLength(255)
                    .HasColumnName("ACType");

                entity.Property(e => e.ArrStn).HasMaxLength(255);

                entity.Property(e => e.ArrTime).HasMaxLength(255);

                entity.Property(e => e.ArrTimeLcl)
                    .HasMaxLength(255)
                    .HasColumnName("ArrTimeLCL");

                entity.Property(e => e.DateUtc)
                    .HasMaxLength(255)
                    .HasColumnName("DateUTC");

                entity.Property(e => e.DepStn).HasMaxLength(255);

                entity.Property(e => e.DepTime).HasMaxLength(255);

                entity.Property(e => e.DepTimeLcl)
                    .HasMaxLength(255)
                    .HasColumnName("DepTimeLCL");

                entity.Property(e => e.FltNo).HasMaxLength(255);

                entity.Property(e => e.Sta)
                    .HasMaxLength(255)
                    .HasColumnName("STA");

                entity.Property(e => e.Stc)
                    .HasMaxLength(255)
                    .HasColumnName("STC");

                entity.Property(e => e.Std)
                    .HasMaxLength(255)
                    .HasColumnName("STD");
            });

            modelBuilder.Entity<RvTraining>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RV_Training");

                entity.Property(e => e.Actype)
                    .HasMaxLength(255)
                    .HasColumnName("ACType");

                entity.Property(e => e.CourseName).HasMaxLength(255);

                entity.Property(e => e.Crew).HasMaxLength(255);

                entity.Property(e => e.CrewType).HasMaxLength(255);

                entity.Property(e => e.Date).HasMaxLength(255);

                entity.Property(e => e.Grade).HasMaxLength(255);

                entity.Property(e => e.ScheduleName).HasMaxLength(255);

                entity.Property(e => e.StartDate).HasMaxLength(255);

                entity.Property(e => e.Teacher).HasMaxLength(255);
            });

            modelBuilder.Entity<Sc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("_SC");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Smsgroup>(entity =>
            {
                entity.ToTable("SMSGroup");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Smshistory>(entity =>
            {
                entity.ToTable("SMSHistory");

                entity.HasIndex(e => e.Sender, "IDX_SMSHistory_Sender");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.Delivery)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RecMobile)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RecName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Ref)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ResDate).HasColumnType("datetime");

                entity.Property(e => e.ResFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ResStr)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sender)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Text)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<State>(entity =>
            {
                entity.ToTable("State");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<SumActiveCourse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumActiveCourse");
            });

            modelBuilder.Entity<SumBoxTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumBoxTime");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Fdp).HasColumnName("FDP");
            });

            modelBuilder.Entity<SumCarelessEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumCarelessEmployee");
            });

            modelBuilder.Entity<SumCarelessEmployeeTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumCarelessEmployeeTotal");
            });

            modelBuilder.Entity<SumCertificateStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumCertificateStatus");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<SumCertificateType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumCertificateType");

                entity.Property(e => e.CourseTypeTitle).HasMaxLength(500);
            });

            modelBuilder.Entity<SumEmployeeAge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumEmployeeAge");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<SumEmployeeDateAlert>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumEmployeeDateAlert");

                entity.Property(e => e.Caoexpired).HasColumnName("CAOExpired");

                entity.Property(e => e.Caoexpiring).HasColumnName("CAOExpiring");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Ndtexpired).HasColumnName("NDTExpired");

                entity.Property(e => e.Ndtexpiring).HasColumnName("NDTExpiring");
            });

            modelBuilder.Entity<SumEmployeeDegree>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumEmployeeDegree");

                entity.Property(e => e.EducationDegree).HasMaxLength(1000);
            });

            modelBuilder.Entity<SumEmployeeExp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumEmployeeExp");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<SumEmployeeJobGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumEmployeeJobGroup");

                entity.Property(e => e.GroupCode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.RootTitle).HasMaxLength(500);
            });

            modelBuilder.Entity<SumEmployeeLibraryAlert>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumEmployeeLibraryAlert");
            });

            modelBuilder.Entity<SumEmployeeLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumEmployeeLocation");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Title)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<SumEmployeeMaritalStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumEmployeeMaritalStatus");

                entity.Property(e => e.MaritalStatus).HasMaxLength(1000);
            });

            modelBuilder.Entity<SumEmployeeSex>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumEmployeeSex");

                entity.Property(e => e.Sex).HasMaxLength(1000);
            });

            modelBuilder.Entity<SumEmployeeStudyField>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumEmployeeStudyField");

                entity.Property(e => e.StudyField).HasMaxLength(1000);
            });

            modelBuilder.Entity<SumFlightDelay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumFlightDelay");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");
            });

            modelBuilder.Entity<SumLibraryAddedByMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumLibraryAddedByMonth");

                entity.Property(e => e.MonthName)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<SumLibraryDownloadByMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SumLibraryDownloadByMonth");

                entity.Property(e => e.MonthName)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<SunTime>(entity =>
            {
                entity.ToTable("SunTime");

                entity.Property(e => e.AstronomicalTwilightBegin).HasColumnType("datetime");

                entity.Property(e => e.AstronomicalTwilightEnd).HasColumnType("datetime");

                entity.Property(e => e.CivilTwilightBegin).HasColumnType("datetime");

                entity.Property(e => e.CivilTwilightEnd).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.NauticalTwilightBegin).HasColumnType("datetime");

                entity.Property(e => e.NauticalTwilightEnd).HasColumnType("datetime");

                entity.Property(e => e.SolarNoon).HasColumnType("datetime");

                entity.Property(e => e.Sunrise).HasColumnType("datetime");

                entity.Property(e => e.Sunset).HasColumnType("datetime");

                entity.Property(e => e.Toffset).HasColumnName("TOffset");
            });

            modelBuilder.Entity<TableBlockTime>(entity =>
            {
                entity.ToTable("TableBlockTime");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.HasOne(d => d.Fdp)
                    .WithMany(p => p.TableBlockTimes)
                    .HasForeignKey(d => d.Fdpid)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_tableblocktime_fdp");
            });

            modelBuilder.Entity<TableCrewTime>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Cdate })
                    .HasName("PK__TableCre__3214EC0761A1F1AC");

                entity.ToTable("TableCrewTime");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");

                entity.Property(e => e.CyearFlight).HasColumnName("CYear_Flight");

                entity.Property(e => e.Day14Duty).HasColumnName("Day14_Duty");

                entity.Property(e => e.Day14Flight).HasColumnName("Day14_Flight");

                entity.Property(e => e.Day1Duty).HasColumnName("Day1_Duty");

                entity.Property(e => e.Day1Flight).HasColumnName("Day1_Flight");

                entity.Property(e => e.Day28Duty).HasColumnName("Day28_Duty");

                entity.Property(e => e.Day28Flight).HasColumnName("Day28_Flight");

                entity.Property(e => e.Day7Duty).HasColumnName("Day7_Duty");

                entity.Property(e => e.Day7Flight).HasColumnName("Day7_Flight");

                entity.Property(e => e.YearFlight).HasColumnName("Year_Flight");
            });

            modelBuilder.Entity<TableDutyFdp>(entity =>
            {
                entity.HasKey(e => new { e.Fdpid, e.Cdate })
                    .HasName("PK__TableDut__540335BF91B8B812");

                entity.ToTable("TableDutyFDP");

                entity.HasIndex(e => e.CrewId, "idx_tdf_crewid");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.Guid).HasColumnName("GUID");
            });

            modelBuilder.Entity<TableFlightFdp>(entity =>
            {
                entity.HasKey(e => new { e.FdpitemId, e.Cdate })
                    .HasName("PK__TableDut__540335BF91B8B812_copy1");

                entity.ToTable("TableFlightFDP");

                entity.HasIndex(e => e.CrewId, "idx_tdf_crewid_copy1");

                entity.Property(e => e.FdpitemId).HasColumnName("FDPItemId");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.Guid).HasColumnName("GUID");
            });

            modelBuilder.Entity<TempAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempAirport");

                entity.Property(e => e.Continent)
                    .HasMaxLength(255)
                    .HasColumnName("continent");

                entity.Property(e => e.ElevationFt)
                    .HasMaxLength(255)
                    .HasColumnName("elevation_ft");

                entity.Property(e => e.GpsCode)
                    .HasMaxLength(255)
                    .HasColumnName("gps_code");

                entity.Property(e => e.HomeLink)
                    .HasMaxLength(255)
                    .HasColumnName("home_link");

                entity.Property(e => e.IataCode)
                    .HasMaxLength(255)
                    .HasColumnName("iata_code");

                entity.Property(e => e.Id)
                    .HasMaxLength(255)
                    .HasColumnName("id");

                entity.Property(e => e.Ident)
                    .HasMaxLength(255)
                    .HasColumnName("ident");

                entity.Property(e => e.IsoCountry)
                    .HasMaxLength(255)
                    .HasColumnName("iso_country");

                entity.Property(e => e.IsoRegion)
                    .HasMaxLength(255)
                    .HasColumnName("iso_region");

                entity.Property(e => e.Keywords)
                    .HasMaxLength(255)
                    .HasColumnName("keywords");

                entity.Property(e => e.LatitudeDeg)
                    .HasMaxLength(255)
                    .HasColumnName("latitude_deg");

                entity.Property(e => e.LocalCode)
                    .HasMaxLength(255)
                    .HasColumnName("local_code");

                entity.Property(e => e.LongitudeDeg)
                    .HasMaxLength(255)
                    .HasColumnName("longitude_deg");

                entity.Property(e => e.Municipality)
                    .HasMaxLength(255)
                    .HasColumnName("municipality");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.ScheduledService)
                    .HasMaxLength(255)
                    .HasColumnName("scheduled_service");

                entity.Property(e => e.Type)
                    .HasMaxLength(255)
                    .HasColumnName("type");

                entity.Property(e => e.WikipediaLink)
                    .HasMaxLength(255)
                    .HasColumnName("wikipedia_link");
            });

            modelBuilder.Entity<TempGunt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TempGunt");

                entity.Property(e => e.ActualFlightHoffBlock).HasColumnName("ActualFlightHOffBlock");

                entity.Property(e => e.ActualFlightHtakeoff).HasColumnName("ActualFlightHTakeoff");

                entity.Property(e => e.ActualFlightMoffBlock)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMOffBlock");

                entity.Property(e => e.ActualFlightMtakeoff)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMTakeoff");

                entity.Property(e => e.AircraftType)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CancelReason).HasMaxLength(1000);

                entity.Property(e => e.CancelRemark).HasMaxLength(500);

                entity.Property(e => e.CargoUnit).HasMaxLength(1000);

                entity.Property(e => e.CargoUnitId).HasColumnName("CargoUnitID");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.CpcrewId).HasColumnName("CPCrewId");

                entity.Property(e => e.Cpdh).HasColumnName("CPDH");

                entity.Property(e => e.Cpfdpid).HasColumnName("CPFDPId");

                entity.Property(e => e.CpfdpitemId).HasColumnName("CPFDPItemId");

                entity.Property(e => e.CpflightTypeId).HasColumnName("CPFlightTypeId");

                entity.Property(e => e.Cpinstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPInstructor");

                entity.Property(e => e.Cpisccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPISCCM");

                entity.Property(e => e.Cpp1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP1");

                entity.Property(e => e.Cpp2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP2");

                entity.Property(e => e.CppositionId).HasColumnName("CPPositionId");

                entity.Property(e => e.Cpregister)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPRegister");

                entity.Property(e => e.Cpsccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPSCCM");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.Duration)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("duration");

                entity.Property(e => e.FlightGroupId).HasColumnName("FlightGroupID");

                entity.Property(e => e.FlightHplanned).HasColumnName("FlightHPlanned");

                entity.Property(e => e.FlightMplanned).HasColumnName("FlightMPlanned");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan).HasMaxLength(500);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FlightStatusBgColor).HasMaxLength(255);

                entity.Property(e => e.FlightStatusClass).HasMaxLength(255);

                entity.Property(e => e.FlightStatusColor).HasMaxLength(255);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FpflightHh).HasColumnName("FPFlightHH");

                entity.Property(e => e.FpflightMm).HasColumnName("FPFlightMM");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.FromAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FromAirportName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FuelActual).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelPlanned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnit).HasMaxLength(1000);

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.FuelVariance).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.Gwland)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("GWLand");

                entity.Property(e => e.Gwto)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("GWTO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Jlblhh).HasColumnName("JLBLHH");

                entity.Property(e => e.Jlblmm).HasColumnName("JLBLMM");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LinkedFlightNumber).HasMaxLength(50);

                entity.Property(e => e.LinkedReasonTitle).HasMaxLength(1000);

                entity.Property(e => e.LinkedRemark).HasMaxLength(500);

                entity.Property(e => e.Notes)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.Osta)
                    .HasColumnType("datetime")
                    .HasColumnName("OSTA");

                entity.Property(e => e.OtoAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OToAirportIATA");

                entity.Property(e => e.OtoAirportId).HasColumnName("OToAirportId");

                entity.Property(e => e.OtypeId).HasColumnName("OTypeId");

                entity.Property(e => e.Pflr).HasColumnName("PFLR");

                entity.Property(e => e.Progress).HasColumnName("progress");

                entity.Property(e => e.RampDate).HasColumnType("datetime");

                entity.Property(e => e.RampReason).HasMaxLength(1000);

                entity.Property(e => e.RampRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RedirectDate).HasColumnType("datetime");

                entity.Property(e => e.RedirectReason).HasMaxLength(1000);

                entity.Property(e => e.RedirectRemark).HasMaxLength(500);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Sitatime).HasColumnName("SITATime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Staplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STAPlanned");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("startDate");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Stdplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STDPlanned");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TaskId).HasColumnName("taskId");

                entity.Property(e => e.TaskName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("taskName");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.ToAirportName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<TempUser>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Dep)
                    .HasMaxLength(255)
                    .HasColumnName("DEP");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(255)
                    .HasColumnName("MOBILE");

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.Pid)
                    .HasMaxLength(255)
                    .HasColumnName("PID");

                entity.Property(e => e.Username).HasMaxLength(255);
            });

            modelBuilder.Entity<Tempname>(entity =>
            {
                entity.ToTable("_tempname");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.FirstName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Nid)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NID");
            });

            modelBuilder.Entity<ThirdPartySyncHistory>(entity =>
            {
                entity.ToTable("ThirdPartySyncHistory");

                entity.Property(e => e.App)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.DateSync).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tolndcard>(entity =>
            {
                entity.ToTable("TOLNDCard");

                entity.Property(e => e.Ac)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("AC");

                entity.Property(e => e.ActLandingWeight)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ai)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("AI");

                entity.Property(e => e.App)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("APP");

                entity.Property(e => e.Atemp)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ATEMP");

                entity.Property(e => e.Cg)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CG");

                entity.Property(e => e.Cloud)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Ctime)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CTime");

                entity.Property(e => e.DateUpdate)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DewP)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Fe)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("FE");

                entity.Property(e => e.Ferp)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FERP");

                entity.Property(e => e.Flap)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FuelToAlternate)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Information)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.JldatePicapproved).HasColumnName("JLDatePICApproved");

                entity.Property(e => e.JlsignedBy)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("JLSignedBy");

                entity.Property(e => e.Lda)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LDA");

                entity.Property(e => e.Mas)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MAS");

                entity.Property(e => e.Merp)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MERP");

                entity.Property(e => e.Nerp)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("NERP");

                entity.Property(e => e.Qnh)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("QNH");

                entity.Property(e => e.Rw)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("RW");

                entity.Property(e => e.Rwinuse)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("RWINUSE");

                entity.Property(e => e.StabTrim)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Star)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("STAR");

                entity.Property(e => e.Ta)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TA");

                entity.Property(e => e.Temp)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Tl)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TL");

                entity.Property(e => e.Tofuel)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TOFuel");

                entity.Property(e => e.Toweight)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TOWeight");

                entity.Property(e => e.Type)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.User)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.V1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.V2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Vclean)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("VCLEAN");

                entity.Property(e => e.Verf)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Vflap)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("VFLAP");

                entity.Property(e => e.Vga)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("VGA");

                entity.Property(e => e.Visibility)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Vr)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Vslat)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("VSLAT");

                entity.Property(e => e.Wind)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Wxcondition)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("WXCondition");

                entity.Property(e => e.Zfw)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ZFW");
            });

            modelBuilder.Entity<Trgtest>(entity =>
            {
                entity.ToTable("_trgtest");

                entity.Property(e => e.Str)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("STR");
            });

            modelBuilder.Entity<UmUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UM_Users");

                entity.Property(e => e.Address)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CaoCardNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FaxTelNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkGroup).HasColumnName("fkGroup");

                entity.Property(e => e.FkLocationId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fkLocationID");

                entity.Property(e => e.FkRootLocation)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fkRootLocation");

                entity.Property(e => e.FkShifts)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("fkShifts");

                entity.Property(e => e.FkdepartmentsLocation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FKDepartmentsLocation");

                entity.Property(e => e.Fkpost).HasColumnName("FKPost");

                entity.Property(e => e.ICalanderTypeNdt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("I_Calander_Type_NDT");

                entity.Property(e => e.IntervalNdt).HasColumnName("IntervalNDT");

                entity.Property(e => e.IsFinancialManager)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IsMrfapprover)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IsMRFApprover");

                entity.Property(e => e.IsQaManager)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IsQc).HasColumnName("IsQC");

                entity.Property(e => e.IssueDateNdt).HasColumnName("IssueDateNDT");

                entity.Property(e => e.LastCheckUp).HasColumnName("LastCheckUP");

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NationalCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ndtnumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NDTNumber");

                entity.Property(e => e.NextCheckUp).HasColumnName("NextCheckUP");

                entity.Property(e => e.Nickname)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PassportNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PersonnelId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PkUser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pkUser");

                entity.Property(e => e.Remark)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RoomNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sex)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Stamp)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StampNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UpdBl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UpdBL");

                entity.Property(e => e.Des)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DES");

                entity.Property(e => e.Desid).HasColumnName("DESID");

                entity.Property(e => e.Hh).HasColumnName("HH");

                entity.Property(e => e.Mm).HasColumnName("MM");

                entity.Property(e => e.Org)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ORG");

                entity.Property(e => e.Orgid).HasColumnName("ORGID");
            });

            modelBuilder.Entity<UpdatedPlanFlight>(entity =>
            {
                entity.Property(e => e.Date).HasColumnType("date");
            });

            modelBuilder.Entity<Updbl2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("updbl2");

                entity.Property(e => e.Des)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DES");

                entity.Property(e => e.Desid).HasColumnName("DESID");

                entity.Property(e => e.Hh).HasColumnName("HH");

                entity.Property(e => e.Mm).HasColumnName("MM");

                entity.Property(e => e.Org)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ORG");

                entity.Property(e => e.Orgid).HasColumnName("ORGID");
            });

            modelBuilder.Entity<UserActivity>(entity =>
            {
                entity.ToTable("UserActivity");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Key)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Url).HasMaxLength(500);
            });

            modelBuilder.Entity<UserActivityMenuHit>(entity =>
            {
                entity.ToTable("UserActivityMenuHit");

                entity.Property(e => e.DateLastHit).HasColumnType("datetime");

                entity.Property(e => e.Key).HasMaxLength(500);
            });

            modelBuilder.Entity<UserExt>(entity =>
            {
                entity.ToTable("UserExt");

                entity.Property(e => e.Id).HasMaxLength(128);

                entity.Property(e => e.FirstName).HasMaxLength(500);

                entity.Property(e => e.LastName).HasMaxLength(500);

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.UserExt)
                    .HasForeignKey<UserExt>(d => d.Id)
                    .HasConstraintName("fk_ext_users");
            });

            modelBuilder.Entity<UserLogin>(entity =>
            {
                entity.ToTable("UserLogin");

                entity.Property(e => e.DateAction).HasColumnType("datetime");

                entity.Property(e => e.Ip)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VcyearFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_VCYearFlight");

                entity.Property(e => e.Flightid).HasColumnName("flightid");
            });

            modelBuilder.Entity<ViewAccess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewAccess");

                entity.Property(e => e.Application)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Group).HasMaxLength(500);

                entity.Property(e => e.Ips)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("IPs");

                entity.Property(e => e.Role).HasMaxLength(256);

                entity.Property(e => e.Roleid)
                    .HasMaxLength(128)
                    .HasColumnName("roleid");

                entity.Property(e => e.Type)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<ViewAircraftType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewAircraftType");

                entity.Property(e => e.Manufacturer)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ViewAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewAirport");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Iata)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("IATA");

                entity.Property(e => e.Icao)
                    .HasMaxLength(255)
                    .HasColumnName("ICAO");

                entity.Property(e => e.Latitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SortName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Type).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewApplicableCourse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewApplicableCourse");

                entity.Property(e => e.CalendarType).HasMaxLength(1000);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CaoIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.CaoTypeRemark).HasMaxLength(1000);

                entity.Property(e => e.CaoTypeTitle).HasMaxLength(300);

                entity.Property(e => e.CcTitle)
                    .HasMaxLength(500)
                    .HasColumnName("CC_Title");

                entity.Property(e => e.CerNumber).HasMaxLength(500);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.CourseRemark).HasMaxLength(2000);

                entity.Property(e => e.CourseStatus)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.CtCalendarTypeId).HasColumnName("CT_CalendarTypeId");

                entity.Property(e => e.CtCourseCategoryId).HasColumnName("CT_CourseCategoryId");

                entity.Property(e => e.CtId).HasColumnName("CT_Id");

                entity.Property(e => e.CtInterval).HasColumnName("CT_Interval");

                entity.Property(e => e.CtIsGeneral).HasColumnName("CT_IsGeneral");

                entity.Property(e => e.CtLicenseResultBasicId).HasColumnName("CT_LicenseResultBasicId");

                entity.Property(e => e.CtRemark)
                    .HasMaxLength(2000)
                    .HasColumnName("CT_Remark");

                entity.Property(e => e.CtStatus).HasColumnName("CT_Status");

                entity.Property(e => e.CtTitle)
                    .HasMaxLength(500)
                    .HasColumnName("CT_Title");

                entity.Property(e => e.Currency).HasMaxLength(1000);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateDeadlineRegistration).HasColumnType("date");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndPractical).HasColumnType("date");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.Property(e => e.DateIssueNdt)
                    .HasColumnType("date")
                    .HasColumnName("DateIssueNDT");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.DateStartPractical).HasColumnType("date");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Department).HasMaxLength(500);

                entity.Property(e => e.Duration2).HasMaxLength(1031);

                entity.Property(e => e.DurationPracticalUnit).HasMaxLength(1000);

                entity.Property(e => e.DurationUnit).HasMaxLength(1000);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.ExpireDate).HasColumnType("date");

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Idno)
                    .HasMaxLength(500)
                    .HasColumnName("IDNo");

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.Instructor).HasMaxLength(500);

                entity.Property(e => e.IntervalNdt).HasColumnName("IntervalNDT");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.NdtintervalCalanderType)
                    .HasMaxLength(1000)
                    .HasColumnName("NDTIntervalCalanderType");

                entity.Property(e => e.NdtintervalCalanderTypeId).HasColumnName("NDTIntervalCalanderTypeId");

                entity.Property(e => e.Ndtnumber)
                    .HasMaxLength(200)
                    .HasColumnName("NDTNumber");

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Organization).HasMaxLength(1000);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.StampNumber).HasMaxLength(500);

                entity.Property(e => e.StampUrl).HasMaxLength(500);

                entity.Property(e => e.Status).HasMaxLength(1000);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.Property(e => e.TrainingDirector).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewApplicableCoursePerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewApplicableCoursePerson");

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CaoIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.CerNumber).HasMaxLength(500);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.Property(e => e.DateIssueNdt)
                    .HasColumnType("date")
                    .HasColumnName("DateIssueNDT");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Idno)
                    .HasMaxLength(500)
                    .HasColumnName("IDNo");

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.IntervalNdt).HasColumnName("IntervalNDT");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.NdtintervalCalanderType)
                    .HasMaxLength(1000)
                    .HasColumnName("NDTIntervalCalanderType");

                entity.Property(e => e.NdtintervalCalanderTypeId).HasColumnName("NDTIntervalCalanderTypeId");

                entity.Property(e => e.Ndtnumber)
                    .HasMaxLength(200)
                    .HasColumnName("NDTNumber");

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.StampNumber).HasMaxLength(500);

                entity.Property(e => e.StampUrl).HasMaxLength(500);

                entity.Property(e => e.Status).HasMaxLength(1000);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewBoardSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBoardSummary");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.FuelActual).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.FuelUplift).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.PaxLoad).HasColumnType("numeric(38, 12)");

                entity.Property(e => e.Sitatime).HasColumnName("SITATime");
            });

            modelBuilder.Entity<ViewBook>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBook");

                entity.Property(e => e.Abstract).HasMaxLength(4000);

                entity.Property(e => e.Category).HasMaxLength(1000);

                entity.Property(e => e.Conference).HasMaxLength(500);

                entity.Property(e => e.DateConference).HasMaxLength(200);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateDeadline).HasColumnType("datetime");

                entity.Property(e => e.DateEffective).HasMaxLength(500);

                entity.Property(e => e.DateExposure).HasColumnType("datetime");

                entity.Property(e => e.DateRelease).HasColumnType("date");

                entity.Property(e => e.DateValidUntil).HasColumnType("datetime");

                entity.Property(e => e.DeadLine).HasColumnType("datetime");

                entity.Property(e => e.Doi)
                    .HasMaxLength(200)
                    .HasColumnName("DOI");

                entity.Property(e => e.Duration).HasMaxLength(100);

                entity.Property(e => e.Edition).HasMaxLength(500);

                entity.Property(e => e.ExternalUrl).HasMaxLength(1000);

                entity.Property(e => e.FullCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InspecaccessionNumber)
                    .HasMaxLength(200)
                    .HasColumnName("INSPECAccessionNumber");

                entity.Property(e => e.Isbn)
                    .HasMaxLength(500)
                    .HasColumnName("ISBN");

                entity.Property(e => e.Issnelectronic)
                    .HasMaxLength(200)
                    .HasColumnName("ISSNElectronic");

                entity.Property(e => e.Issnprint)
                    .HasMaxLength(200)
                    .HasColumnName("ISSNPrint");

                entity.Property(e => e.Journal)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Language)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Pages).HasMaxLength(50);

                entity.Property(e => e.PublishedIn).HasMaxLength(500);

                entity.Property(e => e.Publisher).HasMaxLength(1000);

                entity.Property(e => e.PublisherWebsite).HasMaxLength(500);

                entity.Property(e => e.Sender).HasMaxLength(1000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Type).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewBookApplicableEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBookApplicableEmployee");

                entity.Property(e => e.Abstract).HasMaxLength(4000);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CaoIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.Category).HasMaxLength(1000);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.Conference).HasMaxLength(500);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateConference).HasMaxLength(200);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateDeadline).HasColumnType("datetime");

                entity.Property(e => e.DateDownload).HasColumnType("datetime");

                entity.Property(e => e.DateEffective).HasMaxLength(500);

                entity.Property(e => e.DateExposure).HasColumnType("datetime");

                entity.Property(e => e.DateIssueNdt)
                    .HasColumnType("date")
                    .HasColumnName("DateIssueNDT");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateRelease).HasColumnType("date");

                entity.Property(e => e.DateSigned).HasColumnType("datetime");

                entity.Property(e => e.DateValidUntil).HasColumnType("datetime");

                entity.Property(e => e.DateVisit).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.DeadLine).HasColumnType("datetime");

                entity.Property(e => e.Doi)
                    .HasMaxLength(200)
                    .HasColumnName("DOI");

                entity.Property(e => e.Duration).HasMaxLength(100);

                entity.Property(e => e.Edition).HasMaxLength(500);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.EmployeeImageUrl).HasMaxLength(1000);

                entity.Property(e => e.ExternalUrl).HasMaxLength(1000);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FileUrl).HasMaxLength(1000);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FolderCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Idno)
                    .HasMaxLength(500)
                    .HasColumnName("IDNo");

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InspecaccessionNumber)
                    .HasMaxLength(200)
                    .HasColumnName("INSPECAccessionNumber");

                entity.Property(e => e.IntervalNdt).HasColumnName("IntervalNDT");

                entity.Property(e => e.Isbn)
                    .HasMaxLength(500)
                    .HasColumnName("ISBN");

                entity.Property(e => e.Issnelectronic)
                    .HasMaxLength(200)
                    .HasColumnName("ISSNElectronic");

                entity.Property(e => e.Issnprint)
                    .HasMaxLength(200)
                    .HasColumnName("ISSNPrint");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Journal).HasMaxLength(1000);

                entity.Property(e => e.Language).HasMaxLength(1000);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.NdtintervalCalanderType)
                    .HasMaxLength(1000)
                    .HasColumnName("NDTIntervalCalanderType");

                entity.Property(e => e.NdtintervalCalanderTypeId).HasColumnName("NDTIntervalCalanderTypeId");

                entity.Property(e => e.Ndtnumber)
                    .HasMaxLength(200)
                    .HasColumnName("NDTNumber");

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Pages).HasMaxLength(50);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.PublishedIn).HasMaxLength(500);

                entity.Property(e => e.Publisher).HasMaxLength(1000);

                entity.Property(e => e.PublisherWebsite).HasMaxLength(500);

                entity.Property(e => e.Sender).HasMaxLength(1000);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.StampNumber).HasMaxLength(500);

                entity.Property(e => e.StampUrl).HasMaxLength(500);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Type).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewBookApplicableEmployeeAb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBookApplicableEmployeeAbs");

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CaoIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateDownload).HasColumnType("datetime");

                entity.Property(e => e.DateIssueNdt)
                    .HasColumnType("date")
                    .HasColumnName("DateIssueNDT");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateVisit).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Idno)
                    .HasMaxLength(500)
                    .HasColumnName("IDNo");

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IntervalNdt).HasColumnName("IntervalNDT");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.NdtintervalCalanderType)
                    .HasMaxLength(1000)
                    .HasColumnName("NDTIntervalCalanderType");

                entity.Property(e => e.NdtintervalCalanderTypeId).HasColumnName("NDTIntervalCalanderTypeId");

                entity.Property(e => e.Ndtnumber)
                    .HasMaxLength(200)
                    .HasColumnName("NDTNumber");

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.StampNumber).HasMaxLength(500);

                entity.Property(e => e.StampUrl).HasMaxLength(500);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewBookApplicableEmployeeX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBookApplicableEmployeeX");

                entity.Property(e => e.FolderCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewBookAuthor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBookAuthor");

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Name).HasMaxLength(511);

                entity.Property(e => e.PersonType)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewBookChapter>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBookChapter");

                entity.Property(e => e.BookKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fullcode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.TitleFormated).HasMaxLength(4000);

                entity.Property(e => e.TitleFormatedSpace).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewBookFile>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBookFile");

                entity.Property(e => e.Chapter).HasMaxLength(500);

                entity.Property(e => e.FileType).HasMaxLength(500);

                entity.Property(e => e.FileUrl).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.SysUrl).HasMaxLength(1000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<ViewBookFileVisited>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBookFileVisited");

                entity.Property(e => e.Chapter).HasMaxLength(4000);

                entity.Property(e => e.ChapterS).HasMaxLength(4000);

                entity.Property(e => e.DateVisited).HasColumnType("datetime");

                entity.Property(e => e.FileType).HasMaxLength(500);

                entity.Property(e => e.FileUrl).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.SysUrl).HasMaxLength(1000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<ViewBox>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBox");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DefaultEnd).HasColumnType("datetime");

                entity.Property(e => e.DefaultStart).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Fdp).HasColumnName("FDP");

                entity.Property(e => e.Flights)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MaxFdp).HasColumnName("MaxFDP");

                entity.Property(e => e.MaxFdpextended).HasColumnName("MaxFDPExtended");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.ScheduledFdp).HasColumnName("ScheduledFDP");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Wocl).HasColumnName("WOCL");

                entity.Property(e => e.Woclerror).HasColumnName("WOCLError");
            });

            modelBuilder.Entity<ViewBoxCrew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBoxCrew");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.AtpldateExpire)
                    .HasColumnType("date")
                    .HasColumnName("ATPLDateExpire");

                entity.Property(e => e.AtpldateIssue)
                    .HasColumnType("date")
                    .HasColumnName("ATPLDateIssue");

                entity.Property(e => e.AtplexpireStatus).HasColumnName("ATPLExpireStatus");

                entity.Property(e => e.Atplnumber)
                    .HasMaxLength(500)
                    .HasColumnName("ATPLNumber");

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.CpldateExpire)
                    .HasColumnType("date")
                    .HasColumnName("CPLDateExpire");

                entity.Property(e => e.CpldateIssue)
                    .HasColumnType("date")
                    .HasColumnName("CPLDateIssue");

                entity.Property(e => e.CplexpireStatus).HasColumnName("CPLExpireStatus");

                entity.Property(e => e.Cplnumber)
                    .HasMaxLength(500)
                    .HasColumnName("CPLNumber");

                entity.Property(e => e.CurrentLocationAirporIata)
                    .HasMaxLength(255)
                    .HasColumnName("CurrentLocationAirporIATA");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateLastCheckUP");

                entity.Property(e => e.DateNextCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateNextCheckUP");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.DefaultEnd).HasColumnType("datetime");

                entity.Property(e => e.DefaultStart).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.IsCcrmexpired).HasColumnName("IsCCRMExpired");

                entity.Property(e => e.IsCmcexpired).HasColumnName("IsCMCExpired");

                entity.Property(e => e.IsCrmexpired).HasColumnName("IsCRMExpired");

                entity.Property(e => e.IsDgexpired).HasColumnName("IsDGExpired");

                entity.Property(e => e.IsLicenceIrexpired).HasColumnName("IsLicenceIRExpired");

                entity.Property(e => e.IsLprexpired).HasColumnName("IsLPRExpired");

                entity.Property(e => e.IsSeptexpired).HasColumnName("IsSEPTExpired");

                entity.Property(e => e.IsSeptpexpired).HasColumnName("IsSEPTPExpired");

                entity.Property(e => e.IsSmsexpired).HasColumnName("IsSMSExpired");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.MccdateExpire)
                    .HasColumnType("date")
                    .HasColumnName("MCCDateExpire");

                entity.Property(e => e.MccdateIssue)
                    .HasColumnType("date")
                    .HasColumnName("MCCDateIssue");

                entity.Property(e => e.MccexpireStatus).HasColumnName("MCCExpireStatus");

                entity.Property(e => e.Mccnumber)
                    .HasMaxLength(500)
                    .HasColumnName("MCCNumber");

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.PpldateExpire)
                    .HasColumnType("date")
                    .HasColumnName("PPLDateExpire");

                entity.Property(e => e.PpldateIssue)
                    .HasColumnType("date")
                    .HasColumnName("PPLDateIssue");

                entity.Property(e => e.PplexpireStatus).HasColumnName("PPLExpireStatus");

                entity.Property(e => e.Pplnumber)
                    .HasMaxLength(500)
                    .HasColumnName("PPLNumber");

                entity.Property(e => e.RemainCao).HasColumnName("RemainCAO");

                entity.Property(e => e.RemainCcrm).HasColumnName("RemainCCRM");

                entity.Property(e => e.RemainCmc).HasColumnName("RemainCMC");

                entity.Property(e => e.RemainCrm).HasColumnName("RemainCRM");

                entity.Property(e => e.RemainDg).HasColumnName("RemainDG");

                entity.Property(e => e.RemainLicenceIr).HasColumnName("RemainLicenceIR");

                entity.Property(e => e.RemainLpr).HasColumnName("RemainLPR");

                entity.Property(e => e.RemainSept).HasColumnName("RemainSEPT");

                entity.Property(e => e.RemainSeptp).HasColumnName("RemainSEPTP");

                entity.Property(e => e.RemainSms).HasColumnName("RemainSMS");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");
            });

            modelBuilder.Entity<ViewBoxCrewFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBoxCrewFlight");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateStr)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DutyTime).HasColumnType("numeric(1, 1)");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightTime).HasColumnType("numeric(1, 1)");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stafirst)
                    .HasColumnType("datetime")
                    .HasColumnName("STAFirst");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdfirst)
                    .HasColumnType("datetime")
                    .HasColumnName("STDFirst");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<ViewBoxCrewRequirement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewBoxCrewRequirement");

                entity.Property(e => e.Date).HasColumnType("date");
            });

            modelBuilder.Entity<ViewCaoType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCaoType");

                entity.Property(e => e.CaoGroup)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<ViewCertificate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCertificate");

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CaoIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.CaoTypeTitle).HasMaxLength(300);

                entity.Property(e => e.CerNumber).HasMaxLength(500);

                entity.Property(e => e.CerUrl).HasMaxLength(255);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.CourseCalendarType).HasMaxLength(1000);

                entity.Property(e => e.CourseCategoryTitle).HasMaxLength(500);

                entity.Property(e => e.CourseDateStart).HasColumnType("date");

                entity.Property(e => e.CourseDepartment).HasMaxLength(500);

                entity.Property(e => e.CourseDuration2).HasMaxLength(1031);

                entity.Property(e => e.CourseDurationUnit).HasMaxLength(1000);

                entity.Property(e => e.CourseInstructor).HasMaxLength(500);

                entity.Property(e => e.CourseLocation).HasMaxLength(500);

                entity.Property(e => e.CourseNo).HasMaxLength(500);

                entity.Property(e => e.CourseOrganization).HasMaxLength(1000);

                entity.Property(e => e.CourseRemark).HasMaxLength(2000);

                entity.Property(e => e.CourseTitle).HasMaxLength(500);

                entity.Property(e => e.CourseTrainingDirector).HasMaxLength(500);

                entity.Property(e => e.CourseTypeTitle).HasMaxLength(500);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateExpire).HasColumnType("date");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.Property(e => e.DateIssueNdt)
                    .HasColumnType("date")
                    .HasColumnName("DateIssueNDT");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.ExpireDate).HasColumnType("date");

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Idno)
                    .HasMaxLength(500)
                    .HasColumnName("IDNo");

                entity.Property(e => e.IntervalNdt).HasColumnName("IntervalNDT");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.NdtintervalCalanderType)
                    .HasMaxLength(1000)
                    .HasColumnName("NDTIntervalCalanderType");

                entity.Property(e => e.NdtintervalCalanderTypeId).HasColumnName("NDTIntervalCalanderTypeId");

                entity.Property(e => e.Ndtnumber)
                    .HasMaxLength(200)
                    .HasColumnName("NDTNumber");

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.StampNumber).HasMaxLength(500);

                entity.Property(e => e.StampUrl).HasMaxLength(500);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCertification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCertification");

                entity.Property(e => e.AcType).HasMaxLength(255);

                entity.Property(e => e.DateExpire).HasColumnType("datetime");

                entity.Property(e => e.DateIrvalid)
                    .HasColumnType("datetime")
                    .HasColumnName("DateIRValid");

                entity.Property(e => e.DateIssue).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.EmployedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Limitation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.No)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Occupation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Rating)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TypeTitle).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewCity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCity");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(1009);

                entity.Property(e => e.Latitude).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.SortName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ViewClaim>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewClaim");

                entity.Property(e => e.Claim)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimValue)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCourse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCourse");

                entity.Property(e => e.AircraftModel).HasMaxLength(255);

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.CalendarType).HasMaxLength(1000);

                entity.Property(e => e.CaoTypeRemark).HasMaxLength(1000);

                entity.Property(e => e.CaoTypeTitle).HasMaxLength(300);

                entity.Property(e => e.CcTitle)
                    .HasMaxLength(500)
                    .HasColumnName("CC_Title");

                entity.Property(e => e.CtCalendarTypeId).HasColumnName("CT_CalendarTypeId");

                entity.Property(e => e.CtCourseCategoryId).HasColumnName("CT_CourseCategoryId");

                entity.Property(e => e.CtId).HasColumnName("CT_Id");

                entity.Property(e => e.CtInterval).HasColumnName("CT_Interval");

                entity.Property(e => e.CtIsGeneral).HasColumnName("CT_IsGeneral");

                entity.Property(e => e.CtLicenseResultBasicId).HasColumnName("CT_LicenseResultBasicId");

                entity.Property(e => e.CtRemark)
                    .HasMaxLength(2000)
                    .HasColumnName("CT_Remark");

                entity.Property(e => e.CtStatus).HasColumnName("CT_Status");

                entity.Property(e => e.CtTitle)
                    .HasMaxLength(500)
                    .HasColumnName("CT_Title");

                entity.Property(e => e.Currency).HasMaxLength(1000);

                entity.Property(e => e.DateDeadlineRegistration).HasColumnType("date");

                entity.Property(e => e.DateDeadlineRegistrationP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateEndPractical).HasColumnType("date");

                entity.Property(e => e.DateEndPracticalP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.DateStartP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateStartPractical).HasColumnType("date");

                entity.Property(e => e.DateStartPracticalP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Department).HasMaxLength(500);

                entity.Property(e => e.Duration2).HasMaxLength(1031);

                entity.Property(e => e.DurationPracticalUnit).HasMaxLength(1000);

                entity.Property(e => e.DurationUnit).HasMaxLength(1000);

                entity.Property(e => e.ExpireDate).HasColumnType("date");

                entity.Property(e => e.Instructor).HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(500);

                entity.Property(e => e.Manufacturer).HasMaxLength(1000);

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Organization).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Status)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.Property(e => e.TrainingDirector).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewCourseNotificationEnabled>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCourseNotificationEnabled");

                entity.Property(e => e.AircraftModel).HasMaxLength(255);

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.CalendarType).HasMaxLength(1000);

                entity.Property(e => e.CaoTypeRemark).HasMaxLength(1000);

                entity.Property(e => e.CaoTypeTitle).HasMaxLength(300);

                entity.Property(e => e.CcTitle)
                    .HasMaxLength(500)
                    .HasColumnName("CC_Title");

                entity.Property(e => e.CtCalendarTypeId).HasColumnName("CT_CalendarTypeId");

                entity.Property(e => e.CtCourseCategoryId).HasColumnName("CT_CourseCategoryId");

                entity.Property(e => e.CtId).HasColumnName("CT_Id");

                entity.Property(e => e.CtInterval).HasColumnName("CT_Interval");

                entity.Property(e => e.CtIsGeneral).HasColumnName("CT_IsGeneral");

                entity.Property(e => e.CtLicenseResultBasicId).HasColumnName("CT_LicenseResultBasicId");

                entity.Property(e => e.CtRemark)
                    .HasMaxLength(2000)
                    .HasColumnName("CT_Remark");

                entity.Property(e => e.CtStatus).HasColumnName("CT_Status");

                entity.Property(e => e.CtTitle)
                    .HasMaxLength(500)
                    .HasColumnName("CT_Title");

                entity.Property(e => e.Currency).HasMaxLength(1000);

                entity.Property(e => e.DateDeadlineRegistration).HasColumnType("date");

                entity.Property(e => e.DateDeadlineRegistrationP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateEndPractical).HasColumnType("date");

                entity.Property(e => e.DateEndPracticalP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.DateStartP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateStartPractical).HasColumnType("date");

                entity.Property(e => e.DateStartPracticalP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Department).HasMaxLength(500);

                entity.Property(e => e.Duration2).HasMaxLength(1031);

                entity.Property(e => e.DurationPracticalUnit).HasMaxLength(1000);

                entity.Property(e => e.DurationUnit).HasMaxLength(1000);

                entity.Property(e => e.ExpireDate).HasColumnType("date");

                entity.Property(e => e.Instructor).HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(500);

                entity.Property(e => e.Manufacturer).HasMaxLength(1000);

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Organization).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Status)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.Property(e => e.TrainingDirector).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewCourseSession>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCourseSession");

                entity.Property(e => e.CtTitle)
                    .HasMaxLength(500)
                    .HasColumnName("CT_Title");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.Department).HasMaxLength(500);

                entity.Property(e => e.Instructor).HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(500);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Organization).HasMaxLength(1000);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(4000)
                    .HasColumnName("PDate");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(4000)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(4000)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.PyearName)
                    .HasMaxLength(4000)
                    .HasColumnName("PYearName");

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Status)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewCourseType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCourseType");

                entity.Property(e => e.CalenderType).HasMaxLength(1000);

                entity.Property(e => e.Category).HasMaxLength(500);

                entity.Property(e => e.Interval2).HasMaxLength(1031);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Title).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewCrew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrew");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.AvSecExpired).HasColumnType("datetime");

                entity.Property(e => e.AvSecIssued).HasColumnType("datetime");

                entity.Property(e => e.AvStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.Ccrmexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("CCRMExpired");

                entity.Property(e => e.Ccrmissued)
                    .HasColumnType("datetime")
                    .HasColumnName("CCRMIssued");

                entity.Property(e => e.Cmcexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("CMCExpired");

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ColdWxexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("ColdWXExpired");

                entity.Property(e => e.ColdWxissued)
                    .HasColumnType("datetime")
                    .HasColumnName("ColdWXIssued");

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.Crmexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("CRMExpired");

                entity.Property(e => e.Crmissued)
                    .HasColumnType("datetime")
                    .HasColumnName("CRMIssued");

                entity.Property(e => e.CurrentLocationAirporIata)
                    .HasMaxLength(255)
                    .HasColumnName("CurrentLocationAirporIATA");

                entity.Property(e => e.CurrentLocationCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateExpireNdt)
                    .HasColumnType("date")
                    .HasColumnName("DateExpireNDT");

                entity.Property(e => e.DateInactiveBegin).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveEnd).HasColumnType("datetime");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateLastCheckUP");

                entity.Property(e => e.DateNextCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateNextCheckUP");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.DateTypeExpire).HasColumnType("datetime");

                entity.Property(e => e.DateTypeIssue).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Dgexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("DGExpired");

                entity.Property(e => e.Dgissued)
                    .HasColumnType("datetime")
                    .HasColumnName("DGIssued");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstAidExpired).HasColumnType("datetime");

                entity.Property(e => e.FirstAidIssued).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.HotWxexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("HotWXExpired");

                entity.Property(e => e.HotWxissued)
                    .HasColumnType("datetime")
                    .HasColumnName("HotWXIssued");

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.IsCcrmexpired).HasColumnName("IsCCRMExpired");

                entity.Property(e => e.IsCmcexpired).HasColumnName("IsCMCExpired");

                entity.Property(e => e.IsCrmexpired).HasColumnName("IsCRMExpired");

                entity.Property(e => e.IsDgexpired).HasColumnName("IsDGExpired");

                entity.Property(e => e.IsLicenceIrexpired).HasColumnName("IsLicenceIRExpired");

                entity.Property(e => e.IsLprexpired).HasColumnName("IsLPRExpired");

                entity.Property(e => e.IsSeptexpired).HasColumnName("IsSEPTExpired");

                entity.Property(e => e.IsSeptpexpired).HasColumnName("IsSEPTPExpired");

                entity.Property(e => e.IsSmsexpired).HasColumnName("IsSMSExpired");

                entity.Property(e => e.IsTreexpired).HasColumnName("IsTREExpired");

                entity.Property(e => e.IsTriexpired).HasColumnName("IsTRIExpired");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastLocation).HasMaxLength(255);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.LicenceExpired).HasColumnType("datetime");

                entity.Property(e => e.LicenceIssued).HasColumnType("datetime");

                entity.Property(e => e.LineExpired).HasColumnType("datetime");

                entity.Property(e => e.LineIssued).HasColumnType("datetime");

                entity.Property(e => e.Lpcexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("LPCExpired");

                entity.Property(e => e.Lpcissued)
                    .HasColumnType("datetime")
                    .HasColumnName("LPCIssued");

                entity.Property(e => e.Lprexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("LPRExpired");

                entity.Property(e => e.MedicalExpired).HasColumnType("date");

                entity.Property(e => e.MedicalIssued).HasColumnType("date");

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.Opcexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("OPCExpired");

                entity.Property(e => e.Opcissued)
                    .HasColumnType("datetime")
                    .HasColumnName("OPCIssued");

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Password).HasMaxLength(1000);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.RecurrentExpired).HasColumnType("datetime");

                entity.Property(e => e.RecurrentIssued).HasColumnType("datetime");

                entity.Property(e => e.RemainCao).HasColumnName("RemainCAO");

                entity.Property(e => e.RemainCcrm).HasColumnName("RemainCCRM");

                entity.Property(e => e.RemainCmc).HasColumnName("RemainCMC");

                entity.Property(e => e.RemainCrm).HasColumnName("RemainCRM");

                entity.Property(e => e.RemainDg).HasColumnName("RemainDG");

                entity.Property(e => e.RemainLicenceIr).HasColumnName("RemainLicenceIR");

                entity.Property(e => e.RemainLpr).HasColumnName("RemainLPR");

                entity.Property(e => e.RemainProficiencyOpc).HasColumnName("RemainProficiencyOPC");

                entity.Property(e => e.RemainSept).HasColumnName("RemainSEPT");

                entity.Property(e => e.RemainSeptp).HasColumnName("RemainSEPTP");

                entity.Property(e => e.RemainSms).HasColumnName("RemainSMS");

                entity.Property(e => e.RemainTre).HasColumnName("RemainTRE");

                entity.Property(e => e.RemainTri).HasColumnName("RemainTRI");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Septexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("SEPTExpired");

                entity.Property(e => e.Septissued)
                    .HasColumnType("datetime")
                    .HasColumnName("SEPTIssued");

                entity.Property(e => e.Septpexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("SEPTPExpired");

                entity.Property(e => e.Septpissued)
                    .HasColumnType("datetime")
                    .HasColumnName("SEPTPIssued");

                entity.Property(e => e.Smsexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("SMSExpired");

                entity.Property(e => e.Smsissued)
                    .HasColumnType("datetime")
                    .HasColumnName("SMSIssued");

                entity.Property(e => e.Treexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("TREExpired");

                entity.Property(e => e.Triexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("TRIExpired");

                entity.Property(e => e.Username).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewCrewAssignFdp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewAssignFDP");

                entity.Property(e => e.FdpId).HasColumnName("fdpId");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Position)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrewCalendar>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewCalendar");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateCease).HasColumnType("datetime");

                entity.Property(e => e.DateCeaseLocal).HasColumnType("datetime");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateContactLocal).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndActual).HasColumnType("datetime");

                entity.Property(e => e.DateEndActualLocal).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.Duty).HasColumnType("numeric(13, 2)");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.Fdpreduction).HasColumnName("FDPReduction");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestFromLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewCrewCalendarSplited>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewCalendarSplited");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateCease).HasColumnType("datetime");

                entity.Property(e => e.DateCeaseLocal).HasColumnType("datetime");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateContactLocal).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateLocal).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.Duty).HasColumnType("numeric(13, 2)");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewCrewCertificatesSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewCertificatesSummary");

                entity.Property(e => e.AvSecExpireDate).HasColumnType("date");

                entity.Property(e => e.AvSecIssueDate).HasColumnType("date");

                entity.Property(e => e.CcrmexpireDate)
                    .HasColumnType("date")
                    .HasColumnName("CCRMExpireDate");

                entity.Property(e => e.CcrmissueDate)
                    .HasColumnType("date")
                    .HasColumnName("CCRMIssueDate");

                entity.Property(e => e.CmcexpireDate)
                    .HasColumnType("date")
                    .HasColumnName("CMCExpireDate");

                entity.Property(e => e.ColdWeatherExpireDate).HasColumnType("date");

                entity.Property(e => e.ColdWeatherIssueDate).HasColumnType("date");

                entity.Property(e => e.DgexpireDate)
                    .HasColumnType("date")
                    .HasColumnName("DGExpireDate");

                entity.Property(e => e.DgissueDate)
                    .HasColumnType("date")
                    .HasColumnName("DGIssueDate");

                entity.Property(e => e.FirstAidExpireDate).HasColumnType("date");

                entity.Property(e => e.FirstAidIssueDate).HasColumnType("date");

                entity.Property(e => e.HotWeatherExpireDate).HasColumnType("date");

                entity.Property(e => e.HotWeatherIssueDate).HasColumnType("date");

                entity.Property(e => e.IsCcrmexpired).HasColumnName("IsCCRMExpired");

                entity.Property(e => e.IsCmcexpired).HasColumnName("IsCMCExpired");

                entity.Property(e => e.IsDgexpired).HasColumnName("IsDGExpired");

                entity.Property(e => e.IsLprexpired).HasColumnName("IsLPRExpired");

                entity.Property(e => e.IsSeptexpired).HasColumnName("IsSEPTExpired");

                entity.Property(e => e.IsSeptpexpired).HasColumnName("IsSEPTPExpired");

                entity.Property(e => e.IsSmsexpired).HasColumnName("IsSMSExpired");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LprexpireDate)
                    .HasColumnType("date")
                    .HasColumnName("LPRExpireDate");

                entity.Property(e => e.MedicalLastCheckup).HasColumnType("date");

                entity.Property(e => e.MedicalNextChechup).HasColumnType("date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.ProficiencyCheckDate).HasColumnType("date");

                entity.Property(e => e.ProficiencyExpireDate).HasColumnType("date");

                entity.Property(e => e.RemainCcrm).HasColumnName("RemainCCRM");

                entity.Property(e => e.RemainCmc).HasColumnName("RemainCMC");

                entity.Property(e => e.RemainDg).HasColumnName("RemainDG");

                entity.Property(e => e.RemainLpr).HasColumnName("RemainLPR");

                entity.Property(e => e.RemainSept).HasColumnName("RemainSEPT");

                entity.Property(e => e.RemainSeptp).HasColumnName("RemainSEPTP");

                entity.Property(e => e.RemainSms).HasColumnName("RemainSMS");

                entity.Property(e => e.SeptexpireDate)
                    .HasColumnType("date")
                    .HasColumnName("SEPTExpireDate");

                entity.Property(e => e.SeptissueDate)
                    .HasColumnType("date")
                    .HasColumnName("SEPTIssueDate");

                entity.Property(e => e.SeptpracticalExpireDate)
                    .HasColumnType("date")
                    .HasColumnName("SEPTPracticalExpireDate");

                entity.Property(e => e.SeptpracticalIssueDate)
                    .HasColumnType("date")
                    .HasColumnName("SEPTPracticalIssueDate");

                entity.Property(e => e.SmsexpireDate)
                    .HasColumnType("date")
                    .HasColumnName("SMSExpireDate");

                entity.Property(e => e.SmsissueDate)
                    .HasColumnType("date")
                    .HasColumnName("SMSIssueDate");
            });

            modelBuilder.Entity<ViewCrewCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewCode");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.AvStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.CurrentLocationCity).HasMaxLength(500);

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveBegin).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveEnd).HasColumnType("datetime");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateLastCheckUP");

                entity.Property(e => e.DateNextCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateNextCheckUP");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.IsCcrmexpired).HasColumnName("IsCCRMExpired");

                entity.Property(e => e.IsCmcexpired).HasColumnName("IsCMCExpired");

                entity.Property(e => e.IsCrmexpired).HasColumnName("IsCRMExpired");

                entity.Property(e => e.IsDgexpired).HasColumnName("IsDGExpired");

                entity.Property(e => e.IsLicenceIrexpired).HasColumnName("IsLicenceIRExpired");

                entity.Property(e => e.IsLprexpired).HasColumnName("IsLPRExpired");

                entity.Property(e => e.IsSeptexpired).HasColumnName("IsSEPTExpired");

                entity.Property(e => e.IsSeptpexpired).HasColumnName("IsSEPTPExpired");

                entity.Property(e => e.IsSmsexpired).HasColumnName("IsSMSExpired");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Password).HasMaxLength(1000);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.RemainCao).HasColumnName("RemainCAO");

                entity.Property(e => e.RemainCcrm).HasColumnName("RemainCCRM");

                entity.Property(e => e.RemainCmc).HasColumnName("RemainCMC");

                entity.Property(e => e.RemainCrm).HasColumnName("RemainCRM");

                entity.Property(e => e.RemainDg).HasColumnName("RemainDG");

                entity.Property(e => e.RemainLicenceIr).HasColumnName("RemainLicenceIR");

                entity.Property(e => e.RemainLpr).HasColumnName("RemainLPR");

                entity.Property(e => e.RemainSept).HasColumnName("RemainSEPT");

                entity.Property(e => e.RemainSeptp).HasColumnName("RemainSEPTP");

                entity.Property(e => e.RemainSms).HasColumnName("RemainSMS");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SecretCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Username).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewCrewDuty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewDuty");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.CanceledNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CanceledRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateLocal).HasColumnType("date");

                entity.Property(e => e.DateLocal2).HasColumnType("date");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DateVisit).HasColumnType("datetime");

                entity.Property(e => e.Delivery)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.End).HasColumnType("datetime");

                entity.Property(e => e.EndUtc)
                    .HasColumnType("datetime")
                    .HasColumnName("EndUTC");

                entity.Property(e => e.FltNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IsVisitedStr)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MaxFdpextended).HasColumnName("MaxFDPExtended");

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Ref)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark2).HasMaxLength(500);

                entity.Property(e => e.ResDate).HasColumnType("datetime");

                entity.Property(e => e.ResStr)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");

                entity.Property(e => e.Route)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sms)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SMS");

                entity.Property(e => e.Smsid).HasColumnName("SMSId");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Start).HasColumnType("datetime");

                entity.Property(e => e.StartUtc)
                    .HasColumnType("datetime")
                    .HasColumnName("StartUTC");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.UserName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrewDutyNoReg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewDutyNoReg");

                entity.Property(e => e.AircraftType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CanceledNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CanceledRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateLocal).HasColumnType("date");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DateVisit).HasColumnType("datetime");

                entity.Property(e => e.Delivery)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.End).HasColumnType("datetime");

                entity.Property(e => e.EndUtc)
                    .HasColumnType("datetime")
                    .HasColumnName("EndUTC");

                entity.Property(e => e.FltNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IsVisitedStr)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MaxFdpextended).HasColumnName("MaxFDPExtended");

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Ref)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("REgister");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark2).HasMaxLength(500);

                entity.Property(e => e.ResDate).HasColumnType("datetime");

                entity.Property(e => e.ResStr)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");

                entity.Property(e => e.Route)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sms)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SMS");

                entity.Property(e => e.Smsid).HasColumnName("SMSId");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Start).HasColumnType("datetime");

                entity.Property(e => e.StartUtc)
                    .HasColumnType("datetime")
                    .HasColumnName("StartUTC");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.UserName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrewDutyTimeLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewDutyTimeLine");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.DurationFdp).HasColumnName("DurationFDP");

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.End).HasColumnType("datetime");

                entity.Property(e => e.EndLocal).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.InitEnd).HasColumnType("datetime");

                entity.Property(e => e.InitFlights)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitFromIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("InitFromIATA");

                entity.Property(e => e.InitGroup)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InitKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRank)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitStart).HasColumnType("datetime");

                entity.Property(e => e.IsFdpover).HasColumnName("IsFDPOver");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroup2).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Key)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.MaxFdp)
                    .HasColumnType("decimal(10, 5)")
                    .HasColumnName("MaxFDP");

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Rank).HasMaxLength(1000);

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark2).HasMaxLength(500);

                entity.Property(e => e.RestTo).HasColumnType("datetime");

                entity.Property(e => e.RestToLocal).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Start).HasColumnType("datetime");

                entity.Property(e => e.StartLocal).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewCrewFlightApp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewFlightApp");

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksInLocal).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.ChocksOutLocal).HasColumnType("datetime");

                entity.Property(e => e.CpcrewId).HasColumnName("CPCrewId");

                entity.Property(e => e.Cpinstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPInstructor");

                entity.Property(e => e.Cpisccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPISCCM");

                entity.Property(e => e.Cpp1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP1");

                entity.Property(e => e.Cpp2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP2");

                entity.Property(e => e.Cpsccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPSCCM");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FdpitemId).HasColumnName("FDPItemId");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Pickup).HasColumnType("datetime");

                entity.Property(e => e.PickupLocal).HasColumnType("datetime");

                entity.Property(e => e.Position)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Ramp)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.Sitatime).HasColumnName("SITATime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.StddayEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("STDDayEnd");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TakeOffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<ViewCrewList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewList");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FdpitemId).HasColumnName("FDPItemId");

                entity.Property(e => e.Fdptitle)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnName("FDPTitle");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.Position)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<ViewCrewNoLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewNoLocation");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.AvStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveBegin).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveEnd).HasColumnType("datetime");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateLastCheckUP");

                entity.Property(e => e.DateNextCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateNextCheckUP");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.IsCcrmexpired).HasColumnName("IsCCRMExpired");

                entity.Property(e => e.IsCmcexpired).HasColumnName("IsCMCExpired");

                entity.Property(e => e.IsCrmexpired).HasColumnName("IsCRMExpired");

                entity.Property(e => e.IsDgexpired).HasColumnName("IsDGExpired");

                entity.Property(e => e.IsLicenceIrexpired).HasColumnName("IsLicenceIRExpired");

                entity.Property(e => e.IsLprexpired).HasColumnName("IsLPRExpired");

                entity.Property(e => e.IsSeptexpired).HasColumnName("IsSEPTExpired");

                entity.Property(e => e.IsSeptpexpired).HasColumnName("IsSEPTPExpired");

                entity.Property(e => e.IsSmsexpired).HasColumnName("IsSMSExpired");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Password).HasMaxLength(1000);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.RemainCao).HasColumnName("RemainCAO");

                entity.Property(e => e.RemainCcrm).HasColumnName("RemainCCRM");

                entity.Property(e => e.RemainCmc).HasColumnName("RemainCMC");

                entity.Property(e => e.RemainCrm).HasColumnName("RemainCRM");

                entity.Property(e => e.RemainDg).HasColumnName("RemainDG");

                entity.Property(e => e.RemainLicenceIr).HasColumnName("RemainLicenceIR");

                entity.Property(e => e.RemainLpr).HasColumnName("RemainLPR");

                entity.Property(e => e.RemainSept).HasColumnName("RemainSEPT");

                entity.Property(e => e.RemainSeptp).HasColumnName("RemainSEPTP");

                entity.Property(e => e.RemainSms).HasColumnName("RemainSMS");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Username).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewCrewPickupSm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewPickupSMS");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.DateLocal).HasColumnType("date");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.DateVisit).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyDate).HasColumnType("datetime");

                entity.Property(e => e.DutyType).HasMaxLength(1000);

                entity.Property(e => e.End).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FltIds)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Flts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Message)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.Pickup).HasColumnType("datetime");

                entity.Property(e => e.PickupLocal).HasColumnType("datetime");

                entity.Property(e => e.RefId)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Routes)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName).HasMaxLength(500);

                entity.Property(e => e.Sender)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Start).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.TypeStr).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewCrewTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewTime");

                entity.Property(e => e.CalendarStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");

                entity.Property(e => e.CyearFlight).HasColumnName("CYear_Flight");

                entity.Property(e => e.DateStr)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Day14Duty).HasColumnName("Day14_Duty");

                entity.Property(e => e.Day14Flight).HasColumnName("Day14_Flight");

                entity.Property(e => e.Day1Duty).HasColumnName("Day1_Duty");

                entity.Property(e => e.Day1Flight).HasColumnName("Day1_Flight");

                entity.Property(e => e.Day28Duty).HasColumnName("Day28_Duty");

                entity.Property(e => e.Day28Flight).HasColumnName("Day28_Flight");

                entity.Property(e => e.Day7Duty).HasColumnName("Day7_Duty");

                entity.Property(e => e.Day7Flight).HasColumnName("Day7_Flight");

                entity.Property(e => e.EcboxId).HasColumnName("ECBoxId");

                entity.Property(e => e.EcdateEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("ECDateEnd");

                entity.Property(e => e.EcdateEndLocal)
                    .HasColumnType("datetime")
                    .HasColumnName("ECDateEndLocal");

                entity.Property(e => e.EcdateStart)
                    .HasColumnType("datetime")
                    .HasColumnName("ECDateStart");

                entity.Property(e => e.EcdateStartLocal)
                    .HasColumnType("datetime")
                    .HasColumnName("ECDateStartLocal");

                entity.Property(e => e.Ecduty).HasColumnName("ECDuty");

                entity.Property(e => e.Ecid).HasColumnName("ECId");

                entity.Property(e => e.EcsplitedId).HasColumnName("ECSplitedId");

                entity.Property(e => e.ErrorCyearFlight).HasColumnName("Error_CYear_Flight");

                entity.Property(e => e.ErrorDay14Duty).HasColumnName("Error_Day14_Duty");

                entity.Property(e => e.ErrorDay28Duty).HasColumnName("Error_Day28_Duty");

                entity.Property(e => e.ErrorDay28Flight).HasColumnName("Error_Day28_Flight");

                entity.Property(e => e.ErrorDay7Duty).HasColumnName("Error_Day7_Duty");

                entity.Property(e => e.ErrorYearFlight).HasColumnName("Error_Year_Flight");

                entity.Property(e => e.Fdpreduction)
                    .HasColumnType("numeric(1, 1)")
                    .HasColumnName("FDPReduction");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.YearDuty)
                    .HasColumnType("numeric(2, 1)")
                    .HasColumnName("Year_Duty");

                entity.Property(e => e.YearFlight).HasColumnName("Year_Flight");
            });

            modelBuilder.Entity<ViewCrewTimeDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewTimeDetail");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.CalendarStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.Cdate)
                    .HasColumnType("date")
                    .HasColumnName("CDate");

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.CurrentLocationAirporIata)
                    .HasMaxLength(255)
                    .HasColumnName("CurrentLocationAirporIATA");

                entity.Property(e => e.CyearFlight).HasColumnName("CYear_Flight");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateLastCheckUP");

                entity.Property(e => e.DateNextCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateNextCheckUP");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.DateStr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Day14Duty).HasColumnName("Day14_Duty");

                entity.Property(e => e.Day14Flight).HasColumnName("Day14_Flight");

                entity.Property(e => e.Day1Duty).HasColumnName("Day1_Duty");

                entity.Property(e => e.Day1Flight).HasColumnName("Day1_Flight");

                entity.Property(e => e.Day28Duty).HasColumnName("Day28_Duty");

                entity.Property(e => e.Day28Flight).HasColumnName("Day28_Flight");

                entity.Property(e => e.Day7Duty).HasColumnName("Day7_Duty");

                entity.Property(e => e.Day7Flight).HasColumnName("Day7_Flight");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.IsCcrmexpired).HasColumnName("IsCCRMExpired");

                entity.Property(e => e.IsCmcexpired).HasColumnName("IsCMCExpired");

                entity.Property(e => e.IsCrmexpired).HasColumnName("IsCRMExpired");

                entity.Property(e => e.IsDgexpired).HasColumnName("IsDGExpired");

                entity.Property(e => e.IsLicenceIrexpired).HasColumnName("IsLicenceIRExpired");

                entity.Property(e => e.IsLprexpired).HasColumnName("IsLPRExpired");

                entity.Property(e => e.IsSeptexpired).HasColumnName("IsSEPTExpired");

                entity.Property(e => e.IsSeptpexpired).HasColumnName("IsSEPTPExpired");

                entity.Property(e => e.IsSmsexpired).HasColumnName("IsSMSExpired");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Password).HasMaxLength(1000);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Username).HasMaxLength(1000);

                entity.Property(e => e.YearFlight).HasColumnName("Year_Flight");
            });

            modelBuilder.Entity<ViewCrewValid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewValid");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentLocationAirporIata)
                    .HasMaxLength(255)
                    .HasColumnName("CurrentLocationAirporIATA");

                entity.Property(e => e.CurrentLocationCity).HasMaxLength(500);

                entity.Property(e => e.DateInactiveBegin).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveEnd).HasColumnType("datetime");

                entity.Property(e => e.DateTypeExpire).HasColumnType("datetime");

                entity.Property(e => e.DateTypeIssue).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastLocation).HasMaxLength(255);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ValidationMessage)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCrewValidFtl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewCrewValidFTL");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.AvSecExpired).HasColumnType("datetime");

                entity.Property(e => e.AvSecIssued).HasColumnType("datetime");

                entity.Property(e => e.Ccrmexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("CCRMExpired");

                entity.Property(e => e.Ccrmissued)
                    .HasColumnType("datetime")
                    .HasColumnName("CCRMIssued");

                entity.Property(e => e.Cmcexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("CMCExpired");

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ColdWxexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("ColdWXExpired");

                entity.Property(e => e.ColdWxissued)
                    .HasColumnType("datetime")
                    .HasColumnName("ColdWXIssued");

                entity.Property(e => e.Crmexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("CRMExpired");

                entity.Property(e => e.Crmissued)
                    .HasColumnType("datetime")
                    .HasColumnName("CRMIssued");

                entity.Property(e => e.CurrentLocationAirporIata)
                    .HasMaxLength(255)
                    .HasColumnName("CurrentLocationAirporIATA");

                entity.Property(e => e.CurrentLocationCity).HasMaxLength(500);

                entity.Property(e => e.DateInactiveBegin).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveEnd).HasColumnType("datetime");

                entity.Property(e => e.DateTypeExpire).HasColumnType("datetime");

                entity.Property(e => e.DateTypeIssue).HasColumnType("datetime");

                entity.Property(e => e.Dgexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("DGExpired");

                entity.Property(e => e.Dgissued)
                    .HasColumnType("datetime")
                    .HasColumnName("DGIssued");

                entity.Property(e => e.FirstAidExpired).HasColumnType("date");

                entity.Property(e => e.FirstAidIssued).HasColumnType("date");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FlightCyear).HasColumnName("FlightCYear");

                entity.Property(e => e.HotWxexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("HotWXExpired");

                entity.Property(e => e.HotWxissued)
                    .HasColumnType("datetime")
                    .HasColumnName("HotWXIssued");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastLocation).HasMaxLength(255);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.LicenceExpired).HasColumnType("datetime");

                entity.Property(e => e.LicenceIssued).HasColumnType("datetime");

                entity.Property(e => e.LineExpired).HasColumnType("datetime");

                entity.Property(e => e.LineIssued).HasColumnType("datetime");

                entity.Property(e => e.Lpcexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("LPCExpired");

                entity.Property(e => e.Lpcissued)
                    .HasColumnType("datetime")
                    .HasColumnName("LPCIssued");

                entity.Property(e => e.Lprexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("LPRExpired");

                entity.Property(e => e.MedicalExpired).HasColumnType("date");

                entity.Property(e => e.MedicalIssued).HasColumnType("date");

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Opcexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("OPCExpired");

                entity.Property(e => e.Opcissued)
                    .HasColumnType("datetime")
                    .HasColumnName("OPCIssued");

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RecurrentExpired).HasColumnType("datetime");

                entity.Property(e => e.RecurrentIssued).HasColumnType("datetime");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Septexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("SEPTExpired");

                entity.Property(e => e.Septissued)
                    .HasColumnType("datetime")
                    .HasColumnName("SEPTIssued");

                entity.Property(e => e.Septpexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("SEPTPExpired");

                entity.Property(e => e.Septpissued)
                    .HasColumnType("datetime")
                    .HasColumnName("SEPTPIssued");

                entity.Property(e => e.Smsexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("SMSExpired");

                entity.Property(e => e.Smsissued)
                    .HasColumnType("datetime")
                    .HasColumnName("SMSIssued");

                entity.Property(e => e.Treexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("TREExpired");

                entity.Property(e => e.Triexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("TRIExpired");

                entity.Property(e => e.ValidationMessage)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDailyRosterFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDailyRosterFlights");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureDate).HasColumnType("date");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Register)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<ViewDay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDay");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewDayDuty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDayDuty");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewDayDuty7>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDayDuty7");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewDayDutyFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDayDutyFlight");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.FlightCyear).HasColumnName("FlightCYear");
            });

            modelBuilder.Entity<ViewDayFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDayFlight");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Flt28).HasColumnName("FLT28");

                entity.Property(e => e.Flt28local).HasColumnName("FLT28Local");

                entity.Property(e => e.Fltcyear).HasColumnName("FLTCYear");

                entity.Property(e => e.Fltyear).HasColumnName("FLTYear");
            });

            modelBuilder.Entity<ViewDayFlight28>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDayFlight28");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Flt28local).HasColumnName("FLT28Local");
            });

            modelBuilder.Entity<ViewDayGp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDayGP");

                entity.Property(e => e.Gdate)
                    .HasColumnType("datetime")
                    .HasColumnName("GDate");

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pdate2).HasColumnName("PDate2");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.PeriodFixTime).HasMaxLength(500);

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.PyearName)
                    .HasMaxLength(255)
                    .HasColumnName("PYearName");
            });

            modelBuilder.Entity<ViewDayOffRanked>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDayOffRanked");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ViewDayRanked>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDayRanked");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewDelayAirportCategoryGrouped>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayAirportCategoryGrouped");

                entity.Property(e => e.Airport).HasMaxLength(255);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(4000)
                    .HasColumnName("PDate");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(4000)
                    .HasColumnName("PDayName");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(4000)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PyearName)
                    .HasMaxLength(4000)
                    .HasColumnName("PYearName");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewDelayAirportGrouped>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayAirportGrouped");

                entity.Property(e => e.Airport).HasMaxLength(255);

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(4000)
                    .HasColumnName("PDate");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(4000)
                    .HasColumnName("PDayName");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(4000)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PyearName)
                    .HasMaxLength(4000)
                    .HasColumnName("PYearName");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewDelayCategoryGrouped>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayCategoryGrouped");

                entity.Property(e => e.Category)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(4000)
                    .HasColumnName("PDate");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(4000)
                    .HasColumnName("PDayName");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(4000)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PyearName)
                    .HasMaxLength(4000)
                    .HasColumnName("PYearName");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewDelayCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayCode");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.CategoryRemark).HasMaxLength(500);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Icategory)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ViewDelayDaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayDaily");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(4000)
                    .HasColumnName("PDate");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(4000)
                    .HasColumnName("PDayName");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(4000)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PyearName)
                    .HasMaxLength(4000)
                    .HasColumnName("PYearName");

                entity.Property(e => e.Trnd).HasColumnName("TRND");

                entity.Property(e => e.Trndleg).HasColumnName("TRNDLeg");

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewDelayDailyAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayDailyAirport");

                entity.Property(e => e.Airport)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(4000)
                    .HasColumnName("PDate");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(4000)
                    .HasColumnName("PDayName");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(4000)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PyearName)
                    .HasMaxLength(4000)
                    .HasColumnName("PYearName");

                entity.Property(e => e.Trnd).HasColumnName("TRND");

                entity.Property(e => e.Trndleg).HasColumnName("TRNDLeg");

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewDelayDailyAirportCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayDailyAirportCategory");

                entity.Property(e => e.Airport)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(4000)
                    .HasColumnName("PDate");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(4000)
                    .HasColumnName("PDayName");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(4000)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PyearName)
                    .HasMaxLength(4000)
                    .HasColumnName("PYearName");

                entity.Property(e => e.Trnd).HasColumnName("TRND");

                entity.Property(e => e.Trndleg).HasColumnName("TRNDLeg");

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewDelayDailyCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayDailyCategory");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(4000)
                    .HasColumnName("PDate");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(4000)
                    .HasColumnName("PDayName");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(4000)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PyearName)
                    .HasMaxLength(4000)
                    .HasColumnName("PYearName");

                entity.Property(e => e.Trnd).HasColumnName("TRND");

                entity.Property(e => e.Trndleg).HasColumnName("TRNDLeg");

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewDelayGrouped>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayGrouped");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(4000)
                    .HasColumnName("PDate");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(4000)
                    .HasColumnName("PDayName");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(4000)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PyearName)
                    .HasMaxLength(4000)
                    .HasColumnName("PYearName");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewDelayMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayMonthly");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromPersian).HasMaxLength(4000);

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthFrom).HasColumnType("datetime");

                entity.Property(e => e.MonthFromPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.MonthTo).HasColumnType("datetime");

                entity.Property(e => e.MonthToPersian).HasMaxLength(4000);

                entity.Property(e => e.Title)
                    .HasMaxLength(203)
                    .IsUnicode(false);

                entity.Property(e => e.YearStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDelayMonthlyAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayMonthlyAirport");

                entity.Property(e => e.Airport)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromPersian).HasMaxLength(4000);

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthFrom).HasColumnType("datetime");

                entity.Property(e => e.MonthFromPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.MonthTo).HasColumnType("datetime");

                entity.Property(e => e.MonthToPersian).HasMaxLength(4000);

                entity.Property(e => e.Title)
                    .HasMaxLength(203)
                    .IsUnicode(false);

                entity.Property(e => e.YearStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDelayMonthlyAirportCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayMonthlyAirportCategory");

                entity.Property(e => e.Airport)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromPersian).HasMaxLength(4000);

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthFrom).HasColumnType("datetime");

                entity.Property(e => e.MonthFromPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.MonthTo).HasColumnType("datetime");

                entity.Property(e => e.MonthToPersian).HasMaxLength(4000);

                entity.Property(e => e.Title)
                    .HasMaxLength(203)
                    .IsUnicode(false);

                entity.Property(e => e.YearStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDelayMonthlyCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayMonthlyCategory");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromPersian).HasMaxLength(4000);

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthFrom).HasColumnType("datetime");

                entity.Property(e => e.MonthFromPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.MonthTo).HasColumnType("datetime");

                entity.Property(e => e.MonthToPersian).HasMaxLength(4000);

                entity.Property(e => e.Title)
                    .HasMaxLength(203)
                    .IsUnicode(false);

                entity.Property(e => e.YearStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDelayWeekly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayWeekly");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromPersian).HasMaxLength(4000);

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(202)
                    .IsUnicode(false);

                entity.Property(e => e.WeekFrom).HasColumnType("datetime");

                entity.Property(e => e.WeekFromPersian).HasMaxLength(4000);

                entity.Property(e => e.WeekStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.WeekTo).HasColumnType("datetime");

                entity.Property(e => e.WeekToPersian).HasMaxLength(4000);

                entity.Property(e => e.YearStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDelayWeeklyAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayWeeklyAirport");

                entity.Property(e => e.Airport)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromPersian).HasMaxLength(4000);

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(202)
                    .IsUnicode(false);

                entity.Property(e => e.WeekFrom).HasColumnType("datetime");

                entity.Property(e => e.WeekFromPersian).HasMaxLength(4000);

                entity.Property(e => e.WeekStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.WeekTo).HasColumnType("datetime");

                entity.Property(e => e.WeekToPersian).HasMaxLength(4000);

                entity.Property(e => e.YearStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDelayWeeklyAirportCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayWeeklyAirportCategory");

                entity.Property(e => e.Airport)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromPersian).HasMaxLength(4000);

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(202)
                    .IsUnicode(false);

                entity.Property(e => e.WeekFrom).HasColumnType("datetime");

                entity.Property(e => e.WeekFromPersian).HasMaxLength(4000);

                entity.Property(e => e.WeekStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.WeekTo).HasColumnType("datetime");

                entity.Property(e => e.WeekToPersian).HasMaxLength(4000);

                entity.Property(e => e.YearStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDelayWeeklyCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDelayWeeklyCategory");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromPersian).HasMaxLength(4000);

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(202)
                    .IsUnicode(false);

                entity.Property(e => e.WeekFrom).HasColumnType("datetime");

                entity.Property(e => e.WeekFromPersian).HasMaxLength(4000);

                entity.Property(e => e.WeekStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);

                entity.Property(e => e.WeekTo).HasColumnType("datetime");

                entity.Property(e => e.WeekToPersian).HasMaxLength(4000);

                entity.Property(e => e.YearStr)
                    .HasMaxLength(101)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDispatchSmsemployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDispatchSMSEmployee");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateInactiveBegin).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveEnd).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDutyCalendar>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyCalendar");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");

                entity.Property(e => e.DateEndActual).HasColumnType("datetime");

                entity.Property(e => e.DateEndActualLocal).HasColumnType("datetime");

                entity.Property(e => e.DatePart).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.Duration).HasColumnType("numeric(13, 2)");

                entity.Property(e => e.DurationLocal).HasColumnType("numeric(13, 2)");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewDutyCalendarSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyCalendarSum");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");

                entity.Property(e => e.DatePart).HasColumnType("date");

                entity.Property(e => e.Duration).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.DurationLocal).HasColumnType("numeric(38, 2)");
            });

            modelBuilder.Entity<ViewDutyFdp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyFDP");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");

                entity.Property(e => e.DatePart).HasColumnType("date");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");
            });

            modelBuilder.Entity<ViewDutyFdpdetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyFDPDetail");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");

                entity.Property(e => e.Cday).HasColumnName("CDay");

                entity.Property(e => e.DatePart).HasColumnType("date");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.Fdpremark)
                    .HasMaxLength(4000)
                    .HasColumnName("FDPRemark");

                entity.Property(e => e.Fdptitle).HasColumnName("FDPTitle");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Position)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDutyFdpsum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyFDPSum");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");

                entity.Property(e => e.DatePart).HasColumnType("date");

                entity.Property(e => e.Fdpcount).HasColumnName("FDPCount");
            });

            modelBuilder.Entity<ViewDutyFdpsumCom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyFDPSumCom");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");

                entity.Property(e => e.DatePart).HasColumnType("date");

                entity.Property(e => e.Day14Duty).HasColumnName("Day14_Duty");

                entity.Property(e => e.Day28Duty).HasColumnName("Day28_Duty");

                entity.Property(e => e.Day7Duty).HasColumnName("Day7_Duty");

                entity.Property(e => e.Fdpcount).HasColumnName("FDPCount");
            });

            modelBuilder.Entity<ViewDutyFdpsumShadow>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyFDPSumShadow");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");

                entity.Property(e => e.DatePart).HasColumnType("date");

                entity.Property(e => e.Fdpcount).HasColumnName("FDPCount");
            });

            modelBuilder.Entity<ViewDutyFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyFlight");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");

                entity.Property(e => e.DatePart).HasColumnType("date");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FdpitemId).HasColumnName("FDPItemId");
            });

            modelBuilder.Entity<ViewDutyFlightLocal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyFlightLocal");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Cdate)
                    .HasColumnType("date")
                    .HasColumnName("CDate");

                entity.Property(e => e.DatePart).HasColumnType("date");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureDay).HasColumnType("date");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FlightNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");
            });

            modelBuilder.Entity<ViewDutyFlightSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyFlightSum");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");

                entity.Property(e => e.DatePart).HasColumnType("date");
            });

            modelBuilder.Entity<ViewDutyFlightSumCom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewDutyFlightSumCom");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");

                entity.Property(e => e.CyearFlight).HasColumnName("CYear_Flight");

                entity.Property(e => e.DatePart).HasColumnType("date");

                entity.Property(e => e.Day28Flight).HasColumnName("Day28_Flight");

                entity.Property(e => e.YearFlight).HasColumnName("Year_Flight");
            });

            modelBuilder.Entity<ViewEfbasr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEFBASR");

                entity.Property(e => e.Aatatcinstruction)
                    .HasMaxLength(255)
                    .HasColumnName("AATATCInstruction");

                entity.Property(e => e.AatcallSign)
                    .HasMaxLength(255)
                    .HasColumnName("AATCallSign");

                entity.Property(e => e.AatclearedAltitude)
                    .HasMaxLength(255)
                    .HasColumnName("AATClearedAltitude");

                entity.Property(e => e.Aatfrequency)
                    .HasMaxLength(255)
                    .HasColumnName("AATFrequency");

                entity.Property(e => e.Aatheading)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("AATHeading");

                entity.Property(e => e.AathorizontalPlane).HasColumnName("AATHorizontalPlane");

                entity.Property(e => e.AatisActionTaken).HasColumnName("AATIsActionTaken");

                entity.Property(e => e.AatisRafollowed).HasColumnName("AATIsRAFollowed");

                entity.Property(e => e.Aatlighting)
                    .HasMaxLength(255)
                    .HasColumnName("AATLighting");

                entity.Property(e => e.AatmarkingColour)
                    .HasMaxLength(255)
                    .HasColumnName("AATMarkingColour");

                entity.Property(e => e.AatminHorizontalSep)
                    .HasMaxLength(255)
                    .HasColumnName("AATMinHorizontalSep");

                entity.Property(e => e.AatminVerticalSep)
                    .HasMaxLength(255)
                    .HasColumnName("AATMinVerticalSep");

                entity.Property(e => e.AatotherActype)
                    .HasMaxLength(255)
                    .HasColumnName("AATOtherACType");

                entity.Property(e => e.AatreportedToAtc)
                    .HasMaxLength(255)
                    .HasColumnName("AATReportedToATC");

                entity.Property(e => e.Aatrisk)
                    .HasMaxLength(1000)
                    .HasColumnName("AATRisk");

                entity.Property(e => e.AatriskId).HasColumnName("AATRiskId");

                entity.Property(e => e.Aattcasalert)
                    .HasMaxLength(1000)
                    .HasColumnName("AATTCASAlert");

                entity.Property(e => e.AattcasalertId).HasColumnName("AATTCASAlertId");

                entity.Property(e => e.AattypeRa)
                    .HasMaxLength(255)
                    .HasColumnName("AATTypeRA");

                entity.Property(e => e.AatverticalDeviation)
                    .HasMaxLength(255)
                    .HasColumnName("AATVerticalDeviation");

                entity.Property(e => e.Aatxabove).HasColumnName("AATXAbove");

                entity.Property(e => e.Aatxastern).HasColumnName("AATXAstern");

                entity.Property(e => e.Aatyabove).HasColumnName("AATYAbove");

                entity.Property(e => e.Aatyastern).HasColumnName("AATYAstern");

                entity.Property(e => e.AcconfigAp)
                    .HasMaxLength(255)
                    .HasColumnName("ACConfigAP");

                entity.Property(e => e.AcconfigAthr)
                    .HasMaxLength(255)
                    .HasColumnName("ACConfigATHR");

                entity.Property(e => e.AcconfigFlap)
                    .HasMaxLength(255)
                    .HasColumnName("ACConfigFlap");

                entity.Property(e => e.AcconfigGear)
                    .HasMaxLength(255)
                    .HasColumnName("ACConfigGear");

                entity.Property(e => e.AcconfigSlat)
                    .HasMaxLength(255)
                    .HasColumnName("ACConfigSlat");

                entity.Property(e => e.AcconfigSpoilers)
                    .HasMaxLength(255)
                    .HasColumnName("ACConfigSpoilers");

                entity.Property(e => e.ActualWx)
                    .HasMaxLength(500)
                    .HasColumnName("ActualWX");

                entity.Property(e => e.Acweight)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ACWeight");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Altitude).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.AttAsr).HasColumnName("AttASR");

                entity.Property(e => e.BlockOff).HasColumnType("datetime");

                entity.Property(e => e.BlockOffLocal).HasColumnType("datetime");

                entity.Property(e => e.BlockOn).HasColumnType("datetime");

                entity.Property(e => e.BlockOnLocal).HasColumnType("datetime");

                entity.Property(e => e.BsbirdType)
                    .HasMaxLength(255)
                    .HasColumnName("BSBirdType");

                entity.Property(e => e.Bsheading).HasColumnName("BSHeading");

                entity.Property(e => e.BsimpactDec)
                    .HasMaxLength(1000)
                    .HasColumnName("BSImpactDec");

                entity.Property(e => e.BsnrSeen)
                    .HasMaxLength(1000)
                    .HasColumnName("BSNrSeen");

                entity.Property(e => e.BsnrSeenId).HasColumnName("BSNrSeenId");

                entity.Property(e => e.BsnrStruck)
                    .HasMaxLength(1000)
                    .HasColumnName("BSNrStruck");

                entity.Property(e => e.BsnrStruckId).HasColumnName("BSNrStruckId");

                entity.Property(e => e.Bstime)
                    .HasMaxLength(1000)
                    .HasColumnName("BSTime");

                entity.Property(e => e.BstimeId).HasColumnName("BSTimeId");

                entity.Property(e => e.BsturningId).HasColumnName("BSTurningId");

                entity.Property(e => e.Cargo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("CARGO");

                entity.Property(e => e.CommanderNote).HasMaxLength(2000);

                entity.Property(e => e.CpcrewId).HasColumnName("CPCrewId");

                entity.Property(e => e.Cpdh).HasColumnName("CPDH");

                entity.Property(e => e.Cpfdpid).HasColumnName("CPFDPId");

                entity.Property(e => e.CpfdpitemId).HasColumnName("CPFDPItemId");

                entity.Property(e => e.CpflightTypeId).HasColumnName("CPFlightTypeId");

                entity.Property(e => e.Cpinstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPInstructor");

                entity.Property(e => e.Cpisccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPISCCM");

                entity.Property(e => e.Cpp1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP1");

                entity.Property(e => e.Cpp2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP2");

                entity.Property(e => e.CppositionId).HasColumnName("CPPositionId");

                entity.Property(e => e.Cpregister)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPRegister");

                entity.Property(e => e.Cpsccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPSCCM");

                entity.Property(e => e.DateUpdate)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.EventType).HasMaxLength(1000);

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPhase).HasMaxLength(1000);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FpflightTime).HasColumnName("FPFlightTime");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FuelDensity).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelJettisoned).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.FuelRemaining).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelTotal).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.FuelUplift).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUsed).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Ipid).HasColumnName("IPId");

                entity.Property(e => e.Ipname)
                    .HasMaxLength(1001)
                    .HasColumnName("IPName");

                entity.Property(e => e.IpscheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("IPScheduleName");

                entity.Property(e => e.IsAirproxAtc).HasColumnName("IsAirproxATC");

                entity.Property(e => e.IsJl).HasColumnName("IsJL");

                entity.Property(e => e.IsJlapproved).HasColumnName("IsJLApproved");

                entity.Property(e => e.IsTcasra).HasColumnName("IsTCASRA");

                entity.Property(e => e.Jlapprover)
                    .HasMaxLength(1001)
                    .HasColumnName("JLApprover");

                entity.Property(e => e.JlapproverId).HasColumnName("JLApproverId");

                entity.Property(e => e.Jldate)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDate");

                entity.Property(e => e.JldateApproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDateApproved");

                entity.Property(e => e.JldatePicapproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDatePICApproved");

                entity.Property(e => e.Jlno)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("JLNo");

                entity.Property(e => e.Jluser)
                    .HasMaxLength(1001)
                    .HasColumnName("JLUser");

                entity.Property(e => e.JluserId).HasColumnName("JLUserId");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.Locairport)
                    .HasMaxLength(255)
                    .HasColumnName("LOCAirport");

                entity.Property(e => e.Locgeoaltitude)
                    .HasMaxLength(255)
                    .HasColumnName("LOCGEOAltitude");

                entity.Property(e => e.Locgeolongtitude)
                    .HasMaxLength(255)
                    .HasColumnName("LOCGEOLongtitude");

                entity.Property(e => e.Locrunway)
                    .HasMaxLength(255)
                    .HasColumnName("LOCRunway");

                entity.Property(e => e.Locstand)
                    .HasMaxLength(255)
                    .HasColumnName("LOCStand");

                entity.Property(e => e.Ltr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LTR");

                entity.Property(e => e.Met)
                    .HasMaxLength(1000)
                    .HasColumnName("MET");

                entity.Property(e => e.Metid).HasColumnName("METId");

                entity.Property(e => e.Msn).HasColumnName("MSN");

                entity.Property(e => e.OccurrenceDate).HasColumnType("datetime");

                entity.Property(e => e.OthersInfo).HasMaxLength(2000);

                entity.Property(e => e.P1id).HasColumnName("P1Id");

                entity.Property(e => e.P1name)
                    .HasMaxLength(1001)
                    .HasColumnName("P1Name");

                entity.Property(e => e.P1scheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P1ScheduleName");

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.P2name)
                    .HasMaxLength(1001)
                    .HasColumnName("P2Name");

                entity.Property(e => e.P2scheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P2ScheduleName");

                entity.Property(e => e.Pf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PF");

                entity.Property(e => e.Pflr).HasColumnName("PFLR");

                entity.Property(e => e.Pic)
                    .HasMaxLength(1001)
                    .HasColumnName("PIC");

                entity.Property(e => e.Picdate)
                    .HasColumnType("date")
                    .HasColumnName("PICDate");

                entity.Property(e => e.Picid).HasColumnName("PICId");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Result).HasMaxLength(2000);

                entity.Property(e => e.RunwayCondition).HasMaxLength(1000);

                entity.Property(e => e.RvsmFltCpt)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_CPT");

                entity.Property(e => e.RvsmFltFo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_FO");

                entity.Property(e => e.RvsmFltStby)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_STBY");

                entity.Property(e => e.RvsmGndCpt)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_CPT");

                entity.Property(e => e.RvsmGndFo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_FO");

                entity.Property(e => e.RvsmGndStby)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_STBY");

                entity.Property(e => e.SerialNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Sic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SIC");

                entity.Property(e => e.Sicid).HasColumnName("SICId");

                entity.Property(e => e.SigxWx)
                    .HasMaxLength(1000)
                    .HasColumnName("SigxWX");

                entity.Property(e => e.SigxWxid).HasColumnName("SigxWXId");

                entity.Property(e => e.SigxWxtypeId).HasColumnName("SigxWXTypeId");

                entity.Property(e => e.Squawk)
                    .HasMaxLength(255)
                    .HasColumnName("SQUAWK");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.StadayLocal)
                    .HasColumnType("date")
                    .HasColumnName("STADayLocal");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.StddayLocal)
                    .HasColumnType("date")
                    .HasColumnName("STDDayLocal");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Summary).HasMaxLength(2000);

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TakeOffLocal).HasColumnType("datetime");

                entity.Property(e => e.TechLogItemNo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TechLogItemNO");

                entity.Property(e => e.TechLogPageNo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TechLogPageNO");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.User)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.WtattitudeChange)
                    .HasMaxLength(1000)
                    .HasColumnName("WTAttitudeChange");

                entity.Property(e => e.WtattitudeChangeDeg)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("WTAttitudeChangeDeg");

                entity.Property(e => e.WtattitudeChangeId).HasColumnName("WTAttitudeChangeId");

                entity.Property(e => e.WtdescribeVa)
                    .HasMaxLength(1000)
                    .HasColumnName("WTDescribeVA");

                entity.Property(e => e.WtextendedCenterlinePos)
                    .HasMaxLength(1000)
                    .HasColumnName("WTExtendedCenterlinePos");

                entity.Property(e => e.WtextendedCenterlinePosId).HasColumnName("WTExtendedCenterlinePosId");

                entity.Property(e => e.WtglideSlopePos)
                    .HasMaxLength(1000)
                    .HasColumnName("WTGlideSlopePos");

                entity.Property(e => e.WtglideSlopePosId).HasColumnName("WTGlideSlopePosId");

                entity.Property(e => e.Wtheading)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("WTHeading");

                entity.Property(e => e.WtisAware).HasColumnName("WTIsAware");

                entity.Property(e => e.WtisBuffet).HasColumnName("WTIsBuffet");

                entity.Property(e => e.WtisStickShaker).HasColumnName("WTIsStickShaker");

                entity.Property(e => e.WtprecedingAc)
                    .HasMaxLength(255)
                    .HasColumnName("WTPrecedingAC");

                entity.Property(e => e.Wtsuspect)
                    .HasMaxLength(1000)
                    .HasColumnName("WTSuspect");

                entity.Property(e => e.Wtturning)
                    .HasMaxLength(1000)
                    .HasColumnName("WTTurning");

                entity.Property(e => e.WtturningId).HasColumnName("WTTurningId");
            });

            modelBuilder.Entity<ViewEfbdsprelease>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEFBDSPReleases");

                entity.Property(e => e.ActualWxcpt).HasColumnName("ActualWXCPT");

                entity.Property(e => e.ActualWxcptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("ActualWXCPTRemark");

                entity.Property(e => e.ActualWxdsp).HasColumnName("ActualWXDSP");

                entity.Property(e => e.ActualWxdspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("ActualWXDSPRemark");

                entity.Property(e => e.AtcflightPlanCpt).HasColumnName("ATCFlightPlanCPT");

                entity.Property(e => e.AtcflightPlanCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("ATCFlightPlanCPTRemark");

                entity.Property(e => e.AtcflightPlanDsp).HasColumnName("ATCFlightPlanDSP");

                entity.Property(e => e.AtcflightPlanDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("ATCFlightPlanDSPRemark");

                entity.Property(e => e.AtsflightPlanCmdr).HasColumnName("ATSFlightPlanCMDR");

                entity.Property(e => e.AtsflightPlanCmdrremark)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ATSFlightPlanCMDRRemark");

                entity.Property(e => e.AtsflightPlanFoo).HasColumnName("ATSFlightPlanFOO");

                entity.Property(e => e.AtsflightPlanFooremark)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ATSFlightPlanFOORemark");

                entity.Property(e => e.AvsecincidentReportCpt).HasColumnName("AVSECIncidentReportCPT");

                entity.Property(e => e.AvsecincidentReportCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("AVSECIncidentReportCPTRemark");

                entity.Property(e => e.AvsecincidentReportDsp).HasColumnName("AVSECIncidentReportDSP");

                entity.Property(e => e.AvsecincidentReportDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("AVSECIncidentReportDSPRemark");

                entity.Property(e => e.ComputedFligthPlanCpt).HasColumnName("ComputedFligthPlanCPT");

                entity.Property(e => e.ComputedFligthPlanCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("ComputedFligthPlanCPTRemark");

                entity.Property(e => e.ComputedFligthPlanDsp).HasColumnName("ComputedFligthPlanDSP");

                entity.Property(e => e.ComputedFligthPlanDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("ComputedFligthPlanDSPRemark");

                entity.Property(e => e.DateConfirmed).HasColumnType("date");

                entity.Property(e => e.Dspmobile)
                    .HasMaxLength(500)
                    .HasColumnName("DSPMobile");

                entity.Property(e => e.Dspname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DSPName");

                entity.Property(e => e.Dspnid)
                    .HasMaxLength(500)
                    .HasColumnName("DSPNID");

                entity.Property(e => e.Dsppid)
                    .HasMaxLength(500)
                    .HasColumnName("DSPPID");

                entity.Property(e => e.FlightReportCpt).HasColumnName("FlightReportCPT");

                entity.Property(e => e.FlightReportCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("FlightReportCPTRemark");

                entity.Property(e => e.FlightReportDsp).HasColumnName("FlightReportDSP");

                entity.Property(e => e.FlightReportDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("FlightReportDSPRemark");

                entity.Property(e => e.FlightSafetyReportCpt).HasColumnName("FlightSafetyReportCPT");

                entity.Property(e => e.FlightSafetyReportCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("FlightSafetyReportCPTRemark");

                entity.Property(e => e.FlightSafetyReportDsp).HasColumnName("FlightSafetyReportDSP");

                entity.Property(e => e.FlightSafetyReportDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("FlightSafetyReportDSPRemark");

                entity.Property(e => e.GeneralDeclarationCpt).HasColumnName("GeneralDeclarationCPT");

                entity.Property(e => e.GeneralDeclarationCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("GeneralDeclarationCPTRemark");

                entity.Property(e => e.GeneralDeclarationDsp).HasColumnName("GeneralDeclarationDSP");

                entity.Property(e => e.GeneralDeclarationDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("GeneralDeclarationDSPRemark");

                entity.Property(e => e.GoodDeclarationCpt).HasColumnName("GoodDeclarationCPT");

                entity.Property(e => e.GoodDeclarationCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("GoodDeclarationCPTRemark");

                entity.Property(e => e.GoodDeclarationDsp).HasColumnName("GoodDeclarationDSP");

                entity.Property(e => e.GoodDeclarationDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("GoodDeclarationDSPRemark");

                entity.Property(e => e.Ipadcpt).HasColumnName("IPADCPT");

                entity.Property(e => e.Ipadcptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("IPADCPTRemark");

                entity.Property(e => e.Ipaddsp).HasColumnName("IPADDSP");

                entity.Property(e => e.Ipaddspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("IPADDSPRemark");

                entity.Property(e => e.JeppesenAirwayManualCpt).HasColumnName("JeppesenAirwayManualCPT");

                entity.Property(e => e.JeppesenAirwayManualCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("JeppesenAirwayManualCPTRemark");

                entity.Property(e => e.JeppesenAirwayManualDsp).HasColumnName("JeppesenAirwayManualDSP");

                entity.Property(e => e.JeppesenAirwayManualDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("JeppesenAirwayManualDSPRemark");

                entity.Property(e => e.JldatePicapproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDatePICApproved");

                entity.Property(e => e.JlsignedBy)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("JLSignedBy");

                entity.Property(e => e.LoadSheetCpt).HasColumnName("LoadSheetCPT");

                entity.Property(e => e.LoadSheetCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("LoadSheetCPTRemark");

                entity.Property(e => e.LoadSheetDsp).HasColumnName("LoadSheetDSP");

                entity.Property(e => e.LoadSheetDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("LoadSheetDSPRemark");

                entity.Property(e => e.MinFuelRequiredCpt).HasColumnName("MinFuelRequiredCPT");

                entity.Property(e => e.MinFuelRequiredDsp).HasColumnName("MinFuelRequiredDSP");

                entity.Property(e => e.MinFuelRequiredPilotReq).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.NotamCpt).HasColumnName("NotamCPT");

                entity.Property(e => e.NotamCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("NotamCPTRemark");

                entity.Property(e => e.NotamDsp).HasColumnName("NotamDSP");

                entity.Property(e => e.NotamDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("NotamDSPRemark");

                entity.Property(e => e.Note).IsUnicode(false);

                entity.Property(e => e.OperationEngineeringCpt).HasColumnName("OperationEngineeringCPT");

                entity.Property(e => e.OperationEngineeringCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("OperationEngineeringCPTRemark");

                entity.Property(e => e.OperationEngineeringDsp).HasColumnName("OperationEngineeringDSP");

                entity.Property(e => e.OperationEngineeringDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("OperationEngineeringDSPRemark");

                entity.Property(e => e.OperationalFlightPlanCmdr).HasColumnName("OperationalFlightPlanCMDR");

                entity.Property(e => e.OperationalFlightPlanCmdrremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OperationalFlightPlanCMDRRemark");

                entity.Property(e => e.OperationalFlightPlanFoo).HasColumnName("OperationalFlightPlanFOO");

                entity.Property(e => e.OperationalFlightPlanFooremark)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OperationalFlightPlanFOORemark");

                entity.Property(e => e.PermissionsCpt).HasColumnName("PermissionsCPT");

                entity.Property(e => e.PermissionsCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("PermissionsCPTRemark");

                entity.Property(e => e.PermissionsDsp).HasColumnName("PermissionsDSP");

                entity.Property(e => e.PermissionsDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("PermissionsDSPRemark");

                entity.Property(e => e.Pic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PIC");

                entity.Property(e => e.Picid).HasColumnName("PICId");

                entity.Property(e => e.Pifcpt).HasColumnName("PIFCPT");

                entity.Property(e => e.Pifcptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("PIFCPTRemark");

                entity.Property(e => e.Pifdsp).HasColumnName("PIFDSP");

                entity.Property(e => e.Pifdspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("PIFDSPRemark");

                entity.Property(e => e.SigxWxcpt).HasColumnName("SigxWXCPT");

                entity.Property(e => e.SigxWxcptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("SigxWXCPTRemark");

                entity.Property(e => e.SigxWxdsp).HasColumnName("SigxWXDSP");

                entity.Property(e => e.SigxWxdspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("SigxWXDSPRemark");

                entity.Property(e => e.TolndCardsCpt).HasColumnName("TOLndCardsCPT");

                entity.Property(e => e.TolndCardsCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("TOLndCardsCPTRemark");

                entity.Property(e => e.TolndCardsDsp).HasColumnName("TOLndCardsDSP");

                entity.Property(e => e.TolndCardsDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("TOLndCardsDSPRemark");

                entity.Property(e => e.VldCmccmdr).HasColumnName("VldCMCCMDR");

                entity.Property(e => e.VldCmccmdrremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldCMCCMDRRemark");

                entity.Property(e => e.VldCmcfoo).HasColumnName("VldCMCFOO");

                entity.Property(e => e.VldCmcfooremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldCMCFOORemark");

                entity.Property(e => e.VldEfbcmdr).HasColumnName("VldEFBCMDR");

                entity.Property(e => e.VldEfbcmdrremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldEFBCMDRRemark");

                entity.Property(e => e.VldEfbfoo).HasColumnName("VldEFBFOO");

                entity.Property(e => e.VldEfbfooremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldEFBFOORemark");

                entity.Property(e => e.VldFlightCrewCmdr).HasColumnName("VldFlightCrewCMDR");

                entity.Property(e => e.VldFlightCrewCmdrremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldFlightCrewCMDRRemark");

                entity.Property(e => e.VldFlightCrewFoo).HasColumnName("VldFlightCrewFOO");

                entity.Property(e => e.VldFlightCrewFooremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldFlightCrewFOORemark");

                entity.Property(e => e.VldMedicalCmdr).HasColumnName("VldMedicalCMDR");

                entity.Property(e => e.VldMedicalCmdrremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldMedicalCMDRRemark");

                entity.Property(e => e.VldMedicalFoo).HasColumnName("VldMedicalFOO");

                entity.Property(e => e.VldMedicalFooremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldMedicalFOORemark");

                entity.Property(e => e.VldPassportCmdr).HasColumnName("VldPassportCMDR");

                entity.Property(e => e.VldPassportCmdrremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldPassportCMDRRemark");

                entity.Property(e => e.VldPassportFoo).HasColumnName("VldPassportFOO");

                entity.Property(e => e.VldPassportFooremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldPassportFOORemark");

                entity.Property(e => e.VldRampPassCmdr).HasColumnName("VldRampPassCMDR");

                entity.Property(e => e.VldRampPassCmdrremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldRampPassCMDRRemark");

                entity.Property(e => e.VldRampPassFoo).HasColumnName("VldRampPassFOO");

                entity.Property(e => e.VldRampPassFooremark)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VldRampPassFOORemark");

                entity.Property(e => e.VoyageReportCpt).HasColumnName("VoyageReportCPT");

                entity.Property(e => e.VoyageReportCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("VoyageReportCPTRemark");

                entity.Property(e => e.VoyageReportDsp).HasColumnName("VoyageReportDSP");

                entity.Property(e => e.VoyageReportDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("VoyageReportDSPRemark");

                entity.Property(e => e.WindChartCpt).HasColumnName("WindChartCPT");

                entity.Property(e => e.WindChartCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("WindChartCPTRemark");

                entity.Property(e => e.WindChartDsp).HasColumnName("WindChartDSP");

                entity.Property(e => e.WindChartDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("WindChartDSPRemark");

                entity.Property(e => e.WxforcastCpt).HasColumnName("WXForcastCPT");

                entity.Property(e => e.WxforcastCptremark)
                    .HasMaxLength(1000)
                    .HasColumnName("WXForcastCPTRemark");

                entity.Property(e => e.WxforcastDsp).HasColumnName("WXForcastDSP");

                entity.Property(e => e.WxforcastDspremark)
                    .HasMaxLength(1000)
                    .HasColumnName("WXForcastDSPRemark");
            });

            modelBuilder.Entity<ViewEfboccurrenceCao>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEFBOccurrenceCAOs");

                entity.Property(e => e.AcflightPhase)
                    .HasMaxLength(1000)
                    .HasColumnName("ACFlightPhase");

                entity.Property(e => e.AcflightPhaseId).HasColumnName("ACFlightPhaseId");

                entity.Property(e => e.AcflightPhaseRemark)
                    .HasMaxLength(500)
                    .HasColumnName("ACFlightPhaseRemark");

                entity.Property(e => e.Acmodel)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ACModel");

                entity.Property(e => e.Altitude).HasMaxLength(255);

                entity.Property(e => e.CallSign)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Damage).HasMaxLength(1000);

                entity.Property(e => e.DamageDetail).HasMaxLength(1000);

                entity.Property(e => e.EquipmentAirportPlacard).HasMaxLength(255);

                entity.Property(e => e.EquipmentCompany).HasMaxLength(255);

                entity.Property(e => e.EquipmentContan).HasMaxLength(255);

                entity.Property(e => e.EquipmentDriverName).HasMaxLength(255);

                entity.Property(e => e.EquipmentIdNo)
                    .HasMaxLength(1)
                    .HasColumnName("EquipmentIdNO");

                entity.Property(e => e.EquipmentType).HasMaxLength(255);

                entity.Property(e => e.EventTimeWx)
                    .HasMaxLength(1)
                    .HasColumnName("EventTimeWX");

                entity.Property(e => e.ForcastWx)
                    .HasMaxLength(255)
                    .HasColumnName("ForcastWX");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Location).HasMaxLength(255);

                entity.Property(e => e.Nationality)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.OccurrenceDate).HasColumnType("datetime");

                entity.Property(e => e.OccurrenceType).HasMaxLength(1000);

                entity.Property(e => e.OtherDangerousGood).HasMaxLength(255);

                entity.Property(e => e.PriorEventWx)
                    .HasMaxLength(255)
                    .HasColumnName("PriorEventWX");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.SerialNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<ViewEfbvoyageIrr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEFBVoyageIrr");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewEfbvoyageReason>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEFBVoyageReason");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewEfbvoyageReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEFBVoyageReport");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.AttAsr).HasColumnName("AttASR");

                entity.Property(e => e.BlockOff).HasColumnType("datetime");

                entity.Property(e => e.BlockOffLocal).HasColumnType("datetime");

                entity.Property(e => e.BlockOn).HasColumnType("datetime");

                entity.Property(e => e.BlockOnLocal).HasColumnType("datetime");

                entity.Property(e => e.Cargo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("CARGO");

                entity.Property(e => e.CommanderNote).HasMaxLength(2000);

                entity.Property(e => e.CpcrewId).HasColumnName("CPCrewId");

                entity.Property(e => e.Cpdh).HasColumnName("CPDH");

                entity.Property(e => e.Cpfdpid).HasColumnName("CPFDPId");

                entity.Property(e => e.CpfdpitemId).HasColumnName("CPFDPItemId");

                entity.Property(e => e.CpflightTypeId).HasColumnName("CPFlightTypeId");

                entity.Property(e => e.Cpinstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPInstructor");

                entity.Property(e => e.Cpisccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPISCCM");

                entity.Property(e => e.Cpp1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP1");

                entity.Property(e => e.Cpp2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP2");

                entity.Property(e => e.CppositionId).HasColumnName("CPPositionId");

                entity.Property(e => e.Cpregister)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPRegister");

                entity.Property(e => e.Cpsccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPSCCM");

                entity.Property(e => e.DateActioned).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("date");

                entity.Property(e => e.DatePicsignature)
                    .HasColumnType("date")
                    .HasColumnName("DatePICSignature");

                entity.Property(e => e.DateUpdate)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FpflightTime).HasColumnName("FPFlightTime");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FuelDensity).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelRemaining).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelTotal).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.FuelUplift).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUsed).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Ipid).HasColumnName("IPId");

                entity.Property(e => e.Ipname)
                    .HasMaxLength(1001)
                    .HasColumnName("IPName");

                entity.Property(e => e.IpscheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("IPScheduleName");

                entity.Property(e => e.Irrs).HasMaxLength(4000);

                entity.Property(e => e.IsJl).HasColumnName("IsJL");

                entity.Property(e => e.IsJlapproved).HasColumnName("IsJLApproved");

                entity.Property(e => e.Jlapprover)
                    .HasMaxLength(1001)
                    .HasColumnName("JLApprover");

                entity.Property(e => e.JlapproverId).HasColumnName("JLApproverId");

                entity.Property(e => e.Jldate)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDate");

                entity.Property(e => e.JldateApproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDateApproved");

                entity.Property(e => e.JldatePicapproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDatePICApproved");

                entity.Property(e => e.Jlno)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("JLNo");

                entity.Property(e => e.Jluser)
                    .HasMaxLength(1001)
                    .HasColumnName("JLUser");

                entity.Property(e => e.JluserId).HasColumnName("JLUserId");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.Ltr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LTR");

                entity.Property(e => e.Msn).HasColumnName("MSN");

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.P1id).HasColumnName("P1Id");

                entity.Property(e => e.P1name)
                    .HasMaxLength(1001)
                    .HasColumnName("P1Name");

                entity.Property(e => e.P1scheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P1ScheduleName");

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.P2name)
                    .HasMaxLength(1001)
                    .HasColumnName("P2Name");

                entity.Property(e => e.P2scheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P2ScheduleName");

                entity.Property(e => e.Pf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PF");

                entity.Property(e => e.Pflr).HasColumnName("PFLR");

                entity.Property(e => e.Pic)
                    .HasMaxLength(1001)
                    .HasColumnName("PIC");

                entity.Property(e => e.Picid).HasColumnName("PICId");

                entity.Property(e => e.Reasons).HasMaxLength(4000);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Route).HasMaxLength(255);

                entity.Property(e => e.RvsmFltCpt)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_CPT");

                entity.Property(e => e.RvsmFltFo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_FO");

                entity.Property(e => e.RvsmFltStby)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_STBY");

                entity.Property(e => e.RvsmGndCpt)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_CPT");

                entity.Property(e => e.RvsmGndFo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_FO");

                entity.Property(e => e.RvsmGndStby)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_STBY");

                entity.Property(e => e.SerialNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Sic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SIC");

                entity.Property(e => e.Sicid).HasColumnName("SICId");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.StadayLocal)
                    .HasColumnType("date")
                    .HasColumnName("STADayLocal");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.StddayLocal)
                    .HasColumnType("date")
                    .HasColumnName("STDDayLocal");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TakeOffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.User)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewEfbvoyageReportsAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEFBVoyageReportsAll");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.DateActioned).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("date");

                entity.Property(e => e.DatePicsignature)
                    .HasColumnType("date")
                    .HasColumnName("DatePICSignature");

                entity.Property(e => e.DestinationIata)
                    .HasMaxLength(255)
                    .HasColumnName("DestinationIATA");

                entity.Property(e => e.FlightDate).HasColumnType("date");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.Nid)
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.OriginIata)
                    .HasMaxLength(255)
                    .HasColumnName("OriginIATA");

                entity.Property(e => e.Pid)
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Route).HasMaxLength(511);
            });

            modelBuilder.Entity<ViewEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEmployee");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.AviationSecurityExpireDate).HasColumnType("datetime");

                entity.Property(e => e.AviationSecurityIssueDate).HasColumnType("datetime");

                entity.Property(e => e.BaseAirport).HasMaxLength(255);

                entity.Property(e => e.C1groupId).HasColumnName("C1GroupId");

                entity.Property(e => e.C2groupId).HasColumnName("C2GroupId");

                entity.Property(e => e.C3groupId).HasColumnName("C3GroupId");

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CaoIntervalCalanderType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CcrmexpireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CCRMExpireDate");

                entity.Property(e => e.CcrmissueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CCRMIssueDate");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CityFullName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CodeX)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ColdWeatherOperationExpireDate).HasColumnType("datetime");

                entity.Property(e => e.ColdWeatherOperationIssueDate).HasColumnType("datetime");

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CrewMemberCertificateExpireDate).HasColumnType("datetime");

                entity.Property(e => e.CrmexpireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CRMExpireDate");

                entity.Property(e => e.CrmissueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CRMIssueDate");

                entity.Property(e => e.CurrentLocationCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DangerousGoodsExpireDate).HasColumnType("datetime");

                entity.Property(e => e.DangerousGoodsIssueDate).HasColumnType("datetime");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateExpireNdt)
                    .HasColumnType("date")
                    .HasColumnName("DateExpireNDT");

                entity.Property(e => e.DateInactiveBegin).HasColumnType("datetime");

                entity.Property(e => e.DateInactiveEnd).HasColumnType("datetime");

                entity.Property(e => e.DateIssueNdt)
                    .HasColumnType("date")
                    .HasColumnName("DateIssueNDT");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateLastCheckUP");

                entity.Property(e => e.DateNextCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateNextCheckUP");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.DateTreexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("DateTREExpired");

                entity.Property(e => e.DateTriexpired)
                    .HasColumnType("datetime")
                    .HasColumnName("DateTRIExpired");

                entity.Property(e => e.DateTypeExpire).HasColumnType("datetime");

                entity.Property(e => e.DateTypeIssue).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.EgpwsexpireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EGPWSExpireDate");

                entity.Property(e => e.EgpwsissueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("EGPWSIssueDate");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FatherName).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstAidExpireDate).HasColumnType("datetime");

                entity.Property(e => e.FirstAidIssueDate).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.HotWeatherOperationExpireDate).HasColumnType("datetime");

                entity.Property(e => e.HotWeatherOperationIssueDate).HasColumnType("datetime");

                entity.Property(e => e.Icaolprlevel).HasColumnName("ICAOLPRLevel");

                entity.Property(e => e.IcaolprvalidUntil)
                    .HasColumnType("datetime")
                    .HasColumnName("ICAOLPRValidUntil");

                entity.Property(e => e.Idno)
                    .HasMaxLength(500)
                    .HasColumnName("IDNo");

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.IntervalNdt).HasColumnName("IntervalNDT");

                entity.Property(e => e.IsCaoexpired).HasColumnName("IsCAOExpired");

                entity.Property(e => e.IsCaoexpiring).HasColumnName("IsCAOExpiring");

                entity.Property(e => e.IsCcrmexpired).HasColumnName("IsCCRMExpired");

                entity.Property(e => e.IsCmcexpired).HasColumnName("IsCMCExpired");

                entity.Property(e => e.IsCrmexpired).HasColumnName("IsCRMExpired");

                entity.Property(e => e.IsDgexpired).HasColumnName("IsDGExpired");

                entity.Property(e => e.IsLicenceIrexpired).HasColumnName("IsLicenceIRExpired");

                entity.Property(e => e.IsLprexpired).HasColumnName("IsLPRExpired");

                entity.Property(e => e.IsNdtexpired).HasColumnName("IsNDTExpired");

                entity.Property(e => e.IsNdtexpiring).HasColumnName("IsNDTExpiring");

                entity.Property(e => e.IsProficiencyOpcexpired).HasColumnName("IsProficiencyOPCExpired");

                entity.Property(e => e.IsSeptexpired).HasColumnName("IsSEPTExpired");

                entity.Property(e => e.IsSeptpexpired).HasColumnName("IsSEPTPExpired");

                entity.Property(e => e.IsSmsexpired).HasColumnName("IsSMSExpired");

                entity.Property(e => e.IsTreexpired).HasColumnName("IsTREExpired");

                entity.Property(e => e.IsTriexpired).HasColumnName("IsTRIExpired");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupC1).HasMaxLength(500);

                entity.Property(e => e.JobGroupC2).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupCode2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupCodeC1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupCodeC2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupMain).HasMaxLength(500);

                entity.Property(e => e.JobGroupMainCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageCourseExpireDate).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.LicenceDescription).HasMaxLength(2000);

                entity.Property(e => e.LicenceExpireDate).HasColumnType("datetime");

                entity.Property(e => e.LicenceInitialIssue).HasColumnType("datetime");

                entity.Property(e => e.LicenceIrexpireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LicenceIRExpireDate");

                entity.Property(e => e.LicenceIssueDate).HasColumnType("datetime");

                entity.Property(e => e.LicenceTitle).HasMaxLength(500);

                entity.Property(e => e.LineExpireDate).HasColumnType("datetime");

                entity.Property(e => e.LineIssueDate).HasColumnType("datetime");

                entity.Property(e => e.LinkedIn).HasMaxLength(500);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.LocationPhone).HasMaxLength(50);

                entity.Property(e => e.MaritalStatus).HasMaxLength(1000);

                entity.Property(e => e.MedicalLimitation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.NdtintervalCalanderType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NDTIntervalCalanderType");

                entity.Property(e => e.NdtintervalCalanderTypeId).HasColumnName("NDTIntervalCalanderTypeId");

                entity.Property(e => e.Ndtnumber)
                    .HasMaxLength(200)
                    .HasColumnName("NDTNumber");

                entity.Property(e => e.Nickname).HasMaxLength(50);

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Password).HasMaxLength(1000);

                entity.Property(e => e.PbnrnavexpireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PBNRNAVExpireDate");

                entity.Property(e => e.PbnrnavissueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PBNRNAVIssueDate");

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.Post).HasMaxLength(1000);

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ProficiencyCheckDate).HasColumnType("datetime");

                entity.Property(e => e.ProficiencyCheckDateOpc)
                    .HasColumnType("datetime")
                    .HasColumnName("ProficiencyCheckDateOPC");

                entity.Property(e => e.ProficiencyDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ProficiencyDescriptionOpc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ProficiencyDescriptionOPC");

                entity.Property(e => e.ProficiencyExpireDate).HasColumnType("datetime");

                entity.Property(e => e.ProficiencyValidUntil).HasColumnType("datetime");

                entity.Property(e => e.ProficiencyValidUntilOpc)
                    .HasColumnType("datetime")
                    .HasColumnName("ProficiencyValidUntilOPC");

                entity.Property(e => e.RaitingCertificates).HasMaxLength(500);

                entity.Property(e => e.RampPassExpireDate).HasColumnType("datetime");

                entity.Property(e => e.RampPassNo).HasMaxLength(500);

                entity.Property(e => e.RecurrentExpireDate).HasColumnType("datetime");

                entity.Property(e => e.RecurrentIssueDate).HasColumnType("datetime");

                entity.Property(e => e.RemainAc).HasColumnName("RemainAC");

                entity.Property(e => e.RemainAnnex).HasColumnName("RemainANNEX");

                entity.Property(e => e.RemainAsd).HasColumnName("RemainASD");

                entity.Property(e => e.RemainAsf).HasColumnName("RemainASF");

                entity.Property(e => e.RemainCao).HasColumnName("RemainCAO");

                entity.Property(e => e.RemainCc).HasColumnName("RemainCC");

                entity.Property(e => e.RemainCcrm).HasColumnName("RemainCCRM");

                entity.Property(e => e.RemainCmc).HasColumnName("RemainCMC");

                entity.Property(e => e.RemainCre).HasColumnName("RemainCRE");

                entity.Property(e => e.RemainCri).HasColumnName("RemainCRI");

                entity.Property(e => e.RemainCrm).HasColumnName("RemainCRM");

                entity.Property(e => e.RemainDg).HasColumnName("RemainDG");

                entity.Property(e => e.RemainDrm).HasColumnName("RemainDRM");

                entity.Property(e => e.RemainEgpws).HasColumnName("RemainEGPWS");

                entity.Property(e => e.RemainErp).HasColumnName("RemainERP");

                entity.Property(e => e.RemainFmtd).HasColumnName("RemainFMTD");

                entity.Property(e => e.RemainGom).HasColumnName("RemainGOM");

                entity.Property(e => e.RemainHf).HasColumnName("RemainHF");

                entity.Property(e => e.RemainIre).HasColumnName("RemainIRE");

                entity.Property(e => e.RemainIri).HasColumnName("RemainIRI");

                entity.Property(e => e.RemainLicenceIr).HasColumnName("RemainLicenceIR");

                entity.Property(e => e.RemainLpcc1).HasColumnName("RemainLPCC1");

                entity.Property(e => e.RemainLpcc2).HasColumnName("RemainLPCC2");

                entity.Property(e => e.RemainLpcc3).HasColumnName("RemainLPCC3");

                entity.Property(e => e.RemainLpr).HasColumnName("RemainLPR");

                entity.Property(e => e.RemainLrc).HasColumnName("RemainLRC");

                entity.Property(e => e.RemainMb).HasColumnName("RemainMB");

                entity.Property(e => e.RemainMel).HasColumnName("RemainMEL");

                entity.Property(e => e.RemainMet).HasColumnName("RemainMET");

                entity.Property(e => e.RemainNdt).HasColumnName("RemainNDT");

                entity.Property(e => e.RemainOma1).HasColumnName("RemainOMA1");

                entity.Property(e => e.RemainOma2).HasColumnName("RemainOMA2");

                entity.Property(e => e.RemainOma3).HasColumnName("RemainOMA3");

                entity.Property(e => e.RemainOmb1).HasColumnName("RemainOMB1");

                entity.Property(e => e.RemainOmb2).HasColumnName("RemainOMB2");

                entity.Property(e => e.RemainOmb3).HasColumnName("RemainOMB3");

                entity.Property(e => e.RemainOmc1).HasColumnName("RemainOMC1");

                entity.Property(e => e.RemainOmc2).HasColumnName("RemainOMC2");

                entity.Property(e => e.RemainOmc3).HasColumnName("RemainOMC3");

                entity.Property(e => e.RemainOpcc1).HasColumnName("RemainOPCC1");

                entity.Property(e => e.RemainOpcc2).HasColumnName("RemainOPCC2");

                entity.Property(e => e.RemainOpcc3).HasColumnName("RemainOPCC3");

                entity.Property(e => e.RemainPer).HasColumnName("RemainPER");

                entity.Property(e => e.RemainProficiencyOpc).HasColumnName("RemainProficiencyOPC");

                entity.Property(e => e.RemainPs).HasColumnName("RemainPS");

                entity.Property(e => e.RemainRsp).HasColumnName("RemainRSP");

                entity.Property(e => e.RemainSept).HasColumnName("RemainSEPT");

                entity.Property(e => e.RemainSeptp).HasColumnName("RemainSEPTP");

                entity.Property(e => e.RemainSfe).HasColumnName("RemainSFE");

                entity.Property(e => e.RemainSfe2).HasColumnName("RemainSFE2");

                entity.Property(e => e.RemainSfi).HasColumnName("RemainSFI");

                entity.Property(e => e.RemainSfi2).HasColumnName("RemainSFI2");

                entity.Property(e => e.RemainSms).HasColumnName("RemainSMS");

                entity.Property(e => e.RemainSop).HasColumnName("RemainSOP");

                entity.Property(e => e.RemainTre).HasColumnName("RemainTRE");

                entity.Property(e => e.RemainTre2).HasColumnName("RemainTRE2");

                entity.Property(e => e.RemainTri).HasColumnName("RemainTRI");

                entity.Property(e => e.RemainTri2).HasColumnName("RemainTRI2");

                entity.Property(e => e.RemainTypeMd).HasColumnName("RemainTypeMD");

                entity.Property(e => e.RemainUprt).HasColumnName("RemainUPRT");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SeptexpireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SEPTExpireDate");

                entity.Property(e => e.SeptissueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SEPTIssueDate");

                entity.Property(e => e.SeptpexpireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SEPTPExpireDate");

                entity.Property(e => e.SeptpissueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SEPTPIssueDate");

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.SimulatorLastCheck).HasColumnType("datetime");

                entity.Property(e => e.SimulatorNextCheck).HasColumnType("datetime");

                entity.Property(e => e.SmsexpireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SMSExpireDate");

                entity.Property(e => e.SmsissueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SMSIssueDate");

                entity.Property(e => e.StampNumber).HasMaxLength(500);

                entity.Property(e => e.StampUrl).HasMaxLength(500);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Telegram).HasMaxLength(255);

                entity.Property(e => e.Types)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UpsetRecoveryTrainingExpireDate).HasColumnType("datetime");

                entity.Property(e => e.UpsetRecoveryTrainingIssueDate).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.Property(e => e.Username).HasMaxLength(1000);

                entity.Property(e => e.VisaExpireDate).HasColumnType("datetime");

                entity.Property(e => e.WhatsApp).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewEmployeeActype>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEmployeeACType");

                entity.Property(e => e.AcType).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewEmployeeAge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEmployeeAge");
            });

            modelBuilder.Entity<ViewEmployeeExp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEmployeeExp");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");
            });

            modelBuilder.Entity<ViewEmployeeLight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEmployeeLight");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CaoIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.City).HasMaxLength(500);

                entity.Property(e => e.CityFullName).HasMaxLength(1009);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.Country)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateIssueNdt)
                    .HasColumnType("date")
                    .HasColumnName("DateIssueNDT");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateLastCheckUP");

                entity.Property(e => e.DateNextCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateNextCheckUP");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FatherName).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Idno)
                    .HasMaxLength(500)
                    .HasColumnName("IDNo");

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.IntervalNdt).HasColumnName("IntervalNDT");

                entity.Property(e => e.IsCaoexpired).HasColumnName("IsCAOExpired");

                entity.Property(e => e.IsCaoexpiring).HasColumnName("IsCAOExpiring");

                entity.Property(e => e.IsNdtexpired).HasColumnName("IsNDTExpired");

                entity.Property(e => e.IsNdtexpiring).HasColumnName("IsNDTExpiring");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroupRoot)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.LocationPhone).HasMaxLength(50);

                entity.Property(e => e.MaritalStatus).HasMaxLength(1000);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.NdtintervalCalanderType)
                    .HasMaxLength(1000)
                    .HasColumnName("NDTIntervalCalanderType");

                entity.Property(e => e.NdtintervalCalanderTypeId).HasColumnName("NDTIntervalCalanderTypeId");

                entity.Property(e => e.Ndtnumber)
                    .HasMaxLength(200)
                    .HasColumnName("NDTNumber");

                entity.Property(e => e.Nickname).HasMaxLength(50);

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Password).HasMaxLength(1000);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.Post).HasMaxLength(1000);

                entity.Property(e => e.RemainCao).HasColumnName("RemainCAO");

                entity.Property(e => e.RemainNdt).HasColumnName("RemainNDT");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.StampNumber).HasMaxLength(500);

                entity.Property(e => e.StampUrl).HasMaxLength(500);

                entity.Property(e => e.State).HasMaxLength(255);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.Property(e => e.Username).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewEmployeeLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEmployeeLocation");

                entity.Property(e => e.DateActiveEnd).HasColumnType("datetime");

                entity.Property(e => e.DateActiveEndP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DateActiveStart).HasColumnType("datetime");

                entity.Property(e => e.DateActiveStartP).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FullCode)
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.OrgRole).HasMaxLength(1000);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Root2Code)
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Root2Title)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<ViewEmployeeSimple>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEmployeeSimple");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CaoIntervalCalanderType).HasMaxLength(1000);

                entity.Property(e => e.City).HasMaxLength(500);

                entity.Property(e => e.CityFullName).HasMaxLength(1009);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.Country)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateIssueNdt)
                    .HasColumnType("date")
                    .HasColumnName("DateIssueNDT");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateLastCheckUP");

                entity.Property(e => e.DateNextCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateNextCheckUP");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FatherName).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Idno)
                    .HasMaxLength(500)
                    .HasColumnName("IDNo");

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.IntervalNdt).HasColumnName("IntervalNDT");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.MaritalStatus).HasMaxLength(1000);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.NdtintervalCalanderType)
                    .HasMaxLength(1000)
                    .HasColumnName("NDTIntervalCalanderType");

                entity.Property(e => e.NdtintervalCalanderTypeId).HasColumnName("NDTIntervalCalanderTypeId");

                entity.Property(e => e.Ndtnumber)
                    .HasMaxLength(200)
                    .HasColumnName("NDTNumber");

                entity.Property(e => e.Nickname).HasMaxLength(50);

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Password).HasMaxLength(1000);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.StampNumber).HasMaxLength(500);

                entity.Property(e => e.StampUrl).HasMaxLength(500);

                entity.Property(e => e.State).HasMaxLength(255);

                entity.Property(e => e.TechLogNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserId).HasMaxLength(128);

                entity.Property(e => e.Username).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewEventByType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewEventByType");

                entity.Property(e => e.Type).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFdm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDM");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.BlockOff).HasColumnType("datetime");

                entity.Property(e => e.BlockOn).HasColumnType("datetime");

                entity.Property(e => e.Context)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasPrecision(0);

                entity.Property(e => e.DateRemoved).HasPrecision(0);

                entity.Property(e => e.EventName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Ipcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IPCode");

                entity.Property(e => e.Ipid).HasColumnName("IPId");

                entity.Property(e => e.Ipname)
                    .HasMaxLength(1001)
                    .HasColumnName("IPName");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.Limit)
                    .HasMaxLength(53)
                    .IsUnicode(false);

                entity.Property(e => e.P1code)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P1Code");

                entity.Property(e => e.P1id).HasColumnName("P1Id");

                entity.Property(e => e.P1name)
                    .HasMaxLength(1001)
                    .HasColumnName("P1Name");

                entity.Property(e => e.P2code)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P2Code");

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.P2name)
                    .HasMaxLength(1001)
                    .HasColumnName("P2Name");

                entity.Property(e => e.Pf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PF");

                entity.Property(e => e.Pflr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PFLR");

                entity.Property(e => e.Phase)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.RemovedBy).HasMaxLength(255);

                entity.Property(e => e.Responsible).HasMaxLength(1001);

                entity.Property(e => e.Severity)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.StateName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.Tddatetime)
                    .HasPrecision(0)
                    .HasColumnName("TDDatetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.Todatetime)
                    .HasPrecision(0)
                    .HasColumnName("TODatetime");

                entity.Property(e => e.Type)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.Units)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Value).HasMaxLength(53);

                entity.Property(e => e.ValueName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFdmeventAction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDMEventAction");

                entity.Property(e => e.ActionInfo)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.ActionType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ClassId).HasMaxLength(500);

                entity.Property(e => e.Context)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CourseInstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseLocation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasPrecision(0);

                entity.Property(e => e.DateCreate).HasPrecision(0);

                entity.Property(e => e.EndDate).HasPrecision(0);

                entity.Property(e => e.EventName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fdmid).HasColumnName("FDMId");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Limit)
                    .HasMaxLength(53)
                    .IsUnicode(false);

                entity.Property(e => e.Pflr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PFLR");

                entity.Property(e => e.Phase)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Severity)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasPrecision(0);

                entity.Property(e => e.StateName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Tddatetime)
                    .HasPrecision(0)
                    .HasColumnName("TDDatetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.Todatetime)
                    .HasPrecision(0)
                    .HasColumnName("TODatetime");

                entity.Property(e => e.TrainingResult)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Units)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Value).HasMaxLength(53);

                entity.Property(e => e.ValueName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFdp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_ViewFDP");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.Fdp).HasColumnName("FDP");

                entity.Property(e => e.Fdpend)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPEnd");

                entity.Property(e => e.FdpendLocal)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPEndLocal");

                entity.Property(e => e.FdpreductionByStandBy).HasColumnName("FDPReductionByStandBy");

                entity.Property(e => e.Fdpscheduled).HasColumnName("FDPScheduled");

                entity.Property(e => e.FdpstandByScheduled).HasColumnName("FDPStandByScheduled");

                entity.Property(e => e.FdpstandByScheduledError).HasColumnName("FDPStandByScheduledError");

                entity.Property(e => e.Fdpstandby).HasColumnName("FDPStandby");

                entity.Property(e => e.FdpstandbyError).HasColumnName("FDPStandbyError");

                entity.Property(e => e.Fdpstart)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPStart");

                entity.Property(e => e.FdpstartLocal)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPStartLocal");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.MaxFdp).HasColumnName("MaxFDP");

                entity.Property(e => e.MaxFdpextended).HasColumnName("MaxFDPExtended");

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.ReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestFromLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.StandByStart).HasColumnType("datetime");

                entity.Property(e => e.StandByStartLocal).HasColumnType("datetime");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.ToAirport).HasMaxLength(255);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.Wocl).HasColumnName("WOCL");

                entity.Property(e => e.Woclerror).HasColumnName("WOCLError");
            });

            modelBuilder.Entity<ViewFdp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDP");

                entity.Property(e => e.ActypeId).HasColumnName("ACTypeId");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Cp).HasColumnName("CP");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateContactLocal).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Fdp).HasColumnName("FDP");

                entity.Property(e => e.Fdpcount).HasColumnName("FDPCount");

                entity.Property(e => e.Fdpend)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPEnd");

                entity.Property(e => e.FdpendLocal)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPEndLocal");

                entity.Property(e => e.FdplocationId).HasColumnName("FDPLocationId");

                entity.Property(e => e.FdpreductionByStandBy).HasColumnName("FDPReductionByStandBy");

                entity.Property(e => e.Fdpremark)
                    .HasMaxLength(4000)
                    .HasColumnName("FDPRemark");

                entity.Property(e => e.Fdpscheduled).HasColumnName("FDPScheduled");

                entity.Property(e => e.FdpstandByScheduled).HasColumnName("FDPStandByScheduled");

                entity.Property(e => e.FdpstandByScheduledError).HasColumnName("FDPStandByScheduledError");

                entity.Property(e => e.Fdpstandby).HasColumnName("FDPStandby");

                entity.Property(e => e.FdpstandbyError).HasColumnName("FDPStandbyError");

                entity.Property(e => e.Fdpstart)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPStart");

                entity.Property(e => e.FdpstartLocal)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPStartLocal");

                entity.Property(e => e.Fdptitle).HasColumnName("FDPTitle");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.IsFdp).HasColumnName("IsFDP");

                entity.Property(e => e.MaxFdp).HasColumnName("MaxFDP");

                entity.Property(e => e.MaxFdpextended).HasColumnName("MaxFDPExtended");

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.Position)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.ReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.Rerrperror).HasColumnName("RERRPError");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestFromLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.StandByStart).HasColumnType("datetime");

                entity.Property(e => e.StandByStartLocal).HasColumnType("datetime");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.ToAirport).HasMaxLength(255);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.Wocl).HasColumnName("WOCL");

                entity.Property(e => e.Woclerror).HasColumnName("WOCLError");
            });

            modelBuilder.Entity<ViewFdp2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDP2");

                entity.Property(e => e.ActypeId).HasColumnName("ACTypeId");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateContactLocal).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.Fdp).HasColumnName("FDP");

                entity.Property(e => e.Fdpend)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPEnd");

                entity.Property(e => e.FdpendLocal)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPEndLocal");

                entity.Property(e => e.FdplocationId).HasColumnName("FDPLocationId");

                entity.Property(e => e.FdpreductionByStandBy).HasColumnName("FDPReductionByStandBy");

                entity.Property(e => e.Fdpscheduled).HasColumnName("FDPScheduled");

                entity.Property(e => e.FdpstandByScheduled).HasColumnName("FDPStandByScheduled");

                entity.Property(e => e.FdpstandByScheduledError).HasColumnName("FDPStandByScheduledError");

                entity.Property(e => e.Fdpstandby).HasColumnName("FDPStandby");

                entity.Property(e => e.FdpstandbyError).HasColumnName("FDPStandbyError");

                entity.Property(e => e.Fdpstart)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPStart");

                entity.Property(e => e.FdpstartLocal)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPStartLocal");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.MaxFdp).HasColumnName("MaxFDP");

                entity.Property(e => e.MaxFdpextended).HasColumnName("MaxFDPExtended");

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.ReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.StandByStart).HasColumnType("datetime");

                entity.Property(e => e.StandByStartLocal).HasColumnType("datetime");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.ToAirport).HasMaxLength(255);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<ViewFdpab>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPABS");

                entity.Property(e => e.ActypeId).HasColumnName("ACTypeId");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateContactLocal).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Fdp).HasColumnName("FDP");

                entity.Property(e => e.Fdpcount).HasColumnName("FDPCount");

                entity.Property(e => e.Fdpend)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPEnd");

                entity.Property(e => e.FdpendLocal)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPEndLocal");

                entity.Property(e => e.FdplocationId).HasColumnName("FDPLocationId");

                entity.Property(e => e.Fdpremark)
                    .HasMaxLength(4000)
                    .HasColumnName("FDPRemark");

                entity.Property(e => e.Fdpscheduled).HasColumnName("FDPScheduled");

                entity.Property(e => e.Fdpstart)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPStart");

                entity.Property(e => e.FdpstartLocal)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPStartLocal");

                entity.Property(e => e.Fdptitle).HasColumnName("FDPTitle");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.IsFdp).HasColumnName("IsFDP");

                entity.Property(e => e.MaxFdp).HasColumnName("MaxFDP");

                entity.Property(e => e.MaxFdpextended).HasColumnName("MaxFDPExtended");

                entity.Property(e => e.Message)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.ReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestFromLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.ToAirport).HasMaxLength(255);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.Wocl).HasColumnName("WOCL");
            });

            modelBuilder.Entity<ViewFdpcrew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPCrew");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFdpcrewDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPCrewDetail");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.DayStdlocal)
                    .HasColumnType("date")
                    .HasColumnName("DaySTDLocal");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFdpcrewDetailSm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPCrewDetailSMS");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.DayStdlocal)
                    .HasColumnType("date")
                    .HasColumnName("DaySTDLocal");

                entity.Property(e => e.Delivery)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Ref)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ResDate).HasColumnType("datetime");

                entity.Property(e => e.ResStr)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Smsid).HasColumnName("SMSId");
            });

            modelBuilder.Entity<ViewFdpflight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPFlight");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ViewFdpflightDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPFlightDetail");

                entity.Property(e => e.ActypeId).HasColumnName("ACTypeId");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Cp).HasColumnName("CP");

                entity.Property(e => e.Customer)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateContactLocal).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Dh).HasColumnName("DH");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Fdp).HasColumnName("FDP");

                entity.Property(e => e.Fdpend)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPEnd");

                entity.Property(e => e.FdpendLocal)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPEndLocal");

                entity.Property(e => e.FdplocationId).HasColumnName("FDPLocationId");

                entity.Property(e => e.FdpreductionByStandBy).HasColumnName("FDPReductionByStandBy");

                entity.Property(e => e.Fdpscheduled).HasColumnName("FDPScheduled");

                entity.Property(e => e.FdpstandByScheduled).HasColumnName("FDPStandByScheduled");

                entity.Property(e => e.FdpstandByScheduledError).HasColumnName("FDPStandByScheduledError");

                entity.Property(e => e.Fdpstandby).HasColumnName("FDPStandby");

                entity.Property(e => e.FdpstandbyError).HasColumnName("FDPStandbyError");

                entity.Property(e => e.Fdpstart)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPStart");

                entity.Property(e => e.FdpstartLocal)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPStartLocal");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.IsFdp).HasColumnName("IsFDP");

                entity.Property(e => e.MaxFdp).HasColumnName("MaxFDP");

                entity.Property(e => e.MaxFdpextended).HasColumnName("MaxFDPExtended");

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.ReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestFromLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.StandByStart).HasColumnType("datetime");

                entity.Property(e => e.StandByStartLocal).HasColumnType("datetime");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.ToAirport).HasMaxLength(255);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.Wocl).HasColumnName("WOCL");

                entity.Property(e => e.Woclerror).HasColumnName("WOCLError");
            });

            modelBuilder.Entity<ViewFdpftl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPFTL");

                entity.Property(e => e.ActypeId).HasColumnName("ACTypeId");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateContactLocal).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.Fdp).HasColumnName("FDP");

                entity.Property(e => e.Fdpend)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPEnd");

                entity.Property(e => e.FdpendLocal)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPEndLocal");

                entity.Property(e => e.FdplocationId).HasColumnName("FDPLocationId");

                entity.Property(e => e.FdpreductionByStandBy).HasColumnName("FDPReductionByStandBy");

                entity.Property(e => e.Fdpscheduled).HasColumnName("FDPScheduled");

                entity.Property(e => e.FdpstandByScheduled).HasColumnName("FDPStandByScheduled");

                entity.Property(e => e.FdpstandByScheduledError).HasColumnName("FDPStandByScheduledError");

                entity.Property(e => e.Fdpstandby).HasColumnName("FDPStandby");

                entity.Property(e => e.FdpstandbyError).HasColumnName("FDPStandbyError");

                entity.Property(e => e.Fdpstart)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPStart");

                entity.Property(e => e.FdpstartLocal)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPStartLocal");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.MaxFdp).HasColumnName("MaxFDP");

                entity.Property(e => e.MaxFdpextended).HasColumnName("MaxFDPExtended");

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.ReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.StandByStart).HasColumnType("datetime");

                entity.Property(e => e.StandByStartLocal).HasColumnType("datetime");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.ToAirport).HasMaxLength(255);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<ViewFdpidea>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPIdea");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RestUntil).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewFdpitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPItem");

                entity.Property(e => e.ActypeId).HasColumnName("ACTypeId");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureDay).HasColumnType("date");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.SplitDutyExtension).HasColumnType("numeric(12, 1)");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.Wocl).HasColumnName("WOCL");
            });

            modelBuilder.Entity<ViewFdpitem2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPItem2");

                entity.Property(e => e.ActypeId).HasColumnName("ACTypeId");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureDay).HasColumnType("date");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FdppositionId).HasColumnName("FDPPositionId");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.SplitDutyExtension).HasColumnType("numeric(12, 1)");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.Wocl).HasColumnName("WOCL");
            });

            modelBuilder.Entity<ViewFdpitemAb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPItemAbs");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");
            });

            modelBuilder.Entity<ViewFdplog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPLog");

                entity.Property(e => e.Action)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CanceledNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CanceledRoute)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateAction).HasColumnType("datetime");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.InitEnd).HasColumnType("datetime");

                entity.Property(e => e.InitFlights)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitFromIata)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("InitFromIATA");

                entity.Property(e => e.InitKey)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRank)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRestTo).HasColumnType("datetime");

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitStart).HasColumnType("datetime");

                entity.Property(e => e.InitToIata)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("InitToIATA");

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.UserName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFdprest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPRest");

                entity.Property(e => e.ActypeId).HasColumnName("ACTypeId");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.CanceledNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CanceledRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateContact).HasColumnType("datetime");

                entity.Property(e => e.DateContactLocal).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.DateStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DayStdlocal)
                    .HasColumnType("date")
                    .HasColumnName("DaySTDLocal");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.DelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyTypeTitle)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Fdp).HasColumnName("FDP");

                entity.Property(e => e.Fdpend)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPEnd");

                entity.Property(e => e.FdpendLocal)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPEndLocal");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FdplocationId).HasColumnName("FDPLocationId");

                entity.Property(e => e.FdpreductionByStandBy).HasColumnName("FDPReductionByStandBy");

                entity.Property(e => e.Fdpscheduled).HasColumnName("FDPScheduled");

                entity.Property(e => e.FdpstandByScheduled).HasColumnName("FDPStandByScheduled");

                entity.Property(e => e.FdpstandByScheduledError).HasColumnName("FDPStandByScheduledError");

                entity.Property(e => e.Fdpstandby).HasColumnName("FDPStandby");

                entity.Property(e => e.FdpstandbyError).HasColumnName("FDPStandbyError");

                entity.Property(e => e.Fdpstart)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPStart");

                entity.Property(e => e.FdpstartLocal)
                    .HasColumnType("datetime")
                    .HasColumnName("FDPStartLocal");

                entity.Property(e => e.FirstNotification).HasColumnType("datetime");

                entity.Property(e => e.FromAirport).HasMaxLength(255);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(255);

                entity.Property(e => e.MaxFdp).HasColumnName("MaxFDP");

                entity.Property(e => e.MaxFdpextended).HasColumnName("MaxFDPExtended");

                entity.Property(e => e.NextNotification).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark2).HasMaxLength(500);

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.ReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");

                entity.Property(e => e.RevisedDelayedReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.StandByStart).HasColumnType("datetime");

                entity.Property(e => e.StandByStartLocal).HasColumnType("datetime");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.ToAirport).HasMaxLength(255);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.Upd).HasColumnName("UPD");

                entity.Property(e => e.UserName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFdpshadow>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDPShadow");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestFromLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewFdrreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFDRReport");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.FptripFuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPTripFuel");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FuelRemaining).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnit).HasMaxLength(1000);

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.FuelUplift).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUsed).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Ip)
                    .HasMaxLength(1001)
                    .HasColumnName("IP");

                entity.Property(e => e.Ipcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IPCode");

                entity.Property(e => e.Ipid).HasColumnName("IPId");

                entity.Property(e => e.Ipsch)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("IPSCH");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.MaxWeighUnit)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.MaxWeightLnd).HasColumnName("MaxWeightLND");

                entity.Property(e => e.MaxWeightTo).HasColumnName("MaxWeightTO");

                entity.Property(e => e.P1).HasMaxLength(1001);

                entity.Property(e => e.P1code)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P1Code");

                entity.Property(e => e.P1id).HasColumnName("P1Id");

                entity.Property(e => e.P1sch)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P1SCH");

                entity.Property(e => e.P2).HasMaxLength(1001);

                entity.Property(e => e.P2code)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P2Code");

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.P2sch)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P2SCH");

                entity.Property(e => e.Pflr).HasColumnName("PFLR");

                entity.Property(e => e.Pflrtitle)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PFLRTitle");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TakeoffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<ViewFin>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFin");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(4000)
                    .HasColumnName("PDate");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(4000)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(4000)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.PyearMonthName)
                    .HasMaxLength(4000)
                    .HasColumnName("PYearMonthName");

                entity.Property(e => e.PyearName)
                    .HasMaxLength(4000)
                    .HasColumnName("PYearName");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.RemainingFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TakeoffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.UpliftFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.YearMonthName).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewFinMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFinMonthly");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.UpliftFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.YearMonth).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewFinMonthlyPersian>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFinMonthlyPersian");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.UpliftFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.YearMonth).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewFinMonthlyReg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFinMonthlyReg");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.UpliftFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.YearMonth).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewFinMonthlyRoute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFinMonthlyRoute");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(3)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(3)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.UpliftFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.YearMonth).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewFinMonthlyRouteReg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFinMonthlyRouteReg");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.UpliftFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.YearMonth).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewFinYearlyRoute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFinYearlyRoute");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(3)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(3)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.UpliftFuel).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(38, 4)");
            });

            modelBuilder.Entity<ViewFixtimeRoute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFixtimeRoute");

                entity.Property(e => e.Route)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFlighPlanAssignedRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlighPlanAssignedRegister");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromTo)
                    .HasMaxLength(63)
                    .IsUnicode(false);

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(255);

                entity.Property(e => e.FlightPlan)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FromAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FromAirportName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FromCity).HasMaxLength(500);

                entity.Property(e => e.FromContry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FromLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.ToAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.ToAirportName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ToCity).HasMaxLength(500);

                entity.Property(e => e.ToCountry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ToLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFlightAb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightABS");

                entity.Property(e => e.ActualFlightHoffBlock).HasColumnName("ActualFlightHOffBlock");

                entity.Property(e => e.ActualFlightHtakeoff).HasColumnName("ActualFlightHTakeoff");

                entity.Property(e => e.ActualFlightMoffBlock)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMOffBlock");

                entity.Property(e => e.ActualFlightMtakeoff)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMTakeoff");

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.BaseIata)
                    .HasMaxLength(255)
                    .HasColumnName("BaseIATA");

                entity.Property(e => e.BaseName).HasMaxLength(500);

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CancelRemark).HasMaxLength(500);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FlightGroupId).HasColumnName("FlightGroupID");

                entity.Property(e => e.FlightHplanned).HasColumnName("FlightHPlanned");

                entity.Property(e => e.FlightMplanned).HasColumnName("FlightMPlanned");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan).HasMaxLength(500);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FpflightHh).HasColumnName("FPFlightHH");

                entity.Property(e => e.FpflightMm).HasColumnName("FPFlightMM");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.From)
                    .HasMaxLength(255)
                    .HasColumnName("from");

                entity.Property(e => e.FromAirportCity)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FromAirportName).HasMaxLength(500);

                entity.Property(e => e.FromCity).HasMaxLength(500);

                entity.Property(e => e.FromContry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FromLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Jlblhh).HasColumnName("JLBLHH");

                entity.Property(e => e.Jlblmm).HasColumnName("JLBLMM");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.Manufacturer).HasMaxLength(1000);

                entity.Property(e => e.Msn).HasColumnName("MSN");

                entity.Property(e => e.Osta)
                    .HasColumnType("datetime")
                    .HasColumnName("OSTA");

                entity.Property(e => e.OtoAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OToAirportIATA");

                entity.Property(e => e.OtoAirportId).HasColumnName("OToAirportId");

                entity.Property(e => e.Pflr).HasColumnName("PFLR");

                entity.Property(e => e.RampDate).HasColumnType("datetime");

                entity.Property(e => e.RampRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RedirectDate).HasColumnType("datetime");

                entity.Property(e => e.RedirectRemark).HasMaxLength(500);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Sitatime).HasColumnName("SITATime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Staplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STAPlanned");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Stdplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STDPlanned");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TaskId).HasColumnName("taskId");

                entity.Property(e => e.To)
                    .HasMaxLength(255)
                    .HasColumnName("to");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.ToAirportName).HasMaxLength(500);

                entity.Property(e => e.ToLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ViewFlightChangeHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightChangeHistory");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.NewFlightNumber)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.NewFromAirport).HasMaxLength(255);

                entity.Property(e => e.NewLanding).HasColumnType("datetime");

                entity.Property(e => e.NewOffBlock).HasColumnType("datetime");

                entity.Property(e => e.NewOnBlock).HasColumnType("datetime");

                entity.Property(e => e.NewRegister).HasMaxLength(50);

                entity.Property(e => e.NewSta)
                    .HasColumnType("datetime")
                    .HasColumnName("NewSTA");

                entity.Property(e => e.NewStatus).HasMaxLength(50);

                entity.Property(e => e.NewStd)
                    .HasColumnType("datetime")
                    .HasColumnName("NewSTD");

                entity.Property(e => e.NewTakeOff).HasColumnType("datetime");

                entity.Property(e => e.NewToAirport).HasMaxLength(255);

                entity.Property(e => e.OldFlightNumer)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OldFromAirport).HasMaxLength(255);

                entity.Property(e => e.OldLanding).HasColumnType("datetime");

                entity.Property(e => e.OldOffBlock).HasColumnType("datetime");

                entity.Property(e => e.OldOnBlock).HasColumnType("datetime");

                entity.Property(e => e.OldRegister).HasMaxLength(50);

                entity.Property(e => e.OldSta)
                    .HasColumnType("datetime")
                    .HasColumnName("OldSTA");

                entity.Property(e => e.OldStatus).HasMaxLength(50);

                entity.Property(e => e.OldStd)
                    .HasColumnType("datetime")
                    .HasColumnName("OldSTD");

                entity.Property(e => e.OldTakeOff).HasColumnType("datetime");

                entity.Property(e => e.OldToAirport).HasMaxLength(255);

                entity.Property(e => e.User).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewFlightCockpit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightCockpit");

                entity.Property(e => e.ActualFlightTimeToSita).HasColumnName("ActualFlightTimeToSITA");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Captain)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CaptainName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Customer)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightType).HasMaxLength(30);

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IP");

                entity.Property(e => e.Ipid).HasColumnName("IPId");

                entity.Property(e => e.Ipname)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IPName");

                entity.Property(e => e.JlblockTime).HasColumnName("JLBlockTime");

                entity.Property(e => e.JlflightTime).HasColumnName("JLFlightTime");

                entity.Property(e => e.Jllanding)
                    .HasColumnType("datetime")
                    .HasColumnName("JLLanding");

                entity.Property(e => e.JloffBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("JLOffBlock");

                entity.Property(e => e.JlonBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("JLOnBlock");

                entity.Property(e => e.JltakeOff)
                    .HasColumnType("datetime")
                    .HasColumnName("JLTakeOff");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(4000)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pflr).HasColumnName("PFLR");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Sitatime).HasColumnName("SITATime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<ViewFlightCrew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightCrew");

                entity.Property(e => e.ActualDateOffBlock).HasColumnType("date");

                entity.Property(e => e.ActualFlightHoffBlock).HasColumnName("ActualFlightHOffBlock");

                entity.Property(e => e.ActualFlightHtakeoff).HasColumnName("ActualFlightHTakeoff");

                entity.Property(e => e.ActualFlightMoffBlock)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMOffBlock");

                entity.Property(e => e.ActualFlightMtakeoff)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMTakeoff");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.ImageUrl)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.PastHoursFromOffBlock).HasColumnType("numeric(17, 6)");

                entity.Property(e => e.Pid)
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.TotalFlightHoursOffBlock).HasColumnType("numeric(17, 6)");
            });

            modelBuilder.Entity<ViewFlightCrew2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightCrew2");

                entity.Property(e => e.ActualFlightHoffBlock).HasColumnName("ActualFlightHOffBlock");

                entity.Property(e => e.ActualFlightHtakeoff).HasColumnName("ActualFlightHTakeoff");

                entity.Property(e => e.ActualFlightMoffBlock)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMOffBlock");

                entity.Property(e => e.ActualFlightMtakeoff)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMTakeoff");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.AtpldateExpire)
                    .HasColumnType("date")
                    .HasColumnName("ATPLDateExpire");

                entity.Property(e => e.AtpldateIssue)
                    .HasColumnType("date")
                    .HasColumnName("ATPLDateIssue");

                entity.Property(e => e.AtplexpireStatus).HasColumnName("ATPLExpireStatus");

                entity.Property(e => e.Atplnumber)
                    .HasMaxLength(500)
                    .HasColumnName("ATPLNumber");

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CancelReason).HasMaxLength(1000);

                entity.Property(e => e.CancelRemark).HasMaxLength(500);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.CpldateExpire)
                    .HasColumnType("date")
                    .HasColumnName("CPLDateExpire");

                entity.Property(e => e.CpldateIssue)
                    .HasColumnType("date")
                    .HasColumnName("CPLDateIssue");

                entity.Property(e => e.CplexpireStatus).HasColumnName("CPLExpireStatus");

                entity.Property(e => e.Cplnumber)
                    .HasMaxLength(500)
                    .HasColumnName("CPLNumber");

                entity.Property(e => e.CurrentLocationAirporIata)
                    .HasMaxLength(255)
                    .HasColumnName("CurrentLocationAirporIATA");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateLastCheckUP");

                entity.Property(e => e.DateNextCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateNextCheckUP");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FlightHplanned).HasColumnName("FlightHPlanned");

                entity.Property(e => e.FlightMplanned).HasColumnName("FlightMPlanned");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FlightTypeAbr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FromAirportCity)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FromAirportName).HasMaxLength(500);

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.MccdateExpire)
                    .HasColumnType("date")
                    .HasColumnName("MCCDateExpire");

                entity.Property(e => e.MccdateIssue)
                    .HasColumnType("date")
                    .HasColumnName("MCCDateIssue");

                entity.Property(e => e.MccexpireStatus).HasColumnName("MCCExpireStatus");

                entity.Property(e => e.Mccnumber)
                    .HasMaxLength(500)
                    .HasColumnName("MCCNumber");

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Msn).HasColumnName("MSN");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.PpldateExpire)
                    .HasColumnType("date")
                    .HasColumnName("PPLDateExpire");

                entity.Property(e => e.PpldateIssue)
                    .HasColumnType("date")
                    .HasColumnName("PPLDateIssue");

                entity.Property(e => e.PplexpireStatus).HasColumnName("PPLExpireStatus");

                entity.Property(e => e.Pplnumber)
                    .HasMaxLength(500)
                    .HasColumnName("PPLNumber");

                entity.Property(e => e.Register)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.ReportingTime).HasColumnType("datetime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.Staplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STAPlanned");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STDPlanned");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportCity).HasMaxLength(500);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.ToAirportName).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewFlightCrewArchive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightCrewArchive");

                entity.Property(e => e.Code)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.FlightNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Position)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewFlightCrewArchived>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightCrewArchived");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.FlightNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.Position)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Route)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFlightCrewNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightCrewNew");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FdpitemId).HasColumnName("FDPItemId");

                entity.Property(e => e.Fdptitle)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnName("FDPTitle");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.Position)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewFlightCrewNewX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightCrewNewX");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FdpitemId).HasColumnName("FDPItemId");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Pickup).HasColumnType("datetime");

                entity.Property(e => e.PickupLocal).HasColumnType("datetime");

                entity.Property(e => e.Position)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewFlightCrewNewXtime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightCrewNewXTime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FdpitemId).HasColumnName("FDPItemId");

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sitatime).HasColumnName("SITATime");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");
            });

            modelBuilder.Entity<ViewFlightCrewX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightCrewX");

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksInLocal).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.ChocksOutLocal).HasColumnType("datetime");

                entity.Property(e => e.CpcrewId).HasColumnName("CPCrewId");

                entity.Property(e => e.Cpinstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPInstructor");

                entity.Property(e => e.Cpisccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPISCCM");

                entity.Property(e => e.Cpp1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP1");

                entity.Property(e => e.Cpp2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP2");

                entity.Property(e => e.Cpsccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPSCCM");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FdpitemId).HasColumnName("FDPItemId");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Pickup).HasColumnType("datetime");

                entity.Property(e => e.PickupLocal).HasColumnType("datetime");

                entity.Property(e => e.Position)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.Sitatime).HasColumnName("SITATime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.StddayEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("STDDayEnd");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TakeOffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<ViewFlightCrewXoff>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightCrewXOff");

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksInLocal).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.ChocksOutLocal).HasColumnType("datetime");

                entity.Property(e => e.CpcrewId).HasColumnName("CPCrewId");

                entity.Property(e => e.Cpinstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPInstructor");

                entity.Property(e => e.Cpisccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPISCCM");

                entity.Property(e => e.Cpp1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP1");

                entity.Property(e => e.Cpp2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP2");

                entity.Property(e => e.Cpsccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPSCCM");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FdpitemId).HasColumnName("FDPItemId");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Position)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Register)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sex).HasMaxLength(1000);

                entity.Property(e => e.Sitatime).HasColumnName("SITATime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.StddayEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("STDDayEnd");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TakeOffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<ViewFlightDelay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightDelay");

                entity.Property(e => e.ActualFlightHoffBlock).HasColumnName("ActualFlightHOffBlock");

                entity.Property(e => e.ActualFlightHtakeoff).HasColumnName("ActualFlightHTakeoff");

                entity.Property(e => e.ActualFlightMoffBlock)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMOffBlock");

                entity.Property(e => e.ActualFlightMtakeoff)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMTakeoff");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.BaseIata)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BaseIATA");

                entity.Property(e => e.BaseName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DayName).HasMaxLength(255);

                entity.Property(e => e.DelayHh).HasColumnName("DelayHH");

                entity.Property(e => e.DelayMm).HasColumnName("DelayMM");

                entity.Property(e => e.DelayRemark).HasMaxLength(500);

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Duration)
                    .HasColumnType("numeric(19, 6)")
                    .HasColumnName("duration");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightType)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FlightTypeAbr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FromAirportCity).HasMaxLength(255);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FromAirportName).HasMaxLength(255);

                entity.Property(e => e.Icategory)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.MapTitle).HasMaxLength(500);

                entity.Property(e => e.MapTitle2).HasMaxLength(500);

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pday).HasColumnName("PDay");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.PyearMonth)
                    .HasMaxLength(356)
                    .HasColumnName("PYearMonth");

                entity.Property(e => e.PyearName)
                    .HasMaxLength(255)
                    .HasColumnName("PYearName");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.TakeOffLocal).HasColumnType("datetime");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ToAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.ToAirportName).HasMaxLength(255);

                entity.Property(e => e.YearName).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFlightDelay2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightDelay2");

                entity.Property(e => e.ActualFlightHoffBlock).HasColumnName("ActualFlightHOffBlock");

                entity.Property(e => e.ActualFlightHtakeoff).HasColumnName("ActualFlightHTakeoff");

                entity.Property(e => e.ActualFlightMoffBlock)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMOffBlock");

                entity.Property(e => e.ActualFlightMtakeoff)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMTakeoff");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.BaseIata)
                    .HasMaxLength(255)
                    .HasColumnName("BaseIATA");

                entity.Property(e => e.BaseName).HasMaxLength(500);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.DelayHh).HasColumnName("DelayHH");

                entity.Property(e => e.DelayMm).HasColumnName("DelayMM");

                entity.Property(e => e.DelayRemark).HasMaxLength(500);

                entity.Property(e => e.Duration)
                    .HasColumnType("numeric(19, 6)")
                    .HasColumnName("duration");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FlightTypeAbr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FromAirportCity)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FromAirportName).HasMaxLength(500);

                entity.Property(e => e.Icategory)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ICategory");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.MonthFrom).HasColumnType("datetime");

                entity.Property(e => e.MonthFromPersian).HasMaxLength(4000);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.MonthTo).HasColumnType("datetime");

                entity.Property(e => e.MonthToPersian).HasMaxLength(4000);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(4000)
                    .HasColumnName("PDate");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(4000)
                    .HasColumnName("PDayName");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(4000)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.PyearName)
                    .HasMaxLength(4000)
                    .HasColumnName("PYearName");

                entity.Property(e => e.Register)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ToAirportCity).HasMaxLength(500);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.ToAirportName).HasMaxLength(500);

                entity.Property(e => e.WeekFrom).HasColumnType("datetime");

                entity.Property(e => e.WeekFromPersian).HasMaxLength(4000);

                entity.Property(e => e.WeekTo).HasColumnType("datetime");

                entity.Property(e => e.WeekToPersian).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewFlightDelayCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightDelayCode");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Hh).HasColumnName("HH");

                entity.Property(e => e.Mm).HasColumnName("MM");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFlightFdp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightFDP");

                entity.Property(e => e.DefaultReportingTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultReportingTimeLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.Fdp).HasColumnName("FDP");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.Fdpremark)
                    .HasMaxLength(4000)
                    .HasColumnName("FDPRemark");

                entity.Property(e => e.Fdpscheduled).HasColumnName("FDPScheduled");

                entity.Property(e => e.Fdptitle).HasColumnName("FDPTitle");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.MaxFdpextended).HasColumnName("MaxFDPExtended");

                entity.Property(e => e.RestFrom).HasColumnType("datetime");

                entity.Property(e => e.RestFromLocal).HasColumnType("datetime");

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.RestUntilLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<ViewFlightFuel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightFuel");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.AvgVar).HasColumnType("decimal(38, 15)");

                entity.Property(e => e.AvgVarReg).HasColumnType("decimal(38, 15)");

                entity.Property(e => e.AvgfuelBurned)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("AVGFuelBurned");

                entity.Property(e => e.AvgfuelBurnedReg)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("AVGFuelBurnedReg");

                entity.Property(e => e.Captain)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CaptainName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CargoUnit).HasMaxLength(1000);

                entity.Property(e => e.CargoUnitId).HasColumnName("CargoUnitID");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DurationActualStr)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DurationScheduledStr)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FlightActualStr)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightTimeFp).HasColumnName("FlightTimeFP");

                entity.Property(e => e.FlightTimeFpstr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FlightTimeFPStr");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.Fpvar)
                    .HasColumnType("decimal(38, 15)")
                    .HasColumnName("FPVar");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FuelUnit).HasMaxLength(1000);

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Remaining).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RouteIata)
                    .HasMaxLength(511)
                    .HasColumnName("RouteIATA");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.Taxi).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.UpLift).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ViewFlightGroupItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightGroupItem");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FltgroupId).HasColumnName("FLTGroupId");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");
            });

            modelBuilder.Entity<ViewFlightInformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightInformation");

                entity.Property(e => e.ActualFlightHoffBlock).HasColumnName("ActualFlightHOffBlock");

                entity.Property(e => e.ActualFlightHtakeoff).HasColumnName("ActualFlightHTakeoff");

                entity.Property(e => e.ActualFlightMoffBlock)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMOffBlock");

                entity.Property(e => e.ActualFlightMtakeoff)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMTakeoff");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.AircraftType2)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.BaseIata)
                    .HasMaxLength(255)
                    .HasColumnName("BaseIATA");

                entity.Property(e => e.BaseName).HasMaxLength(500);

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CancelReason).HasMaxLength(1000);

                entity.Property(e => e.CancelRemark).HasMaxLength(500);

                entity.Property(e => e.CargoUnit).HasMaxLength(1000);

                entity.Property(e => e.CargoUnitId).HasColumnName("CargoUnitID");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.CpcrewId).HasColumnName("CPCrewId");

                entity.Property(e => e.Cpdh).HasColumnName("CPDH");

                entity.Property(e => e.Cpfdpid).HasColumnName("CPFDPId");

                entity.Property(e => e.CpfdpitemId).HasColumnName("CPFDPItemId");

                entity.Property(e => e.CpflightTypeId).HasColumnName("CPFlightTypeId");

                entity.Property(e => e.Cpinstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPInstructor");

                entity.Property(e => e.Cpisccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPISCCM");

                entity.Property(e => e.Cpp1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP1");

                entity.Property(e => e.Cpp2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP2");

                entity.Property(e => e.CppositionId).HasColumnName("CPPositionId");

                entity.Property(e => e.Cpregister)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPRegister");

                entity.Property(e => e.Cpsccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPSCCM");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.Duration)
                    .HasColumnType("numeric(19, 6)")
                    .HasColumnName("duration");

                entity.Property(e => e.FlightGroupId).HasColumnName("FlightGroupID");

                entity.Property(e => e.FlightHplanned).HasColumnName("FlightHPlanned");

                entity.Property(e => e.FlightMplanned).HasColumnName("FlightMPlanned");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan).HasMaxLength(500);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusBgColor).HasMaxLength(255);

                entity.Property(e => e.FlightStatusClass).HasMaxLength(255);

                entity.Property(e => e.FlightStatusColor).HasMaxLength(255);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FlightTypeAbr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FpflightHh).HasColumnName("FPFlightHH");

                entity.Property(e => e.FpflightMm).HasColumnName("FPFlightMM");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.From)
                    .HasMaxLength(255)
                    .HasColumnName("from");

                entity.Property(e => e.FromAirportCity)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FromAirportName).HasMaxLength(500);

                entity.Property(e => e.FromContry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FromLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FuelActual).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelPlanned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnit).HasMaxLength(1000);

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.FuelVariance).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.Gwland)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("GWLand");

                entity.Property(e => e.Gwto)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("GWTO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Jlblhh).HasColumnName("JLBLHH");

                entity.Property(e => e.Jlblmm).HasColumnName("JLBLMM");

                entity.Property(e => e.JlblockTime).HasColumnName("JLBlockTime");

                entity.Property(e => e.JlflightTime).HasColumnName("JLFlightTime");

                entity.Property(e => e.Jllanding)
                    .HasColumnType("datetime")
                    .HasColumnName("JLLanding");

                entity.Property(e => e.JloffBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("JLOffBlock");

                entity.Property(e => e.JlonBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("JLOnBlock");

                entity.Property(e => e.JltakeOff)
                    .HasColumnType("datetime")
                    .HasColumnName("JLTakeOff");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LinkedFlightNumber).HasMaxLength(50);

                entity.Property(e => e.LinkedReasonTitle).HasMaxLength(1000);

                entity.Property(e => e.LinkedRemark).HasMaxLength(500);

                entity.Property(e => e.Manufacturer).HasMaxLength(1000);

                entity.Property(e => e.Msn).HasColumnName("MSN");

                entity.Property(e => e.Notes)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.Osta)
                    .HasColumnType("datetime")
                    .HasColumnName("OSTA");

                entity.Property(e => e.OtoAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OToAirportIATA");

                entity.Property(e => e.OtoAirportId).HasColumnName("OToAirportId");

                entity.Property(e => e.Pflr).HasColumnName("PFLR");

                entity.Property(e => e.Progress).HasColumnName("progress");

                entity.Property(e => e.RampDate).HasColumnType("datetime");

                entity.Property(e => e.RampReason).HasMaxLength(1000);

                entity.Property(e => e.RampRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RedirectDate).HasColumnType("datetime");

                entity.Property(e => e.RedirectReason).HasMaxLength(1000);

                entity.Property(e => e.RedirectRemark).HasMaxLength(500);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Sitatime).HasColumnName("SITATime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Staplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STAPlanned");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("startDate");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Stdplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STDPlanned");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TaskId).HasColumnName("taskId");

                entity.Property(e => e.TaskName)
                    .HasMaxLength(904)
                    .HasColumnName("taskName");

                entity.Property(e => e.To)
                    .HasMaxLength(255)
                    .HasColumnName("to");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.ToAirportName).HasMaxLength(500);

                entity.Property(e => e.ToLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ViewFlightMatchingList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightMatchingList");

                entity.Property(e => e.FirstCrew)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Rn).HasColumnName("RN");

                entity.Property(e => e.SecondCrew)
                    .IsRequired()
                    .HasMaxLength(1001);
            });

            modelBuilder.Entity<ViewFlightPlan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightPlan");

                entity.Property(e => e.BaseIata)
                    .HasMaxLength(255)
                    .HasColumnName("BaseIATA");

                entity.Property(e => e.Customer).IsRequired();

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateApproved100).HasColumnType("datetime");

                entity.Property(e => e.DateApproved50).HasColumnType("datetime");

                entity.Property(e => e.DateApproved60).HasColumnType("datetime");

                entity.Property(e => e.DateApproved70).HasColumnType("datetime");

                entity.Property(e => e.DateApproved80).HasColumnType("datetime");

                entity.Property(e => e.DateApproved90).HasColumnType("datetime");

                entity.Property(e => e.DateFirst).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateLast).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.IntervalType)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterAssignProgress).HasColumnType("numeric(28, 12)");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.VirtualRegister).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewFlightPlanCalander>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightPlanCalander");

                entity.Property(e => e.BaseIata)
                    .HasMaxLength(255)
                    .HasColumnName("BaseIATA");

                entity.Property(e => e.BaseName).HasMaxLength(500);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateApplied).HasColumnType("datetime");

                entity.Property(e => e.DateApproved100).HasColumnType("datetime");

                entity.Property(e => e.DateApproved50).HasColumnType("datetime");

                entity.Property(e => e.DateApproved60).HasColumnType("datetime");

                entity.Property(e => e.DateApproved70).HasColumnType("datetime");

                entity.Property(e => e.DateApproved80).HasColumnType("datetime");

                entity.Property(e => e.DateApproved90).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.IntervalType)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterAssignProgress).HasColumnType("numeric(28, 12)");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.VirtualRegister).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewFlightPlanCalanderCrew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightPlanCalanderCrew");

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.AtpldateExpire)
                    .HasColumnType("date")
                    .HasColumnName("ATPLDateExpire");

                entity.Property(e => e.AtpldateIssue)
                    .HasColumnType("date")
                    .HasColumnName("ATPLDateIssue");

                entity.Property(e => e.AtplexpireStatus).HasColumnName("ATPLExpireStatus");

                entity.Property(e => e.Atplnumber)
                    .HasMaxLength(500)
                    .HasColumnName("ATPLNumber");

                entity.Property(e => e.AvStatus)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CaoCardNumber).HasMaxLength(500);

                entity.Property(e => e.CompetencyNo).HasMaxLength(500);

                entity.Property(e => e.CpldateExpire)
                    .HasColumnType("date")
                    .HasColumnName("CPLDateExpire");

                entity.Property(e => e.CpldateIssue)
                    .HasColumnType("date")
                    .HasColumnName("CPLDateIssue");

                entity.Property(e => e.CplexpireStatus).HasColumnName("CPLExpireStatus");

                entity.Property(e => e.Cplnumber)
                    .HasMaxLength(500)
                    .HasColumnName("CPLNumber");

                entity.Property(e => e.CurrentLocationAirporIata)
                    .HasMaxLength(255)
                    .HasColumnName("CurrentLocationAirporIATA");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateBirth).HasColumnType("date");

                entity.Property(e => e.DateCaoCardExpire).HasColumnType("date");

                entity.Property(e => e.DateCaoCardIssue).HasColumnType("date");

                entity.Property(e => e.DateConfirmed).HasColumnType("datetime");

                entity.Property(e => e.DateJoinAvation).HasColumnType("date");

                entity.Property(e => e.DateJoinCompany).HasColumnType("date");

                entity.Property(e => e.DateLastCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateLastCheckUP");

                entity.Property(e => e.DateNextCheckUp)
                    .HasColumnType("date")
                    .HasColumnName("DateNextCheckUP");

                entity.Property(e => e.DatePassportExpire).HasColumnType("date");

                entity.Property(e => e.DatePassportIssue).HasColumnType("date");

                entity.Property(e => e.DateRegister).HasColumnType("datetime");

                entity.Property(e => e.DateYearOfExperience).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FaxTelNumber).HasMaxLength(500);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Flights)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.JobGroup)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.MccdateExpire)
                    .HasColumnType("date")
                    .HasColumnName("MCCDateExpire");

                entity.Property(e => e.MccdateIssue)
                    .HasColumnType("date")
                    .HasColumnName("MCCDateIssue");

                entity.Property(e => e.MccexpireStatus).HasColumnName("MCCExpireStatus");

                entity.Property(e => e.Mccnumber)
                    .HasMaxLength(500)
                    .HasColumnName("MCCNumber");

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.PassportNumber).HasMaxLength(500);

                entity.Property(e => e.Phone1).HasMaxLength(500);

                entity.Property(e => e.Phone2).HasMaxLength(500);

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.PpldateExpire)
                    .HasColumnType("date")
                    .HasColumnName("PPLDateExpire");

                entity.Property(e => e.PpldateIssue)
                    .HasColumnType("date")
                    .HasColumnName("PPLDateIssue");

                entity.Property(e => e.PplexpireStatus).HasColumnName("PPLExpireStatus");

                entity.Property(e => e.Pplnumber)
                    .HasMaxLength(500)
                    .HasColumnName("PPLNumber");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.Username).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewFlightPlanCalendarRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightPlanCalendarRegister");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewFlightPlanCalendarRegisterAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightPlanCalendarRegisterAll");

                entity.Property(e => e.Date).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewFlightPlanItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightPlanItem");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.BaseIata)
                    .HasMaxLength(255)
                    .HasColumnName("BaseIATA");

                entity.Property(e => e.BaseName).HasMaxLength(500);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Duration)
                    .HasColumnType("numeric(20, 6)")
                    .HasColumnName("duration");

                entity.Property(e => e.FlightNumber).HasMaxLength(255);

                entity.Property(e => e.FlightPlan)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FlightStatus).HasMaxLength(50);

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.From)
                    .HasMaxLength(255)
                    .HasColumnName("from");

                entity.Property(e => e.FromAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FromAirportName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FromCity).HasMaxLength(500);

                entity.Property(e => e.FromContry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FromLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IntervalType)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Manufacturer)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Msn).HasColumnName("MSN");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.Progress).HasColumnName("progress");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("startDate");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.TaskId).HasColumnName("taskID");

                entity.Property(e => e.TaskName)
                    .HasMaxLength(767)
                    .HasColumnName("taskName");

                entity.Property(e => e.To)
                    .HasMaxLength(255)
                    .HasColumnName("to");

                entity.Property(e => e.ToAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.ToAirportName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ToCity).HasMaxLength(500);

                entity.Property(e => e.ToCountry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ToLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Unknown).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFlightPlanItemCalander>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightPlanItemCalander");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.BaseIata)
                    .HasMaxLength(255)
                    .HasColumnName("BaseIATA");

                entity.Property(e => e.BaseName).HasMaxLength(500);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateApplied).HasColumnType("datetime");

                entity.Property(e => e.DateApproved100).HasColumnType("datetime");

                entity.Property(e => e.DateApproved50).HasColumnType("datetime");

                entity.Property(e => e.DateApproved60).HasColumnType("datetime");

                entity.Property(e => e.DateApproved70).HasColumnType("datetime");

                entity.Property(e => e.DateApproved80).HasColumnType("datetime");

                entity.Property(e => e.DateApproved90).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.Duration)
                    .HasColumnType("numeric(20, 6)")
                    .HasColumnName("duration");

                entity.Property(e => e.FlightNumber).HasMaxLength(255);

                entity.Property(e => e.FlightPlan)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FlightStatus).HasMaxLength(50);

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.From)
                    .HasMaxLength(255)
                    .HasColumnName("from");

                entity.Property(e => e.FromAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FromAirportName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FromCity).HasMaxLength(500);

                entity.Property(e => e.FromContry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FromLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IntervalType)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Manufacturer)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Msn).HasColumnName("MSN");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.Progress).HasColumnName("progress");

                entity.Property(e => e.Register).HasMaxLength(306);

                entity.Property(e => e.RegisterAssignProgress).HasColumnType("numeric(28, 12)");

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("startDate");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.TaskId).HasColumnName("taskID");

                entity.Property(e => e.TaskName)
                    .HasMaxLength(767)
                    .HasColumnName("taskName");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.To)
                    .HasMaxLength(255)
                    .HasColumnName("to");

                entity.Property(e => e.ToAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.ToAirportName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ToCity).HasMaxLength(500);

                entity.Property(e => e.ToCountry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ToLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Unknown).HasMaxLength(255);

                entity.Property(e => e.VirtualRegister).HasMaxLength(50);

                entity.Property(e => e.Xa)
                    .HasColumnType("datetime")
                    .HasColumnName("XA");
            });

            modelBuilder.Entity<ViewFlightPlanItemPermit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightPlanItemPermit");

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.BaseIata)
                    .HasMaxLength(255)
                    .HasColumnName("BaseIATA");

                entity.Property(e => e.BaseName).HasMaxLength(500);

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateApplied).HasColumnType("datetime");

                entity.Property(e => e.DateApproved100).HasColumnType("datetime");

                entity.Property(e => e.DateApproved50).HasColumnType("datetime");

                entity.Property(e => e.DateApproved60).HasColumnType("datetime");

                entity.Property(e => e.DateApproved70).HasColumnType("datetime");

                entity.Property(e => e.DateApproved80).HasColumnType("datetime");

                entity.Property(e => e.DateFlight).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(255);

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.IntervalType)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.PermitRemark).HasMaxLength(1000);

                entity.Property(e => e.Register).HasMaxLength(306);

                entity.Property(e => e.RegisterAssignProgress).HasColumnType("numeric(28, 12)");

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.VirtualRegister).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewFlightPlanRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightPlanRegister");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateApproved).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.PlannedRegister)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewFlightPlanRegisterAssigned>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightPlanRegisterAssigned");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<ViewFlightRoute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightRoute");

                entity.Property(e => e.Equipment)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FromAirportLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromAirportLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromAirportName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FromCity)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FromCountry)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FromSortName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(513);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.ToAirportLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToAirportLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToAirportName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ToCity)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ToCountry)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ToSortName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFlightSecurity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightSecurity");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Cacheck1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CACheck1");

                entity.Property(e => e.Cacheck2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CACheck2");

                entity.Property(e => e.Cacheck3)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CACheck3");

                entity.Property(e => e.Cacheck4)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CACheck4");

                entity.Property(e => e.Caobs1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CAOBS1");

                entity.Property(e => e.Caobs2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CAOBS2");

                entity.Property(e => e.Caobs3)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CAOBS3");

                entity.Property(e => e.Caobs4)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CAOBS4");

                entity.Property(e => e.Cpt)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPT");

                entity.Property(e => e.Cpt2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPT2");

                entity.Property(e => e.Customer)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Fa1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FA1");

                entity.Property(e => e.Fa2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FA2");

                entity.Property(e => e.Fa3)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FA3");

                entity.Property(e => e.Fa4)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FA4");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.Fo)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FO");

                entity.Property(e => e.Fo2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FO2");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Ip)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("IP");

                entity.Property(e => e.Ip2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("IP2");

                entity.Property(e => e.Isccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ISCCM");

                entity.Property(e => e.Obsp1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("OBSP1");

                entity.Property(e => e.Obsp2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("OBSP2");

                entity.Property(e => e.Purser)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Purser2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Purser3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Register)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Safety)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<ViewFlightSecurityDh>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightSecurityDH");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Cacheck1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CACheck1");

                entity.Property(e => e.Cacheck2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CACheck2");

                entity.Property(e => e.Cacheck3)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CACheck3");

                entity.Property(e => e.Cacheck4)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CACheck4");

                entity.Property(e => e.Caobs1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CAOBS1");

                entity.Property(e => e.Caobs2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CAOBS2");

                entity.Property(e => e.Caobs3)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CAOBS3");

                entity.Property(e => e.Caobs4)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CAOBS4");

                entity.Property(e => e.Cpt)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPT");

                entity.Property(e => e.Cpt2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPT2");

                entity.Property(e => e.Customer)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Fa1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FA1");

                entity.Property(e => e.Fa2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FA2");

                entity.Property(e => e.Fa3)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FA3");

                entity.Property(e => e.Fa4)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FA4");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.Fo)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FO");

                entity.Property(e => e.Fo2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FO2");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Ip)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("IP");

                entity.Property(e => e.Ip2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("IP2");

                entity.Property(e => e.Isccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ISCCM");

                entity.Property(e => e.Obsp1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("OBSP1");

                entity.Property(e => e.Obsp2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("OBSP2");

                entity.Property(e => e.Purser)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Purser2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Purser3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Register)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Safety)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<ViewFlightsAcType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightsAcType");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFlightsFrom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightsFrom");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFlightsGantt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_ViewFlightsGantt");

                entity.Property(e => e.ActualFlightHoffBlock).HasColumnName("ActualFlightHOffBlock");

                entity.Property(e => e.ActualFlightHtakeoff).HasColumnName("ActualFlightHTakeoff");

                entity.Property(e => e.ActualFlightMoffBlock)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMOffBlock");

                entity.Property(e => e.ActualFlightMtakeoff)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMTakeoff");

                entity.Property(e => e.AircraftType)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.BaseIata)
                    .HasMaxLength(255)
                    .HasColumnName("BaseIATA");

                entity.Property(e => e.BaseName).HasMaxLength(500);

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CancelReason).HasMaxLength(1000);

                entity.Property(e => e.CancelRemark).HasMaxLength(500);

                entity.Property(e => e.CargoUnit).HasMaxLength(1000);

                entity.Property(e => e.CargoUnitId).HasColumnName("CargoUnitID");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.CpcrewId).HasColumnName("CPCrewId");

                entity.Property(e => e.Cpdh).HasColumnName("CPDH");

                entity.Property(e => e.Cpfdpid).HasColumnName("CPFDPId");

                entity.Property(e => e.CpfdpitemId).HasColumnName("CPFDPItemId");

                entity.Property(e => e.CpflightTypeId).HasColumnName("CPFlightTypeId");

                entity.Property(e => e.Cpinstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPInstructor");

                entity.Property(e => e.Cpisccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPISCCM");

                entity.Property(e => e.Cpp1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP1");

                entity.Property(e => e.Cpp2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP2");

                entity.Property(e => e.CppositionId).HasColumnName("CPPositionId");

                entity.Property(e => e.Cpregister)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPRegister");

                entity.Property(e => e.Cpsccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPSCCM");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.Duration).HasColumnName("duration");

                entity.Property(e => e.FlightGroupId).HasColumnName("FlightGroupID");

                entity.Property(e => e.FlightHplanned).HasColumnName("FlightHPlanned");

                entity.Property(e => e.FlightMplanned).HasColumnName("FlightMPlanned");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan).HasMaxLength(500);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FlightStatusBgColor).HasMaxLength(255);

                entity.Property(e => e.FlightStatusClass).HasMaxLength(255);

                entity.Property(e => e.FlightStatusColor).HasMaxLength(255);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FlightTypeAbr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FpflightHh).HasColumnName("FPFlightHH");

                entity.Property(e => e.FpflightMm).HasColumnName("FPFlightMM");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.From)
                    .HasMaxLength(255)
                    .HasColumnName("from");

                entity.Property(e => e.FromAirportCity)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FromAirportName).HasMaxLength(500);

                entity.Property(e => e.FromContry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FromLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FuelActual).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelPlanned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnit).HasMaxLength(1000);

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.FuelVariance).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.Gwland)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("GWLand");

                entity.Property(e => e.Gwto)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("GWTO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Jlblhh).HasColumnName("JLBLHH");

                entity.Property(e => e.Jlblmm).HasColumnName("JLBLMM");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LinkedFlightNumber).HasMaxLength(50);

                entity.Property(e => e.LinkedReasonTitle).HasMaxLength(1000);

                entity.Property(e => e.LinkedRemark).HasMaxLength(500);

                entity.Property(e => e.Manufacturer).HasMaxLength(1000);

                entity.Property(e => e.Msn).HasColumnName("MSN");

                entity.Property(e => e.Notes)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.OaircraftType)
                    .HasMaxLength(255)
                    .HasColumnName("OAircraftType");

                entity.Property(e => e.Osta)
                    .HasColumnType("datetime")
                    .HasColumnName("OSTA");

                entity.Property(e => e.OtoAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OToAirportIATA");

                entity.Property(e => e.OtoAirportId).HasColumnName("OToAirportId");

                entity.Property(e => e.OtypeId).HasColumnName("OTypeId");

                entity.Property(e => e.Pflr).HasColumnName("PFLR");

                entity.Property(e => e.Progress).HasColumnName("progress");

                entity.Property(e => e.RampDate).HasColumnType("datetime");

                entity.Property(e => e.RampReason).HasMaxLength(1000);

                entity.Property(e => e.RampRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RedirectDate).HasColumnType("datetime");

                entity.Property(e => e.RedirectReason).HasMaxLength(1000);

                entity.Property(e => e.RedirectRemark).HasMaxLength(500);

                entity.Property(e => e.Register).HasMaxLength(53);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Sitatime).HasColumnName("SITATime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Staplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STAPlanned");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("startDate");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Stdplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STDPlanned");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TaskId).HasColumnName("taskId");

                entity.Property(e => e.TaskName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("taskName");

                entity.Property(e => e.To)
                    .HasMaxLength(255)
                    .HasColumnName("to");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.ToAirportName).HasMaxLength(500);

                entity.Property(e => e.ToLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ViewFlightsGantt1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightsGantt");

                entity.Property(e => e.ActualFlightHoffBlock).HasColumnName("ActualFlightHOffBlock");

                entity.Property(e => e.ActualFlightHtakeoff).HasColumnName("ActualFlightHTakeoff");

                entity.Property(e => e.ActualFlightMoffBlock)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMOffBlock");

                entity.Property(e => e.ActualFlightMtakeoff)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMTakeoff");

                entity.Property(e => e.AircraftType)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.BaseIata)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("BaseIATA");

                entity.Property(e => e.BaseName)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CancelReason).HasMaxLength(1000);

                entity.Property(e => e.CancelRemark).HasMaxLength(500);

                entity.Property(e => e.CargoUnit).HasMaxLength(1000);

                entity.Property(e => e.CargoUnitId).HasColumnName("CargoUnitID");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.ChrCode).HasMaxLength(300);

                entity.Property(e => e.ChrTitle).HasMaxLength(300);

                entity.Property(e => e.CpcrewId).HasColumnName("CPCrewId");

                entity.Property(e => e.Cpdh).HasColumnName("CPDH");

                entity.Property(e => e.Cpfdpid).HasColumnName("CPFDPId");

                entity.Property(e => e.CpfdpitemId).HasColumnName("CPFDPItemId");

                entity.Property(e => e.CpflightTypeId).HasColumnName("CPFlightTypeId");

                entity.Property(e => e.Cpinstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPInstructor");

                entity.Property(e => e.Cpisccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPISCCM");

                entity.Property(e => e.Cpp1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP1");

                entity.Property(e => e.Cpp2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP2");

                entity.Property(e => e.CppositionId).HasColumnName("CPPositionId");

                entity.Property(e => e.Cpregister)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPRegister");

                entity.Property(e => e.Cpsccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPSCCM");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.Duration)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("duration");

                entity.Property(e => e.FlightGroupId).HasColumnName("FlightGroupID");

                entity.Property(e => e.FlightHplanned).HasColumnName("FlightHPlanned");

                entity.Property(e => e.FlightMplanned).HasColumnName("FlightMPlanned");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan).HasMaxLength(500);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FlightStatusBgColor).HasMaxLength(255);

                entity.Property(e => e.FlightStatusClass).HasMaxLength(255);

                entity.Property(e => e.FlightStatusColor).HasMaxLength(255);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightType)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.FlightTypeAbr)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FpflightHh).HasColumnName("FPFlightHH");

                entity.Property(e => e.FpflightMm).HasColumnName("FPFlightMM");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.From)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("from");

                entity.Property(e => e.FromAirportCity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FromAirportName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromContry)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromSortName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FuelActual).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelPlanned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnit).HasMaxLength(1000);

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.FuelVariance).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.Gwland)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("GWLand");

                entity.Property(e => e.Gwto)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("GWTO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Jlblhh).HasColumnName("JLBLHH");

                entity.Property(e => e.Jlblmm).HasColumnName("JLBLMM");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LinkedFlightNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LinkedReasonTitle)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LinkedRemark)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Manufacturer)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Msn).HasColumnName("MSN");

                entity.Property(e => e.Notes)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.OaircraftType)
                    .HasMaxLength(255)
                    .HasColumnName("OAircraftType");

                entity.Property(e => e.Osta)
                    .HasColumnType("datetime")
                    .HasColumnName("OSTA");

                entity.Property(e => e.OtoAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OToAirportIATA");

                entity.Property(e => e.OtoAirportId).HasColumnName("OToAirportId");

                entity.Property(e => e.OtypeId).HasColumnName("OTypeId");

                entity.Property(e => e.Pflr).HasColumnName("PFLR");

                entity.Property(e => e.Progress).HasColumnName("progress");

                entity.Property(e => e.RampDate).HasColumnType("datetime");

                entity.Property(e => e.RampReason).HasMaxLength(1000);

                entity.Property(e => e.RampRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RedirectDate).HasColumnType("datetime");

                entity.Property(e => e.RedirectReason).HasMaxLength(1000);

                entity.Property(e => e.RedirectRemark).HasMaxLength(500);

                entity.Property(e => e.Register).HasMaxLength(53);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Sitatime).HasColumnName("SITATime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Staplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STAPlanned");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("startDate");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Stdplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STDPlanned");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TaskId).HasColumnName("taskId");

                entity.Property(e => e.TaskName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("taskName");

                entity.Property(e => e.To)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("to");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.ToAirportName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ViewFlightsGantt2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightsGantt2");

                entity.Property(e => e.ActualFlightHoffBlock).HasColumnName("ActualFlightHOffBlock");

                entity.Property(e => e.ActualFlightHtakeoff).HasColumnName("ActualFlightHTakeoff");

                entity.Property(e => e.ActualFlightMoffBlock)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMOffBlock");

                entity.Property(e => e.ActualFlightMtakeoff)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMTakeoff");

                entity.Property(e => e.AircraftType)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Airline).HasMaxLength(1000);

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.BaseIata)
                    .HasMaxLength(255)
                    .HasColumnName("BaseIATA");

                entity.Property(e => e.BaseName).HasMaxLength(500);

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CancelReason).HasMaxLength(1000);

                entity.Property(e => e.CancelRemark).HasMaxLength(500);

                entity.Property(e => e.CargoUnit).HasMaxLength(1000);

                entity.Property(e => e.CargoUnitId).HasColumnName("CargoUnitID");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.CpcrewId).HasColumnName("CPCrewId");

                entity.Property(e => e.Cpdh).HasColumnName("CPDH");

                entity.Property(e => e.Cpfdpid).HasColumnName("CPFDPId");

                entity.Property(e => e.CpfdpitemId).HasColumnName("CPFDPItemId");

                entity.Property(e => e.CpflightTypeId).HasColumnName("CPFlightTypeId");

                entity.Property(e => e.Cpinstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPInstructor");

                entity.Property(e => e.Cpisccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPISCCM");

                entity.Property(e => e.Cpp1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP1");

                entity.Property(e => e.Cpp2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP2");

                entity.Property(e => e.CppositionId).HasColumnName("CPPositionId");

                entity.Property(e => e.Cpregister)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPRegister");

                entity.Property(e => e.Cpsccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPSCCM");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.Duration)
                    .HasColumnType("numeric(19, 6)")
                    .HasColumnName("duration");

                entity.Property(e => e.FlightGroupId).HasColumnName("FlightGroupID");

                entity.Property(e => e.FlightHplanned).HasColumnName("FlightHPlanned");

                entity.Property(e => e.FlightMplanned).HasColumnName("FlightMPlanned");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan).HasMaxLength(500);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusBgColor).HasMaxLength(255);

                entity.Property(e => e.FlightStatusClass).HasMaxLength(255);

                entity.Property(e => e.FlightStatusColor).HasMaxLength(255);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FlightTypeAbr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FpflightHh).HasColumnName("FPFlightHH");

                entity.Property(e => e.FpflightMm).HasColumnName("FPFlightMM");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.From)
                    .HasMaxLength(255)
                    .HasColumnName("from");

                entity.Property(e => e.FromAirportCity)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FromAirportName).HasMaxLength(500);

                entity.Property(e => e.FromContry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FromLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FuelActual).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelPlanned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnit).HasMaxLength(1000);

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.FuelVariance).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.Gwland)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("GWLand");

                entity.Property(e => e.Gwto)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("GWTO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Jlblhh).HasColumnName("JLBLHH");

                entity.Property(e => e.Jlblmm).HasColumnName("JLBLMM");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LinkedFlightNumber).HasMaxLength(50);

                entity.Property(e => e.LinkedReasonTitle).HasMaxLength(1000);

                entity.Property(e => e.LinkedRemark).HasMaxLength(500);

                entity.Property(e => e.Manufacturer).HasMaxLength(1000);

                entity.Property(e => e.Msn).HasColumnName("MSN");

                entity.Property(e => e.Notes)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.OaircraftType)
                    .HasMaxLength(255)
                    .HasColumnName("OAircraftType");

                entity.Property(e => e.Osta)
                    .HasColumnType("datetime")
                    .HasColumnName("OSTA");

                entity.Property(e => e.OtoAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OToAirportIATA");

                entity.Property(e => e.OtoAirportId).HasColumnName("OToAirportId");

                entity.Property(e => e.OtypeId).HasColumnName("OTypeId");

                entity.Property(e => e.Pflr).HasColumnName("PFLR");

                entity.Property(e => e.Progress).HasColumnName("progress");

                entity.Property(e => e.RampDate).HasColumnType("datetime");

                entity.Property(e => e.RampReason).HasMaxLength(1000);

                entity.Property(e => e.RampRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RedirectDate).HasColumnType("datetime");

                entity.Property(e => e.RedirectReason).HasMaxLength(1000);

                entity.Property(e => e.RedirectRemark).HasMaxLength(500);

                entity.Property(e => e.Register).HasMaxLength(53);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Sitatime).HasColumnName("SITATime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Staplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STAPlanned");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("startDate");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Stdplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STDPlanned");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TaskId).HasColumnName("taskId");

                entity.Property(e => e.TaskName)
                    .HasMaxLength(904)
                    .HasColumnName("taskName");

                entity.Property(e => e.To)
                    .HasMaxLength(255)
                    .HasColumnName("to");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.ToAirportName).HasMaxLength(500);

                entity.Property(e => e.ToLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ViewFlightsRegister>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightsRegister");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFlightsTo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFlightsTo");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ViewFolderApplicable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFolderApplicable");

                entity.Property(e => e.FullCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFormA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFormA");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.FlightHour).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FreightTone).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(4000)
                    .HasColumnName("PDate");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(4000)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(4000)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.PyearMonthName)
                    .HasMaxLength(4000)
                    .HasColumnName("PYearMonthName");

                entity.Property(e => e.PyearName)
                    .HasMaxLength(4000)
                    .HasColumnName("PYearName");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.YearMonthName).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewFormAmonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFormAMonthly");

                entity.Property(e => e.FlightHour).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FlightHourInt).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FreightTone).HasColumnType("decimal(38, 0)");

                entity.Property(e => e.FreightToneInt).HasColumnType("decimal(38, 0)");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.YearMonth).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewFormAmonthlyDom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFormAMonthlyDom");

                entity.Property(e => e.FlightHour).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.FreightTone).HasColumnType("decimal(38, 0)");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.YearMonth).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewFormAmonthlyInt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFormAMonthlyInt");

                entity.Property(e => e.FlightHour).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.FreightTone).HasColumnType("decimal(38, 0)");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.YearMonth).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewFormAyearly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFormAYearly");

                entity.Property(e => e.FlightHour).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FlightHourInt).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FreightTone).HasColumnType("decimal(38, 0)");

                entity.Property(e => e.FreightToneInt).HasColumnType("decimal(38, 0)");
            });

            modelBuilder.Entity<ViewFormAyearlyDom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFormAYearlyDom");

                entity.Property(e => e.FlightHour).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FreightTone).HasColumnType("decimal(38, 0)");
            });

            modelBuilder.Entity<ViewFormAyearlyInt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFormAYearlyInt");

                entity.Property(e => e.FlightHour).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.FreightTone).HasColumnType("decimal(38, 0)");
            });

            modelBuilder.Entity<ViewFtl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewFTL");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.FlightCyearLocal).HasColumnName("FlightCYearLocal");
            });

            modelBuilder.Entity<ViewIdeaLast>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewIdeaLast");

                entity.Property(e => e.CourseCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CourseTitle)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DateExpire).HasColumnType("date");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName).HasMaxLength(255);

                entity.Property(e => e.MappedTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("NID");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewIdeaRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewIdeaRank");

                entity.Property(e => e.CourseCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CourseTitle).HasMaxLength(255);

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateExpire).HasColumnType("date");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName).HasMaxLength(255);

                entity.Property(e => e.MappedTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("NID");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewIdeaSessionItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewIdeaSessionItem");

                entity.Property(e => e.ClassId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ClassID");

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateBegin).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromUtc).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToUtc).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.IdeaId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nid)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NID");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RemarkSession)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewIdeaSessionItemX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewIdeaSessionItemX");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromUtc).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.DateToUtc).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Nid)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NID");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewIdeaSessionUpdateError>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewIdeaSessionUpdateError");

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.Flights)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RestUntil).HasColumnType("datetime");

                entity.Property(e => e.Route)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SessionDateFrom).HasColumnType("datetime");

                entity.Property(e => e.SessionDateTo).HasColumnType("datetime");

                entity.Property(e => e.VisitDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewIdeaUnique>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewIdeaUnique");

                entity.Property(e => e.ClassId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ClassID");

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CourseType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CrewNid)
                    .HasMaxLength(500)
                    .HasColumnName("CrewNID");

                entity.Property(e => e.CrewPid)
                    .HasMaxLength(500)
                    .HasColumnName("CrewPID");

                entity.Property(e => e.DateBegin).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateExpire).HasColumnType("datetime");

                entity.Property(e => e.FirstName).HasMaxLength(500);

                entity.Property(e => e.IdeaId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.Nid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NID");

                entity.Property(e => e.Pid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PID");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewIdeaUniqueLast>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewIdeaUniqueLast");

                entity.Property(e => e.ClassId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ClassID");

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CourseType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CrewNid)
                    .HasMaxLength(500)
                    .HasColumnName("CrewNID");

                entity.Property(e => e.CrewPid)
                    .HasMaxLength(500)
                    .HasColumnName("CrewPID");

                entity.Property(e => e.DateBegin).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateExpire).HasColumnType("datetime");

                entity.Property(e => e.FirstName).HasMaxLength(500);

                entity.Property(e => e.IdeaId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.Nid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NID");

                entity.Property(e => e.Pid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PID");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewImportPlan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewImportPlan");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Base)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Duration).HasMaxLength(255);

                entity.Property(e => e.From)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Line).HasMaxLength(255);

                entity.Property(e => e.No)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Reg)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stautc)
                    .HasColumnType("datetime")
                    .HasColumnName("STAUtc");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdutc)
                    .HasColumnType("datetime")
                    .HasColumnName("STDUtc");

                entity.Property(e => e.To)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Type).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewIpaccess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewIPAccess");

                entity.Property(e => e.Ip)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IP");

                entity.Property(e => e.UserId)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<ViewJlog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewJLog");

                entity.Property(e => e.ActualFlightHoffBlock).HasColumnName("ActualFlightHOffBlock");

                entity.Property(e => e.ActualFlightHtakeoff).HasColumnName("ActualFlightHTakeoff");

                entity.Property(e => e.ActualFlightMoffBlock)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMOffBlock");

                entity.Property(e => e.ActualFlightMtakeoff)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMTakeoff");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalDispatch).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureDispatch).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.Duration)
                    .HasColumnType("numeric(19, 6)")
                    .HasColumnName("duration");

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightHplanned).HasColumnName("FlightHPlanned");

                entity.Property(e => e.FlightMplanned).HasColumnName("FlightMPlanned");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FpflightHh).HasColumnName("FPFlightHH");

                entity.Property(e => e.FpflightMm).HasColumnName("FPFlightMM");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.From)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("from");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JlblockTime).HasColumnName("JLBlockTime");

                entity.Property(e => e.JlflightTime).HasColumnName("JLFlightTime");

                entity.Property(e => e.Jllanding)
                    .HasColumnType("datetime")
                    .HasColumnName("JLLanding");

                entity.Property(e => e.JloffBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("JLOffBlock");

                entity.Property(e => e.JlonBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("JLOnBlock");

                entity.Property(e => e.JltakeOff)
                    .HasColumnType("datetime")
                    .HasColumnName("JLTakeOff");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.Msn).HasColumnName("MSN");

                entity.Property(e => e.Notes)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.Osta)
                    .HasColumnType("datetime")
                    .HasColumnName("OSTA");

                entity.Property(e => e.OtoAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OToAirportIATA");

                entity.Property(e => e.OtoAirportId).HasColumnName("OToAirportId");

                entity.Property(e => e.Pflr).HasColumnName("PFLR");

                entity.Property(e => e.Progress).HasColumnName("progress");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Sitatime).HasColumnName("SITATime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Staplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STAPlanned");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("startDate");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Stdplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STDPlanned");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TaskId).HasColumnName("taskId");

                entity.Property(e => e.TaskName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("taskName");

                entity.Property(e => e.To)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("to");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ViewJobGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewJobGroup");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FullCode)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FullCode2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ManagerFullCode2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ManagerTitle).HasMaxLength(500);

                entity.Property(e => e.Parent).HasMaxLength(500);

                entity.Property(e => e.ParentCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RootCode)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.RootTitle).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.TitleFormated).HasMaxLength(4000);

                entity.Property(e => e.TitleFormatedSpace).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewJobGroupType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewJobGroupType");

                entity.Property(e => e.FullCode)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewJournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewJournal");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Title).HasMaxLength(1000);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Website).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewLayOver>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewLayOver");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<ViewLegCrew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewLegCrew");

                entity.Property(e => e.ActualFlightHoffBlock).HasColumnName("ActualFlightHOffBlock");

                entity.Property(e => e.ActualFlightHtakeoff).HasColumnName("ActualFlightHTakeoff");

                entity.Property(e => e.ActualFlightMoffBlock)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMOffBlock");

                entity.Property(e => e.ActualFlightMtakeoff)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMTakeoff");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FdpitemId).HasColumnName("FDPItemId");

                entity.Property(e => e.FlightHplanned).HasColumnName("FlightHPlanned");

                entity.Property(e => e.FlightMplanned).HasColumnName("FlightMPlanned");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FpflightHh).HasColumnName("FPFlightHH");

                entity.Property(e => e.FpflightMm).HasColumnName("FPFlightMM");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.Msn).HasColumnName("MSN");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1003);

                entity.Property(e => e.Osta)
                    .HasColumnType("datetime")
                    .HasColumnName("OSTA");

                entity.Property(e => e.OtoAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OToAirportIATA");

                entity.Property(e => e.OtoAirportId).HasColumnName("OToAirportId");

                entity.Property(e => e.Position)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sitatime).HasColumnName("SITATime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Staplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STAPlanned");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Stdplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STDPlanned");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<ViewLegFdpItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewLegFdpItem");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewLegFuel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewLegFuel");

                entity.Property(e => e.ActualFlightHoffBlock).HasColumnName("ActualFlightHOffBlock");

                entity.Property(e => e.ActualFlightHtakeoff).HasColumnName("ActualFlightHTakeoff");

                entity.Property(e => e.ActualFlightMoffBlock)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMOffBlock");

                entity.Property(e => e.ActualFlightMtakeoff)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMTakeoff");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.CargoUnit).HasMaxLength(1000);

                entity.Property(e => e.CargoUnitId).HasColumnName("CargoUnitID");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FlightHplanned).HasColumnName("FlightHPlanned");

                entity.Property(e => e.FlightMplanned).HasColumnName("FlightMPlanned");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FpflightHh).HasColumnName("FPFlightHH");

                entity.Property(e => e.FpflightMm).HasColumnName("FPFlightMM");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnit).HasMaxLength(1000);

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.FuelVariance).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Jllanding)
                    .HasColumnType("datetime")
                    .HasColumnName("JLLanding");

                entity.Property(e => e.JloffBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("JLOffBlock");

                entity.Property(e => e.JlonBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("JLOnBlock");

                entity.Property(e => e.JltakeOff)
                    .HasColumnType("datetime")
                    .HasColumnName("JLTakeOff");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.Notes)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.Osta)
                    .HasColumnType("datetime")
                    .HasColumnName("OSTA");

                entity.Property(e => e.OtoAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OToAirportIATA");

                entity.Property(e => e.OtoAirportId).HasColumnName("OToAirportId");

                entity.Property(e => e.Pflr).HasColumnName("PFLR");

                entity.Property(e => e.Progress).HasColumnName("progress");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Sitatime).HasColumnName("SITATime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Staplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STAPlanned");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Stdplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STDPlanned");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TaskId).HasColumnName("taskId");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ViewLegTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_ViewLegTime");

                entity.Property(e => e.ActualFlightHoffBlock).HasColumnName("ActualFlightHOffBlock");

                entity.Property(e => e.ActualFlightHtakeoff).HasColumnName("ActualFlightHTakeoff");

                entity.Property(e => e.ActualFlightMoffBlock)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMOffBlock");

                entity.Property(e => e.ActualFlightMtakeoff)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMTakeoff");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.Duration)
                    .HasColumnType("numeric(19, 6)")
                    .HasColumnName("duration");

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightHplanned).HasColumnName("FlightHPlanned");

                entity.Property(e => e.FlightMplanned).HasColumnName("FlightMPlanned");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan).HasMaxLength(500);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FpflightHh).HasColumnName("FPFlightHH");

                entity.Property(e => e.FpflightMm).HasColumnName("FPFlightMM");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.From)
                    .HasMaxLength(255)
                    .HasColumnName("from");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JlblockTime).HasColumnName("JLBlockTime");

                entity.Property(e => e.JlflightTime).HasColumnName("JLFlightTime");

                entity.Property(e => e.Jllanding)
                    .HasColumnType("datetime")
                    .HasColumnName("JLLanding");

                entity.Property(e => e.JloffBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("JLOffBlock");

                entity.Property(e => e.JlonBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("JLOnBlock");

                entity.Property(e => e.JltakeOff)
                    .HasColumnType("datetime")
                    .HasColumnName("JLTakeOff");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.Msn).HasColumnName("MSN");

                entity.Property(e => e.Notes)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.Osta)
                    .HasColumnType("datetime")
                    .HasColumnName("OSTA");

                entity.Property(e => e.OtoAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OToAirportIATA");

                entity.Property(e => e.OtoAirportId).HasColumnName("OToAirportId");

                entity.Property(e => e.Pflr).HasColumnName("PFLR");

                entity.Property(e => e.Progress).HasColumnName("progress");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Sitatime).HasColumnName("SITATime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Staplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STAPlanned");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("startDate");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Stdplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STDPlanned");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TaskId).HasColumnName("taskId");

                entity.Property(e => e.TaskName)
                    .HasMaxLength(904)
                    .HasColumnName("taskName");

                entity.Property(e => e.To)
                    .HasMaxLength(255)
                    .HasColumnName("to");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ViewLegTime1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewLegTime");

                entity.Property(e => e.ActualFlightHoffBlock).HasColumnName("ActualFlightHOffBlock");

                entity.Property(e => e.ActualFlightHtakeoff).HasColumnName("ActualFlightHTakeoff");

                entity.Property(e => e.ActualFlightMoffBlock)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMOffBlock");

                entity.Property(e => e.ActualFlightMtakeoff)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMTakeoff");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.ChrCode).HasMaxLength(300);

                entity.Property(e => e.ChrTitle).HasMaxLength(300);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.Duration)
                    .HasColumnType("numeric(19, 6)")
                    .HasColumnName("duration");

                entity.Property(e => e.FlightDate).HasColumnType("date");

                entity.Property(e => e.FlightDateX).HasColumnType("datetime");

                entity.Property(e => e.FlightHplanned).HasColumnName("FlightHPlanned");

                entity.Property(e => e.FlightMplanned).HasColumnName("FlightMPlanned");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan).HasMaxLength(500);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FpflightHh).HasColumnName("FPFlightHH");

                entity.Property(e => e.FpflightMm).HasColumnName("FPFlightMM");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.FptripFuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPTripFuel");

                entity.Property(e => e.From)
                    .HasMaxLength(255)
                    .HasColumnName("from");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FromAirportIcao)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportICAO");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.JlblockTime).HasColumnName("JLBlockTime");

                entity.Property(e => e.JlflightTime).HasColumnName("JLFlightTime");

                entity.Property(e => e.Jllanding)
                    .HasColumnType("datetime")
                    .HasColumnName("JLLanding");

                entity.Property(e => e.JloffBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("JLOffBlock");

                entity.Property(e => e.JlonBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("JLOnBlock");

                entity.Property(e => e.JltakeOff)
                    .HasColumnType("datetime")
                    .HasColumnName("JLTakeOff");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.MaxWeighUnit)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.MaxWeightLnd).HasColumnName("MaxWeightLND");

                entity.Property(e => e.MaxWeightTo).HasColumnName("MaxWeightTO");

                entity.Property(e => e.Msn).HasColumnName("MSN");

                entity.Property(e => e.Notes)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.Osta)
                    .HasColumnType("datetime")
                    .HasColumnName("OSTA");

                entity.Property(e => e.OtoAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OToAirportIATA");

                entity.Property(e => e.OtoAirportId).HasColumnName("OToAirportId");

                entity.Property(e => e.Pflr).HasColumnName("PFLR");

                entity.Property(e => e.Progress).HasColumnName("progress");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Sitatime).HasColumnName("SITATime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Staplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STAPlanned");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("startDate");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.StddayLocal)
                    .HasColumnType("date")
                    .HasColumnName("STDDayLocal");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Stdplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STDPlanned");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TaskId).HasColumnName("taskId");

                entity.Property(e => e.TaskName)
                    .HasMaxLength(904)
                    .HasColumnName("taskName");

                entity.Property(e => e.To)
                    .HasMaxLength(255)
                    .HasColumnName("to");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.ToAirportIcao)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportICAO");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ViewLegTime2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewLegTime2");

                entity.Property(e => e.ActualFlightHoffBlock).HasColumnName("ActualFlightHOffBlock");

                entity.Property(e => e.ActualFlightHtakeoff).HasColumnName("ActualFlightHTakeoff");

                entity.Property(e => e.ActualFlightMoffBlock)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMOffBlock");

                entity.Property(e => e.ActualFlightMtakeoff)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMTakeoff");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FpflightHh).HasColumnName("FPFlightHH");

                entity.Property(e => e.FpflightMm).HasColumnName("FPFlightMM");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Jllanding)
                    .HasColumnType("datetime")
                    .HasColumnName("JLLanding");

                entity.Property(e => e.JloffBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("JLOffBlock");

                entity.Property(e => e.JlonBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("JLOnBlock");

                entity.Property(e => e.JltakeOff)
                    .HasColumnType("datetime")
                    .HasColumnName("JLTakeOff");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.Msn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MSN");

                entity.Property(e => e.Notes)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.Osta)
                    .HasColumnType("datetime")
                    .HasColumnName("OSTA");

                entity.Property(e => e.OtoAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OToAirportIATA");

                entity.Property(e => e.OtoAirportId).HasColumnName("OToAirportId");

                entity.Property(e => e.Pflr).HasColumnName("PFLR");

                entity.Property(e => e.Progress).HasColumnName("progress");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Sitatime).HasColumnName("SITATime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("startDate");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TaskId).HasColumnName("taskId");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ViewLibraryFolder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewLibraryFolder");

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fullcode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TitleFormated)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.TitleFormatedSpace)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewLocation");

                entity.Property(e => e.Address)
                    .HasMaxLength(2000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.City).HasMaxLength(500);

                entity.Property(e => e.Code)
                    .HasMaxLength(100)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Country)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FullCode)
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Parent)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.ParentCode)
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(200)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Root)
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.RootCode)
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.SortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.State).HasMaxLength(255);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.TitleFormated)
                    .HasMaxLength(4000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Type).HasMaxLength(1000);

                entity.Property(e => e.Website)
                    .HasMaxLength(500)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            });

            modelBuilder.Entity<ViewManufacturer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewManufacturer");

                entity.Property(e => e.Address).HasMaxLength(1000);

                entity.Property(e => e.ContactPerson).HasMaxLength(1000);

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.Fax)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LogoUrl)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Tel)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Website).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewMatchingList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewMatchingList");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.FirstCrew)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.FirstJobGroup).HasMaxLength(500);

                entity.Property(e => e.SecondCrew)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.SecondJobGroup).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewMonth");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewMsn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewMSN");

                entity.Property(e => e.AcFlag).HasColumnName("AC_Flag");

                entity.Property(e => e.AcModelId).HasColumnName("AC_ModelID");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.AirlineOperators)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.CabinCrewVer).HasColumnName("Cabin_CrewVer");

                entity.Property(e => e.CabinSeatVerB).HasColumnName("Cabin_Seat_Ver_B");

                entity.Property(e => e.CabinSeatVerC).HasColumnName("Cabin_Seat_Ver_C");

                entity.Property(e => e.CabinSeatVerF).HasColumnName("Cabin_Seat_Ver_F");

                entity.Property(e => e.CabinSeatVerR).HasColumnName("Cabin_Seat_Ver_R");

                entity.Property(e => e.CockpitSeatVerFlightEngineer).HasColumnName("Cockpit_Seat_Ver_FlightEngineer");

                entity.Property(e => e.CockpitSeatVerObserver).HasColumnName("Cockpit_Seat_Ver_Observer");

                entity.Property(e => e.CockpitSeatVerPilot).HasColumnName("Cockpit_Seat_Ver_Pilot");

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.Etops).HasColumnName("ETOPS");

                entity.Property(e => e.FuelAct1).HasColumnName("Fuel_ACT1");

                entity.Property(e => e.FuelAct2).HasColumnName("Fuel_ACT2");

                entity.Property(e => e.FuelCenter).HasColumnName("Fuel_Center");

                entity.Property(e => e.FuelLhInner).HasColumnName("Fuel_LH_Inner");

                entity.Property(e => e.FuelLhOuter).HasColumnName("Fuel_LH_Outer");

                entity.Property(e => e.FuelRhInner).HasColumnName("Fuel_RH_Inner");

                entity.Property(e => e.FuelRhOuter).HasColumnName("Fuel_RH_Outer");

                entity.Property(e => e.FuelTotal).HasColumnName("Fuel_Total");

                entity.Property(e => e.FuelTrim).HasColumnName("Fuel_Trim");

                entity.Property(e => e.GalleyQty).HasColumnName("Galley_QTY");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Isvirtual).HasColumnName("isvirtual");

                entity.Property(e => e.LastWb)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Last_WB");

                entity.Property(e => e.LavQty).HasColumnName("Lav_QTY");

                entity.Property(e => e.ManDate).HasColumnType("date");

                entity.Property(e => e.Manufacturer).HasMaxLength(1000);

                entity.Property(e => e.Model).HasMaxLength(255);

                entity.Property(e => e.Msn).HasColumnName("MSN");

                entity.Property(e => e.PreviousRegister)
                    .HasMaxLength(50)
                    .HasColumnName("Previous_Register");

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Tfc).HasColumnName("TFC");

                entity.Property(e => e.TfhHours).HasColumnName("TFH_Hours");

                entity.Property(e => e.TfhMinutes).HasColumnName("TFH_Minutes");
            });

            modelBuilder.Entity<ViewNotification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewNotification");

                entity.Property(e => e.AppIssue).HasMaxLength(500);

                entity.Property(e => e.DateAppSent).HasColumnType("datetime");

                entity.Property(e => e.DateAppVisited).HasColumnType("datetime");

                entity.Property(e => e.DateEmailSent).HasColumnType("datetime");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.DateSmssent)
                    .HasColumnType("datetime")
                    .HasColumnName("DateSMSSent");

                entity.Property(e => e.EmailIssue).HasMaxLength(500);

                entity.Property(e => e.Idno)
                    .HasMaxLength(500)
                    .HasColumnName("IDNo");

                entity.Property(e => e.IsSmssent).HasColumnName("IsSMSSent");

                entity.Property(e => e.Mobile).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.Sender).HasMaxLength(1001);

                entity.Property(e => e.Sms).HasColumnName("SMS");

                entity.Property(e => e.Smsissue)
                    .HasMaxLength(500)
                    .HasColumnName("SMSIssue");

                entity.Property(e => e.Subject).HasMaxLength(500);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.UserEmail).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewNotificationGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewNotificationGroup");

                entity.Property(e => e.GroupTitle)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<ViewOffItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewOffItem");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Remark)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewOption>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewOption");

                entity.Property(e => e.Parent).HasMaxLength(1000);

                entity.Property(e => e.Prop1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewOrganization>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewOrganization");

                entity.Property(e => e.Address).HasMaxLength(1000);

                entity.Property(e => e.ContactPerson).HasMaxLength(1000);

                entity.Property(e => e.Country)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.Fax)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LogoUrl)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.SortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tel)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Website).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewPersonActiveCourse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonActiveCourse");

                entity.Property(e => e.CalendarType).HasMaxLength(1000);

                entity.Property(e => e.CaoTypeRemark).HasMaxLength(1000);

                entity.Property(e => e.CaoTypeTitle).HasMaxLength(300);

                entity.Property(e => e.CcTitle)
                    .HasMaxLength(500)
                    .HasColumnName("CC_Title");

                entity.Property(e => e.CerNumber).HasMaxLength(500);

                entity.Property(e => e.CourseRemark).HasMaxLength(2000);

                entity.Property(e => e.CourseStatus)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.CtCalendarTypeId).HasColumnName("CT_CalendarTypeId");

                entity.Property(e => e.CtCourseCategoryId).HasColumnName("CT_CourseCategoryId");

                entity.Property(e => e.CtId).HasColumnName("CT_Id");

                entity.Property(e => e.CtInterval).HasColumnName("CT_Interval");

                entity.Property(e => e.CtIsGeneral).HasColumnName("CT_IsGeneral");

                entity.Property(e => e.CtLicenseResultBasicId).HasColumnName("CT_LicenseResultBasicId");

                entity.Property(e => e.CtRemark)
                    .HasMaxLength(2000)
                    .HasColumnName("CT_Remark");

                entity.Property(e => e.CtStatus).HasColumnName("CT_Status");

                entity.Property(e => e.CtTitle)
                    .HasMaxLength(500)
                    .HasColumnName("CT_Title");

                entity.Property(e => e.Currency).HasMaxLength(1000);

                entity.Property(e => e.DateDeadlineRegistration).HasColumnType("date");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndPractical).HasColumnType("date");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.DateStartPractical).HasColumnType("date");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Department).HasMaxLength(500);

                entity.Property(e => e.Duration2).HasMaxLength(1031);

                entity.Property(e => e.DurationPracticalUnit).HasMaxLength(1000);

                entity.Property(e => e.DurationUnit).HasMaxLength(1000);

                entity.Property(e => e.ExpireDate).HasColumnType("date");

                entity.Property(e => e.Instructor).HasMaxLength(500);

                entity.Property(e => e.Location).HasMaxLength(500);

                entity.Property(e => e.No).HasMaxLength(500);

                entity.Property(e => e.Organization).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.Status).HasMaxLength(1000);

                entity.Property(e => e.Title).HasMaxLength(500);

                entity.Property(e => e.TrainingDirector).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewPersonAircraftType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonAircraftType");

                entity.Property(e => e.AircraftType)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DateLimitBegin).HasColumnType("datetime");

                entity.Property(e => e.DateLimitEnd).HasColumnType("datetime");

                entity.Property(e => e.Manufacturer)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewPersonCaoLicense>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonCaoLicense");

                entity.Property(e => e.DateLicense).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Result)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewPersonDocument>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonDocument");

                entity.Property(e => e.DocumentType).HasMaxLength(1000);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Title).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewPersonDocumentFile>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonDocumentFile");

                entity.Property(e => e.FileType).HasMaxLength(500);

                entity.Property(e => e.FileUrl).HasMaxLength(1000);

                entity.Property(e => e.SysUrl).HasMaxLength(1000);

                entity.Property(e => e.Title).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewPersonEducation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonEducation");

                entity.Property(e => e.College).HasMaxLength(500);

                entity.Property(e => e.DateCatch).HasColumnType("date");

                entity.Property(e => e.EducationDegree).HasMaxLength(1000);

                entity.Property(e => e.FileTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.StudyField).HasMaxLength(1000);

                entity.Property(e => e.SysUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(60);
            });

            modelBuilder.Entity<ViewPersonExperiense>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonExperiense");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.Employer).HasMaxLength(500);

                entity.Property(e => e.JobTitle).HasMaxLength(500);

                entity.Property(e => e.Organization).HasMaxLength(500);

                entity.Property(e => e.Remark).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewPersonMisc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonMisc");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.ImageUrl).HasMaxLength(500);

                entity.Property(e => e.Instagram).HasMaxLength(500);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LinkedIn).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(511);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.Tel).HasMaxLength(500);

                entity.Property(e => e.Telegram).HasMaxLength(500);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Website).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewPersonRating>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPersonRating");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.DateExpire).HasColumnType("date");

                entity.Property(e => e.DateIssue).HasColumnType("date");

                entity.Property(e => e.RatingOrganization).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewPlanFlight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPlanFlight");

                entity.Property(e => e.ActualFlightHoffBlock).HasColumnName("ActualFlightHOffBlock");

                entity.Property(e => e.ActualFlightHtakeoff).HasColumnName("ActualFlightHTakeoff");

                entity.Property(e => e.ActualFlightMoffBlock)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMOffBlock");

                entity.Property(e => e.ActualFlightMtakeoff)
                    .HasColumnType("numeric(21, 6)")
                    .HasColumnName("ActualFlightMTakeoff");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.AssignedRegister).HasMaxLength(50);

                entity.Property(e => e.AssignedRegisterId).HasColumnName("AssignedRegisterID");

                entity.Property(e => e.BaseIata)
                    .HasMaxLength(255)
                    .HasColumnName("BaseIATA");

                entity.Property(e => e.BaseName).HasMaxLength(500);

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CancelReason).HasMaxLength(1000);

                entity.Property(e => e.CancelRemark).HasMaxLength(500);

                entity.Property(e => e.CargoUnit).HasMaxLength(1000);

                entity.Property(e => e.CargoUnitId).HasColumnName("CargoUnitID");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateActive).HasColumnType("datetime");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.Duration)
                    .HasColumnType("numeric(19, 6)")
                    .HasColumnName("duration");

                entity.Property(e => e.FlightGroupId).HasColumnName("FlightGroupID");

                entity.Property(e => e.FlightHplanned).HasColumnName("FlightHPlanned");

                entity.Property(e => e.FlightMplanned).HasColumnName("FlightMPlanned");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightPlan).HasMaxLength(500);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusBgColor).HasMaxLength(255);

                entity.Property(e => e.FlightStatusClass).HasMaxLength(255);

                entity.Property(e => e.FlightStatusColor).HasMaxLength(255);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightType).HasMaxLength(1000);

                entity.Property(e => e.FlightTypeAbr)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FpflightHh).HasColumnName("FPFlightHH");

                entity.Property(e => e.FpflightMm).HasColumnName("FPFlightMM");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.From)
                    .HasMaxLength(255)
                    .HasColumnName("from");

                entity.Property(e => e.FromAirportCity)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FromAirportName).HasMaxLength(500);

                entity.Property(e => e.FromCity).HasMaxLength(500);

                entity.Property(e => e.FromContry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FromLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.FromSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FuelActual).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelPlanned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnit).HasMaxLength(1000);

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.FuelVariance).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.Gwland)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("GWLand");

                entity.Property(e => e.Gwto)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("GWTO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LinkedFlightNumber).HasMaxLength(50);

                entity.Property(e => e.LinkedReasonTitle).HasMaxLength(1000);

                entity.Property(e => e.LinkedRemark).HasMaxLength(500);

                entity.Property(e => e.Manufacturer).HasMaxLength(1000);

                entity.Property(e => e.Msn).HasColumnName("MSN");

                entity.Property(e => e.Notes)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.Osta)
                    .HasColumnType("datetime")
                    .HasColumnName("OSTA");

                entity.Property(e => e.OtoAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OToAirportIATA");

                entity.Property(e => e.OtoAirportId).HasColumnName("OToAirportId");

                entity.Property(e => e.PlanRegister).HasMaxLength(50);

                entity.Property(e => e.PlanRegisterId).HasColumnName("PlanRegisterID");

                entity.Property(e => e.Progress).HasColumnName("progress");

                entity.Property(e => e.RampDate).HasColumnType("datetime");

                entity.Property(e => e.RampReason).HasMaxLength(1000);

                entity.Property(e => e.RampRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RedirectDate).HasColumnType("datetime");

                entity.Property(e => e.RedirectReason).HasMaxLength(1000);

                entity.Property(e => e.RedirectRemark).HasMaxLength(500);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.Sitatime).HasColumnName("SITATime");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.Staplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STAPlanned");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("startDate");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdplanned)
                    .HasColumnType("datetime")
                    .HasColumnName("STDPlanned");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TaskId).HasColumnName("taskId");

                entity.Property(e => e.TaskName)
                    .HasMaxLength(904)
                    .HasColumnName("taskName");

                entity.Property(e => e.To)
                    .HasMaxLength(255)
                    .HasColumnName("to");

                entity.Property(e => e.ToAirportCity).HasMaxLength(500);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.ToAirportName).HasMaxLength(500);

                entity.Property(e => e.ToCity).HasMaxLength(500);

                entity.Property(e => e.ToCountry)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ToLatitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToLongitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.ToSortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewPlanItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPlanItem");

                entity.Property(e => e.AircraftType)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Arr).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateTo).HasColumnType("datetime");

                entity.Property(e => e.Day)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Dep).HasColumnType("datetime");

                entity.Property(e => e.Duration)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("duration");

                entity.Property(e => e.FlightNumber).HasMaxLength(500);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Line)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Progress).HasColumnName("progress");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("startDate");

                entity.Property(e => e.StartDateUtc)
                    .HasColumnType("datetime")
                    .HasColumnName("startDateUTC");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.TaskId).HasColumnName("taskId");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<ViewPositioning>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPositioning");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<ViewPost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewPost");

                entity.Property(e => e.Title).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewRegHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRegHistory");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.Fleet)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.OffBlockLocal).HasColumnType("datetime");

                entity.Property(e => e.OnBlockLocal).HasColumnType("datetime");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(4000)
                    .HasColumnName("PDate");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(4000)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(4000)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.PyearMonthName)
                    .HasMaxLength(4000)
                    .HasColumnName("PYearMonthName");

                entity.Property(e => e.PyearName)
                    .HasMaxLength(4000)
                    .HasColumnName("PYearName");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.RemainingFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TakeoffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.UpliftFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.YearMonthName).HasMaxLength(4000);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewRegHistory2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRegHistory2");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Fleet)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.OffBlockLocal).HasColumnType("datetime");

                entity.Property(e => e.OnBlockLocal).HasColumnType("datetime");

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.PdayName)
                    .HasMaxLength(255)
                    .HasColumnName("PDayName");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.PyearMonthName)
                    .HasMaxLength(511)
                    .HasColumnName("PYearMonthName");

                entity.Property(e => e.PyearName)
                    .HasMaxLength(255)
                    .HasColumnName("PYearName");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.RemainingFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TakeoffLocal).HasColumnType("datetime");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.UpliftFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ViewRegHistoryMonthly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRegHistoryMonthly");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.BtLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.Fleet)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.FtLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.YearMonth).HasMaxLength(511);

                entity.Property(e => e.YearName).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewRegHistoryYearly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRegHistoryYearly");

                entity.Property(e => e.BtLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.FtLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.MonthName).HasMaxLength(255);

                entity.Property(e => e.PaxLeg).HasColumnType("numeric(24, 12)");

                entity.Property(e => e.YearMonth).HasMaxLength(511);

                entity.Property(e => e.YearName).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewRegisterGround>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRegisterGround");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.AirlineOperators)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.Customer)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .UseCollation("SQL_Latin1_General_CP1_CI_AS");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DateFrom).HasColumnType("datetime");

                entity.Property(e => e.DateFromLocal).HasColumnType("datetime");

                entity.Property(e => e.Duration)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("duration");

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.GroundType)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Isvirtual).HasColumnName("isvirtual");

                entity.Property(e => e.Manufacturer).HasMaxLength(1000);

                entity.Property(e => e.Model).HasMaxLength(255);

                entity.Property(e => e.Msn).HasColumnName("MSN");

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TaskId).HasColumnName("taskId");
            });

            modelBuilder.Entity<ViewRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRole");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Name2)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<ViewRoleClaim>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRoleClaim");

                entity.Property(e => e.Claim)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimValue)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Name2)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<ViewRosterCrewCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRosterCrewCount");

                entity.Property(e => e.DateLocal).HasColumnType("date");

                entity.Property(e => e.FltNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Route)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");
            });

            modelBuilder.Entity<ViewRosterReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRosterReport");

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.Ccm1).HasColumnName("CCM1");

                entity.Property(e => e.Ccm2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CCM2");

                entity.Property(e => e.Ccm3)
                    .IsRequired()
                    .HasColumnName("CCM3");

                entity.Property(e => e.DateLocal).HasColumnType("date");

                entity.Property(e => e.FltNo)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Ip).HasColumnName("IP");

                entity.Property(e => e.Obs).HasColumnName("OBS");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Route)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Safety).HasColumnName("SAFETY");

                entity.Property(e => e.Sccm).HasColumnName("SCCM");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");
            });

            modelBuilder.Entity<ViewRosterSheet>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRosterSheet");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.Ccm1).HasColumnName("CCM1");

                entity.Property(e => e.Ccm1dh).HasColumnName("CCM1DH");

                entity.Property(e => e.Ccm1name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CCM1Name");

                entity.Property(e => e.Ccm2).HasColumnName("CCM2");

                entity.Property(e => e.Ccm2dh).HasColumnName("CCM2DH");

                entity.Property(e => e.Ccm2name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CCM2Name");

                entity.Property(e => e.Ccm3).HasColumnName("CCM3");

                entity.Property(e => e.Ccm3dh).HasColumnName("CCM3DH");

                entity.Property(e => e.Ccm3name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CCM3Name");

                entity.Property(e => e.Ccm4).HasColumnName("CCM4");

                entity.Property(e => e.Ccm4dh).HasColumnName("CCM4DH");

                entity.Property(e => e.Ccm4name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CCM4Name");

                entity.Property(e => e.Ccm5).HasColumnName("CCM5");

                entity.Property(e => e.Ccm5dh).HasColumnName("CCM5DH");

                entity.Property(e => e.Ccm5name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CCM5Name");

                entity.Property(e => e.Check1).HasColumnName("CHECK1");

                entity.Property(e => e.Check1dh).HasColumnName("CHECK1DH");

                entity.Property(e => e.Check1name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CHECK1Name");

                entity.Property(e => e.Check2).HasColumnName("CHECK2");

                entity.Property(e => e.Check2dh).HasColumnName("CHECK2DH");

                entity.Property(e => e.Check2name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CHECK2Name");

                entity.Property(e => e.Color1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Color2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.Duration)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Fsta)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FSTA");

                entity.Property(e => e.Fstalocal)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FSTALocal");

                entity.Property(e => e.Fstd)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FSTD");

                entity.Property(e => e.Fstdlocal)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("FSTDLocal");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Ip1).HasColumnName("IP1");

                entity.Property(e => e.Ip1dh).HasColumnName("IP1DH");

                entity.Property(e => e.Ip1name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("IP1Name");

                entity.Property(e => e.Ip2).HasColumnName("IP2");

                entity.Property(e => e.Ip2dh).HasColumnName("IP2DH");

                entity.Property(e => e.Ip2name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("IP2Name");

                entity.Property(e => e.Isccm1).HasColumnName("ISCCM1");

                entity.Property(e => e.Isccm1dh).HasColumnName("ISCCM1DH");

                entity.Property(e => e.Isccm1name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ISCCM1Name");

                entity.Property(e => e.Obs1).HasColumnName("OBS1");

                entity.Property(e => e.Obs1dh).HasColumnName("OBS1DH");

                entity.Property(e => e.Obs1name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("OBS1Name");

                entity.Property(e => e.Obs2).HasColumnName("OBS2");

                entity.Property(e => e.Obs2dh).HasColumnName("OBS2DH");

                entity.Property(e => e.Obs2name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("OBS2Name");

                entity.Property(e => e.P11dh).HasColumnName("P11DH");

                entity.Property(e => e.P11name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P11Name");

                entity.Property(e => e.P12dh).HasColumnName("P12DH");

                entity.Property(e => e.P12name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P12Name");

                entity.Property(e => e.P13dh).HasColumnName("P13DH");

                entity.Property(e => e.P13name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P13Name");

                entity.Property(e => e.P14dh).HasColumnName("P14DH");

                entity.Property(e => e.P14name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P14Name");

                entity.Property(e => e.P15dh).HasColumnName("P15DH");

                entity.Property(e => e.P15name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P15Name");

                entity.Property(e => e.P21dh).HasColumnName("P21DH");

                entity.Property(e => e.P21name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P21Name");

                entity.Property(e => e.P22dh).HasColumnName("P22DH");

                entity.Property(e => e.P22name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P22Name");

                entity.Property(e => e.P23dh).HasColumnName("P23DH");

                entity.Property(e => e.P23name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P23Name");

                entity.Property(e => e.P24dh).HasColumnName("P24DH");

                entity.Property(e => e.P24name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P24Name");

                entity.Property(e => e.P25dh).HasColumnName("P25DH");

                entity.Property(e => e.P25name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P25Name");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.Safety1Dh).HasColumnName("Safety1DH");

                entity.Property(e => e.Safety1Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Safety2Dh).HasColumnName("Safety2DH");

                entity.Property(e => e.Safety2Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sccm1).HasColumnName("SCCM1");

                entity.Property(e => e.Sccm1dh).HasColumnName("SCCM1DH");

                entity.Property(e => e.Sccm1name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SCCM1Name");

                entity.Property(e => e.Sccm2).HasColumnName("SCCM2");

                entity.Property(e => e.Sccm2dh).HasColumnName("SCCM2DH");

                entity.Property(e => e.Sccm2name)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SCCM2Name");

                entity.Property(e => e.Sccm3).HasColumnName("SCCM3");

                entity.Property(e => e.Sccm3dh).HasColumnName("SCCM3DH");

                entity.Property(e => e.Sccm3name)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SCCM3Name");

                entity.Property(e => e.Sccm4).HasColumnName("SCCM4");

                entity.Property(e => e.Sccm4dh).HasColumnName("SCCM4DH");

                entity.Property(e => e.Sccm4name)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SCCM4Name");

                entity.Property(e => e.Sccm5).HasColumnName("SCCM5");

                entity.Property(e => e.Sccm5dh).HasColumnName("SCCM5DH");

                entity.Property(e => e.Sccm5name)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SCCM5Name");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<ViewRotserDailyCrew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRotserDailyCrew");

                entity.Property(e => e.DepartureLocal).HasColumnType("date");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewRoute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRoute");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.Route).HasMaxLength(511);

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");
            });

            modelBuilder.Entity<ViewRouteFromAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRouteFromAirport");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Iata)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("IATA");

                entity.Property(e => e.Icao)
                    .HasMaxLength(255)
                    .HasColumnName("ICAO");

                entity.Property(e => e.Latitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SortName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Type).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewRouteToAirport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewRouteToAirport");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Iata)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("IATA");

                entity.Property(e => e.Icao)
                    .HasMaxLength(255)
                    .HasColumnName("ICAO");

                entity.Property(e => e.Latitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.SortName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Type).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewSmshistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewSMSHistory");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.Delivery)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.RecMobile)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RecName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Ref)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ResDate).HasColumnType("datetime");

                entity.Property(e => e.ResFlts)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ResStr)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sender)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Text)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewStudyField>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewStudyField");

                entity.Property(e => e.Title).HasMaxLength(1000);
            });

            modelBuilder.Entity<ViewTableDutyFdp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewTableDutyFDP");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CDate");
            });

            modelBuilder.Entity<ViewTolndcard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewTOLNDCard");

                entity.Property(e => e.ActLandingWeight)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AircraftType).HasMaxLength(255);

                entity.Property(e => e.App)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("APP");

                entity.Property(e => e.Arrival).HasColumnType("datetime");

                entity.Property(e => e.ArrivalLocal).HasColumnType("datetime");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.AttAsr).HasColumnName("AttASR");

                entity.Property(e => e.BlockOff).HasColumnType("datetime");

                entity.Property(e => e.BlockOffLocal).HasColumnType("datetime");

                entity.Property(e => e.BlockOn).HasColumnType("datetime");

                entity.Property(e => e.BlockOnLocal).HasColumnType("datetime");

                entity.Property(e => e.Cargo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("CARGO");

                entity.Property(e => e.Cg)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CG");

                entity.Property(e => e.Cloud)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CommanderNote).HasMaxLength(2000);

                entity.Property(e => e.CpcrewId).HasColumnName("CPCrewId");

                entity.Property(e => e.Cpdh).HasColumnName("CPDH");

                entity.Property(e => e.Cpfdpid).HasColumnName("CPFDPId");

                entity.Property(e => e.CpfdpitemId).HasColumnName("CPFDPItemId");

                entity.Property(e => e.CpflightTypeId).HasColumnName("CPFlightTypeId");

                entity.Property(e => e.Cpinstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPInstructor");

                entity.Property(e => e.Cpisccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPISCCM");

                entity.Property(e => e.Cpp1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP1");

                entity.Property(e => e.Cpp2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP2");

                entity.Property(e => e.CppositionId).HasColumnName("CPPositionId");

                entity.Property(e => e.Cpregister)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPRegister");

                entity.Property(e => e.Cpsccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPSCCM");

                entity.Property(e => e.DateUpdate)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Departure).HasColumnType("datetime");

                entity.Property(e => e.DepartureLocal).HasColumnType("datetime");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.DewP)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Fe)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("FE");

                entity.Property(e => e.Flap)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FpflightTime).HasColumnName("FPFlightTime");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.FromAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("FromAirportIATA");

                entity.Property(e => e.FuelDensity).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelRemaining).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelToAlternate)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FuelTotal).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.FuelUplift).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUsed).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Information)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Ipid).HasColumnName("IPId");

                entity.Property(e => e.Ipname)
                    .HasMaxLength(1001)
                    .HasColumnName("IPName");

                entity.Property(e => e.IpscheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("IPScheduleName");

                entity.Property(e => e.IsJl).HasColumnName("IsJL");

                entity.Property(e => e.IsJlapproved).HasColumnName("IsJLApproved");

                entity.Property(e => e.Jlapprover)
                    .HasMaxLength(1001)
                    .HasColumnName("JLApprover");

                entity.Property(e => e.JlapproverId).HasColumnName("JLApproverId");

                entity.Property(e => e.Jldate)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDate");

                entity.Property(e => e.JldateApproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDateApproved");

                entity.Property(e => e.JldatePicapproved).HasColumnName("JLDatePICApproved");

                entity.Property(e => e.Jlno)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("JLNo");

                entity.Property(e => e.JlsignedBy)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("JLSignedBy");

                entity.Property(e => e.Jluser)
                    .HasMaxLength(1001)
                    .HasColumnName("JLUser");

                entity.Property(e => e.JluserId).HasColumnName("JLUserId");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.LandingLocal).HasColumnType("datetime");

                entity.Property(e => e.Lda)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LDA");

                entity.Property(e => e.Ltr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LTR");

                entity.Property(e => e.Mas)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MAS");

                entity.Property(e => e.Msn).HasColumnName("MSN");

                entity.Property(e => e.P1id).HasColumnName("P1Id");

                entity.Property(e => e.P1name)
                    .HasMaxLength(1001)
                    .HasColumnName("P1Name");

                entity.Property(e => e.P1scheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P1ScheduleName");

                entity.Property(e => e.P2id).HasColumnName("P2Id");

                entity.Property(e => e.P2name)
                    .HasMaxLength(1001)
                    .HasColumnName("P2Name");

                entity.Property(e => e.P2scheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P2ScheduleName");

                entity.Property(e => e.Pf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PF");

                entity.Property(e => e.Pflr).HasColumnName("PFLR");

                entity.Property(e => e.Pic)
                    .HasMaxLength(1001)
                    .HasColumnName("PIC");

                entity.Property(e => e.Picid).HasColumnName("PICId");

                entity.Property(e => e.Qnh)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("QNH");

                entity.Property(e => e.Register).HasMaxLength(50);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.RvsmFltCpt)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_CPT");

                entity.Property(e => e.RvsmFltFo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_FO");

                entity.Property(e => e.RvsmFltStby)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_STBY");

                entity.Property(e => e.RvsmGndCpt)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_CPT");

                entity.Property(e => e.RvsmGndFo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_FO");

                entity.Property(e => e.RvsmGndStby)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_STBY");

                entity.Property(e => e.Rw)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("RW");

                entity.Property(e => e.SerialNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Sic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SIC");

                entity.Property(e => e.Sicid).HasColumnName("SICId");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.StabTrim)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Staday)
                    .HasColumnType("date")
                    .HasColumnName("STADay");

                entity.Property(e => e.StadayLocal)
                    .HasColumnType("date")
                    .HasColumnName("STADayLocal");

                entity.Property(e => e.Stalocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STALocal");

                entity.Property(e => e.Star)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("STAR");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Stdday)
                    .HasColumnType("date")
                    .HasColumnName("STDDay");

                entity.Property(e => e.StddayLocal)
                    .HasColumnType("date")
                    .HasColumnName("STDDayLocal");

                entity.Property(e => e.Stdlocal)
                    .HasColumnType("datetime")
                    .HasColumnName("STDLocal");

                entity.Property(e => e.Ta)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TA");

                entity.Property(e => e.TakeOff).HasColumnType("datetime");

                entity.Property(e => e.TakeOffLocal).HasColumnType("datetime");

                entity.Property(e => e.Temp)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Tl)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TL");

                entity.Property(e => e.ToAirportIata)
                    .HasMaxLength(255)
                    .HasColumnName("ToAirportIATA");

                entity.Property(e => e.Tofuel)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TOFuel");

                entity.Property(e => e.Toweight)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TOWeight");

                entity.Property(e => e.Type)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.User)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.V1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.V2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Verf)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Visibility)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Vr)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Wind)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Wxcondition)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("WXCondition");

                entity.Property(e => e.Zfw)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ZFW");
            });

            modelBuilder.Entity<ViewTrainingDuty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewTrainingDuty");

                entity.Property(e => e.ClassId)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CourseTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateLocal).HasColumnType("date");

                entity.Property(e => e.DayName).HasMaxLength(4000);

                entity.Property(e => e.DutyEnd).HasColumnType("datetime");

                entity.Property(e => e.DutyEndLocal).HasColumnType("datetime");

                entity.Property(e => e.DutyStart).HasColumnType("datetime");

                entity.Property(e => e.DutyStartLocal).HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.LocalDate).HasColumnType("datetime");

                entity.Property(e => e.Month).HasMaxLength(4000);

                entity.Property(e => e.MonthName).HasMaxLength(4000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(500)
                    .HasColumnName("PDate");

                entity.Property(e => e.Pmonth).HasColumnName("PMonth");

                entity.Property(e => e.PmonthName)
                    .HasMaxLength(255)
                    .HasColumnName("PMonthName");

                entity.Property(e => e.Pyear).HasColumnName("PYear");

                entity.Property(e => e.PyearName)
                    .HasMaxLength(255)
                    .HasColumnName("PYearName");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.YearName).HasMaxLength(4000);
            });

            modelBuilder.Entity<ViewTrainingSmshistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewTrainingSMSHistory");

                entity.Property(e => e.DateSent).HasColumnType("datetime");

                entity.Property(e => e.DateStatus).HasColumnType("datetime");

                entity.Property(e => e.DateVisit).HasColumnType("datetime");

                entity.Property(e => e.DutyDate).HasColumnType("datetime");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.JobGroupCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Message)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.Pickup).HasColumnType("datetime");

                entity.Property(e => e.PickupLocal).HasColumnType("datetime");

                entity.Property(e => e.RefId)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleName).HasMaxLength(500);

                entity.Property(e => e.Sender)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TypeStr)
                    .IsRequired()
                    .HasMaxLength(21)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewUser");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.FirstName).HasMaxLength(500);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastName).HasMaxLength(500);

                entity.Property(e => e.LockoutEndDateUtc).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<ViewUserActivity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewUserActivity");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.ImageUrl).HasMaxLength(1000);

                entity.Property(e => e.Key)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(1001);

                entity.Property(e => e.Nid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("NID");

                entity.Property(e => e.Pid)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("PID");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.Url).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewUserRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewUserRole");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Name2)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.RoleId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<ViewUserRoleClaim>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewUserRoleClaim");

                entity.Property(e => e.Claim)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimValue)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Name2)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.RoleId)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("roleId");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<ViewWeek>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ViewWeek");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");
            });

            modelBuilder.Entity<VirtualMsn>(entity =>
            {
                entity.ToTable("VirtualMSN");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Register).HasMaxLength(500);
            });

            modelBuilder.Entity<WeatherForecastIcingCondition>(entity =>
            {
                entity.ToTable("WeatherForecastIcingCondition");

                entity.Property(e => e.ForecastId).HasColumnName("forecast_id");

                entity.Property(e => e.IcingIntensity)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("icing_intensity");

                entity.Property(e => e.IcingMaxAltFtAgl).HasColumnName("icing_max_alt_ft_agl");

                entity.Property(e => e.IcingMinAltFtAgl).HasColumnName("icing_min_alt_ft_agl");

                entity.HasOne(d => d.Forecast)
                    .WithMany(p => p.WeatherForecastIcingConditions)
                    .HasForeignKey(d => d.ForecastId)
                    .HasConstraintName("fk_ic_fo");
            });

            modelBuilder.Entity<WeatherForecastSkyCondition>(entity =>
            {
                entity.ToTable("WeatherForecastSkyCondition");

                entity.Property(e => e.CloudBaseFtAgl).HasColumnName("cloud_base_ft_agl");

                entity.Property(e => e.CloudType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cloud_type");

                entity.Property(e => e.ForecastId).HasColumnName("forecast_id");

                entity.Property(e => e.SkyCover)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("sky_cover");

                entity.HasOne(d => d.Forecast)
                    .WithMany(p => p.WeatherForecastSkyConditions)
                    .HasForeignKey(d => d.ForecastId)
                    .HasConstraintName("fk_sk_fo");
            });

            modelBuilder.Entity<WeatherForecastTemperature>(entity =>
            {
                entity.ToTable("WeatherForecastTemperature");

                entity.Property(e => e.ForecastId).HasColumnName("forecast_id");

                entity.Property(e => e.MaxTempC)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("max_temp_c");

                entity.Property(e => e.MinTempC)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("min_temp_c");

                entity.Property(e => e.SfcTempC).HasColumnName("sfc_temp_c");

                entity.Property(e => e.ValidTime)
                    .HasColumnType("datetime")
                    .HasColumnName("valid_time");

                entity.HasOne(d => d.Forecast)
                    .WithMany(p => p.WeatherForecastTemperatures)
                    .HasForeignKey(d => d.ForecastId)
                    .HasConstraintName("fk_te_fo");
            });

            modelBuilder.Entity<WeatherForecastTurbulence>(entity =>
            {
                entity.ToTable("WeatherForecastTurbulence");

                entity.Property(e => e.ForecastId).HasColumnName("forecast_id");

                entity.Property(e => e.TurbulenceIntensity)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("turbulence_intensity");

                entity.Property(e => e.TurbulenceMaxAltFtAgl).HasColumnName("turbulence_max_alt_ft_agl");

                entity.Property(e => e.TurbulenceMinAltFtAgl).HasColumnName("turbulence_min_alt_ft_agl");

                entity.HasOne(d => d.Forecast)
                    .WithMany(p => p.WeatherForecastTurbulences)
                    .HasForeignKey(d => d.ForecastId)
                    .HasConstraintName("fk_tu_fo");
            });

            modelBuilder.Entity<WeatherMetar>(entity =>
            {
                entity.ToTable("WeatherMetar");

                entity.Property(e => e.AltimInHg).HasColumnName("altim_in_hg");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateDay).HasColumnType("datetime");

                entity.Property(e => e.DewpointC).HasColumnName("dewpoint_c");

                entity.Property(e => e.ElevationM).HasColumnName("elevation_m");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.FlightCategory)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("flight_category");

                entity.Property(e => e.Latitude).HasColumnName("latitude");

                entity.Property(e => e.Longitude).HasColumnName("longitude");

                entity.Property(e => e.MaxT24hrC).HasColumnName("maxT24hr_c");

                entity.Property(e => e.MaxTC).HasColumnName("maxT_c");

                entity.Property(e => e.MetarType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("metar_type");

                entity.Property(e => e.MinT24hrC).HasColumnName("minT24hr_c");

                entity.Property(e => e.MinTC).HasColumnName("minT_c");

                entity.Property(e => e.ObservationTime)
                    .HasColumnType("datetime")
                    .HasColumnName("observation_time");

                entity.Property(e => e.Pcp24hrIn).HasColumnName("pcp24hr_in");

                entity.Property(e => e.Pcp3hrIn).HasColumnName("pcp3hr_in");

                entity.Property(e => e.Pcp6hrIn).HasColumnName("pcp6hr_in");

                entity.Property(e => e.PrecipIn).HasColumnName("precip_in");

                entity.Property(e => e.RawText)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.SeaLevelPressureMb).HasColumnName("sea_level_pressure_mb");

                entity.Property(e => e.SnowIn).HasColumnName("snow_in");

                entity.Property(e => e.StationId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TempC).HasColumnName("temp_c");

                entity.Property(e => e.ThreeHrPressureTendencyMb).HasColumnName("three_hr_pressure_tendency_mb");

                entity.Property(e => e.VertVisFt).HasColumnName("vert_vis_ft");

                entity.Property(e => e.VisibilityStatuteMi).HasColumnName("visibility_statute_mi");

                entity.Property(e => e.WindDirDegrees).HasColumnName("wind_dir_degrees");

                entity.Property(e => e.WindGustKt).HasColumnName("wind_gust_kt");

                entity.Property(e => e.WindSpeedKt).HasColumnName("wind_speed_kt");
            });

            modelBuilder.Entity<WeatherMetarQualityControl>(entity =>
            {
                entity.ToTable("WeatherMetarQualityControl");

                entity.Property(e => e.Auto)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("auto");

                entity.Property(e => e.AutoStation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("auto_station");

                entity.Property(e => e.Corrected)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("corrected");

                entity.Property(e => e.FreezingRainSensorOff)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("freezing_rain_sensor_off");

                entity.Property(e => e.LightningSensorOff)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("lightning_sensor_off");

                entity.Property(e => e.MaintenanceIndicatorOn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("maintenance_indicator_on");

                entity.Property(e => e.NoSignal)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("no_signal");

                entity.Property(e => e.PresentWeatherSensorOff)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("present_weather_sensor_off");

                entity.HasOne(d => d.Metar)
                    .WithMany(p => p.WeatherMetarQualityControls)
                    .HasForeignKey(d => d.MetarId)
                    .HasConstraintName("fk_fl_me");
            });

            modelBuilder.Entity<WeatherMetarSkyCondition>(entity =>
            {
                entity.ToTable("WeatherMetarSkyCondition");

                entity.Property(e => e.CloudBaseFtAgl).HasColumnName("cloud_base_ft_agl");

                entity.Property(e => e.SkyCover)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("sky_cover");

                entity.HasOne(d => d.Metar)
                    .WithMany(p => p.WeatherMetarSkyConditions)
                    .HasForeignKey(d => d.MetarId)
                    .HasConstraintName("fk_sk_met");
            });

            modelBuilder.Entity<WeatherTaf>(entity =>
            {
                entity.ToTable("WeatherTaf");

                entity.Property(e => e.BulletinTime).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.DateDay).HasColumnType("datetime");

                entity.Property(e => e.EvaluationM).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.Fdpid).HasColumnName("FDPId");

                entity.Property(e => e.IssueTime).HasColumnType("datetime");

                entity.Property(e => e.Latitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(20, 15)");

                entity.Property(e => e.RawText)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks).HasMaxLength(2000);

                entity.Property(e => e.StationId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ValidTimeFrom).HasColumnType("datetime");

                entity.Property(e => e.ValidTimeTo).HasColumnType("datetime");
            });

            modelBuilder.Entity<WeatherTafForecast>(entity =>
            {
                entity.ToTable("WeatherTafForecast");

                entity.Property(e => e.AltimInHg).HasColumnName("altim_in_hg");

                entity.Property(e => e.ChangeIndicator)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("change_indicator");

                entity.Property(e => e.FcstTimeFrom)
                    .HasColumnType("datetime")
                    .HasColumnName("fcst_time_from");

                entity.Property(e => e.FcstTimeTo)
                    .HasColumnType("datetime")
                    .HasColumnName("fcst_time_to");

                entity.Property(e => e.NotDecoded)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("not_decoded");

                entity.Property(e => e.Probability).HasColumnName("probability");

                entity.Property(e => e.TimeBecoming)
                    .HasColumnType("datetime")
                    .HasColumnName("time_becoming");

                entity.Property(e => e.VertVisFt).HasColumnName("vert_vis_ft");

                entity.Property(e => e.VisibilityStatuteMi).HasColumnName("visibility_statute_mi");

                entity.Property(e => e.WeatherId).HasColumnName("weather_id");

                entity.Property(e => e.WindDirDegrees).HasColumnName("wind_dir_degrees");

                entity.Property(e => e.WindGustKt).HasColumnName("wind_gust_kt");

                entity.Property(e => e.WindShearDirDegrees).HasColumnName("wind_shear_dir_degrees");

                entity.Property(e => e.WindShearHgtFtAgl).HasColumnName("wind_shear_hgt_ft_agl");

                entity.Property(e => e.WindShearSpeedKt).HasColumnName("wind_shear_speed_kt");

                entity.Property(e => e.WindSpeedKt).HasColumnName("wind_speed_kt");

                entity.Property(e => e.WxString)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("wx_string");

                entity.HasOne(d => d.Weather)
                    .WithMany(p => p.WeatherTafForecasts)
                    .HasForeignKey(d => d.WeatherId)
                    .HasConstraintName("fk_fo_we");
            });

            modelBuilder.Entity<XappLeg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XAppLeg");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Picid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PICId");
            });

            modelBuilder.Entity<XcrewAssigned>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XCrewAssigned");

                entity.Property(e => e.Crew).HasMaxLength(255);

                entity.Property(e => e.DateUtc)
                    .HasColumnType("date")
                    .HasColumnName("DateUTC");

                entity.Property(e => e.FlightNumber).HasMaxLength(4000);

                entity.Property(e => e.Groupid).HasColumnName("groupid");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.Route).HasMaxLength(4000);
            });

            modelBuilder.Entity<XcrewAssignedRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XCrewAssignedRpt");

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .HasColumnName("CODE");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("DATE");

                entity.Property(e => e.Fn)
                    .HasMaxLength(255)
                    .HasColumnName("FN");

                entity.Property(e => e.Groupid).HasColumnName("groupid");

                entity.Property(e => e.JobGroup).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(1001);

                entity.Property(e => e.Pdate)
                    .HasMaxLength(255)
                    .HasColumnName("PDATE");

                entity.Property(e => e.Sch)
                    .HasMaxLength(255)
                    .HasColumnName("SCH");
            });

            modelBuilder.Entity<Xdaily>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XDaily");

                entity.Property(e => e.Adl)
                    .HasMaxLength(255)
                    .HasColumnName("ADL");

                entity.Property(e => e.Bag).HasMaxLength(255);

                entity.Property(e => e.Cargo)
                    .HasMaxLength(255)
                    .HasColumnName("cargo");

                entity.Property(e => e.Chd)
                    .HasMaxLength(255)
                    .HasColumnName("CHD");

                entity.Property(e => e.DateUtc)
                    .HasColumnType("date")
                    .HasColumnName("DateUTC");

                entity.Property(e => e.Inf)
                    .HasMaxLength(255)
                    .HasColumnName("INF");

                entity.Property(e => e.Landing).HasMaxLength(255);

                entity.Property(e => e.OffBlock).HasMaxLength(255);

                entity.Property(e => e.OnBlock).HasMaxLength(255);

                entity.Property(e => e.Reg).HasMaxLength(255);

                entity.Property(e => e.Sta)
                    .HasMaxLength(255)
                    .HasColumnName("STA");

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.Std)
                    .HasMaxLength(255)
                    .HasColumnName("STD");

                entity.Property(e => e.TakeOff).HasMaxLength(255);

                entity.Property(e => e.Trip)
                    .HasMaxLength(255)
                    .HasColumnName("trip");

                entity.Property(e => e.Uplift)
                    .HasMaxLength(255)
                    .HasColumnName("uplift");

                entity.Property(e => e.XdateUtc)
                    .HasColumnType("date")
                    .HasColumnName("XDateUTC");

                entity.Property(e => e.XflightH).HasColumnName("XFlightH");

                entity.Property(e => e.XflightM).HasColumnName("XFlightM");

                entity.Property(e => e.XflightNumber)
                    .HasMaxLength(4000)
                    .HasColumnName("XFlightNumber");

                entity.Property(e => e.XflightStatusId).HasColumnName("XFlightStatusId");

                entity.Property(e => e.XfromAirport)
                    .HasMaxLength(255)
                    .HasColumnName("XFromAirport");

                entity.Property(e => e.XfromAirportId).HasColumnName("XFromAirportId");

                entity.Property(e => e.Xlanding)
                    .HasColumnType("datetime")
                    .HasColumnName("XLanding");

                entity.Property(e => e.XoffBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("XOffBlock");

                entity.Property(e => e.XonBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("XOnBlock");

                entity.Property(e => e.XregisterId).HasColumnName("XRegisterId");

                entity.Property(e => e.Xsta)
                    .HasColumnType("datetime")
                    .HasColumnName("XSTA");

                entity.Property(e => e.Xstd)
                    .HasColumnType("datetime")
                    .HasColumnName("XSTD");

                entity.Property(e => e.XtakeOff)
                    .HasColumnType("datetime")
                    .HasColumnName("XTakeOff");

                entity.Property(e => e.XtoAirport)
                    .HasMaxLength(255)
                    .HasColumnName("XToAirport");

                entity.Property(e => e.XtoAirportId).HasColumnName("XToAirportId");
            });

            modelBuilder.Entity<Xflight>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XFlight");

                entity.Property(e => e.Acreg)
                    .HasMaxLength(255)
                    .HasColumnName("ACReg");

                entity.Property(e => e.Actype)
                    .HasMaxLength(255)
                    .HasColumnName("ACType");

                entity.Property(e => e.AlternateStation).HasMaxLength(255);

                entity.Property(e => e.Ata)
                    .HasMaxLength(255)
                    .HasColumnName("ATA");

                entity.Property(e => e.Atd)
                    .HasMaxLength(255)
                    .HasColumnName("ATD");

                entity.Property(e => e.BagPiece).HasMaxLength(255);

                entity.Property(e => e.Baggage).HasMaxLength(255);

                entity.Property(e => e.CargoPiece).HasMaxLength(255);

                entity.Property(e => e.CargoWeight).HasMaxLength(255);

                entity.Property(e => e.DateUtc)
                    .HasMaxLength(255)
                    .HasColumnName("DateUTC");

                entity.Property(e => e.Female).HasMaxLength(255);

                entity.Property(e => e.FuelDefuel).HasMaxLength(255);

                entity.Property(e => e.FuelRemain).HasMaxLength(255);

                entity.Property(e => e.FuelTaxi).HasMaxLength(255);

                entity.Property(e => e.FuelTotal).HasMaxLength(255);

                entity.Property(e => e.FuelTrip).HasMaxLength(255);

                entity.Property(e => e.FuelUnit).HasMaxLength(255);

                entity.Property(e => e.FuelUpLift).HasMaxLength(255);

                entity.Property(e => e.Male).HasMaxLength(255);

                entity.Property(e => e.OffBlock).HasMaxLength(255);

                entity.Property(e => e.OnBlock).HasMaxLength(255);

                entity.Property(e => e.OnRunway).HasMaxLength(255);

                entity.Property(e => e.OverPax).HasMaxLength(255);

                entity.Property(e => e.Parking).HasMaxLength(255);

                entity.Property(e => e.PaxAdl)
                    .HasMaxLength(255)
                    .HasColumnName("PaxADL");

                entity.Property(e => e.PaxChd)
                    .HasMaxLength(255)
                    .HasColumnName("PaxCHD");

                entity.Property(e => e.PaxInf)
                    .HasMaxLength(255)
                    .HasColumnName("PaxINF");

                entity.Property(e => e.Paxstation)
                    .HasMaxLength(255)
                    .HasColumnName("PAXStation");

                entity.Property(e => e.SaveTime).HasMaxLength(255);

                entity.Property(e => e.Sta)
                    .HasMaxLength(255)
                    .HasColumnName("STA");

                entity.Property(e => e.StationIncomeCurrency).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.Std)
                    .HasMaxLength(255)
                    .HasColumnName("STD");

                entity.Property(e => e.Tag1).HasMaxLength(255);

                entity.Property(e => e.Tag2).HasMaxLength(255);

                entity.Property(e => e.Tag3).HasMaxLength(255);

                entity.Property(e => e.TakeOff).HasMaxLength(255);

                entity.Property(e => e.TotalSeats).HasMaxLength(255);

                entity.Property(e => e.XdateUtc)
                    .HasColumnType("date")
                    .HasColumnName("XDateUTC");

                entity.Property(e => e.XflightH).HasColumnName("XFlightH");

                entity.Property(e => e.XflightM).HasColumnName("XFlightM");

                entity.Property(e => e.XflightNumber)
                    .HasMaxLength(4000)
                    .HasColumnName("XFlightNumber");

                entity.Property(e => e.XflightStatusId).HasColumnName("XFlightStatusId");

                entity.Property(e => e.XfromAirport)
                    .HasMaxLength(255)
                    .HasColumnName("XFromAirport");

                entity.Property(e => e.XfromAirportId).HasColumnName("XFromAirportId");

                entity.Property(e => e.Xlanding)
                    .HasColumnType("datetime")
                    .HasColumnName("XLanding");

                entity.Property(e => e.XoffBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("XOffBlock");

                entity.Property(e => e.XonBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("XOnBlock");

                entity.Property(e => e.XregisterId).HasColumnName("XRegisterId");

                entity.Property(e => e.Xsta)
                    .HasColumnType("datetime")
                    .HasColumnName("XSTA");

                entity.Property(e => e.Xstd)
                    .HasColumnType("datetime")
                    .HasColumnName("XSTD");

                entity.Property(e => e.XtakeOff)
                    .HasColumnType("datetime")
                    .HasColumnName("XTakeOff");

                entity.Property(e => e.XtoAirport)
                    .HasMaxLength(255)
                    .HasColumnName("XToAirport");

                entity.Property(e => e.XtoAirportId).HasColumnName("XToAirportId");
            });

            modelBuilder.Entity<Xinit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("XInit");

                entity.Property(e => e.InitEnd).HasColumnType("datetime");

                entity.Property(e => e.InitFlts)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.InitFromIata).HasColumnName("InitFromIATA");

                entity.Property(e => e.InitGroup).HasMaxLength(500);

                entity.Property(e => e.InitRank)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.InitRestTo).HasColumnType("datetime");

                entity.Property(e => e.InitRoute)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.InitScheduleName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InitStart).HasColumnType("datetime");

                entity.Property(e => e.InitToIata).HasColumnName("InitToIATA");
            });

            modelBuilder.Entity<Xlsflt>(entity =>
            {
                entity.ToTable("XLSFLT");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AirlineOperatorsId).HasColumnName("AirlineOperatorsID");

                entity.Property(e => e.Alt1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT1");

                entity.Property(e => e.Alt2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT2");

                entity.Property(e => e.Alt3)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT3");

                entity.Property(e => e.Alt4)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT4");

                entity.Property(e => e.Alt5)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ALT5");

                entity.Property(e => e.ArrivalRemark).HasMaxLength(2000);

                entity.Property(e => e.AttAsr).HasColumnName("AttASR");

                entity.Property(e => e.CancelDate).HasColumnType("datetime");

                entity.Property(e => e.CancelRemark).HasMaxLength(500);

                entity.Property(e => e.Cargo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("CARGO");

                entity.Property(e => e.CargoUnitId).HasColumnName("CargoUnitID");

                entity.Property(e => e.ChocksIn).HasColumnType("datetime");

                entity.Property(e => e.ChocksOut).HasColumnType("datetime");

                entity.Property(e => e.CommanderNote).HasMaxLength(2000);

                entity.Property(e => e.CpcrewId).HasColumnName("CPCrewId");

                entity.Property(e => e.Cpdh).HasColumnName("CPDH");

                entity.Property(e => e.Cpfdpid).HasColumnName("CPFDPId");

                entity.Property(e => e.CpfdpitemId).HasColumnName("CPFDPItemId");

                entity.Property(e => e.CpflightTypeId).HasColumnName("CPFlightTypeId");

                entity.Property(e => e.Cpinstructor)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPInstructor");

                entity.Property(e => e.Cpisccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPISCCM");

                entity.Property(e => e.Cpp1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP1");

                entity.Property(e => e.Cpp2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPP2");

                entity.Property(e => e.CppositionId).HasColumnName("CPPositionId");

                entity.Property(e => e.Cpregister)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPRegister");

                entity.Property(e => e.Cpsccm)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CPSCCM");

                entity.Property(e => e.DateApplied).HasColumnType("datetime");

                entity.Property(e => e.DateCreate).HasColumnType("datetime");

                entity.Property(e => e.Defuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DepartureRemark).HasMaxLength(2000);

                entity.Property(e => e.FlightDate).HasColumnType("datetime");

                entity.Property(e => e.FlightGroupId).HasColumnName("FlightGroupID");

                entity.Property(e => e.FlightNumber).HasMaxLength(50);

                entity.Property(e => e.FlightStatusId).HasColumnName("FlightStatusID");

                entity.Property(e => e.FlightTypeId).HasColumnName("FlightTypeID");

                entity.Property(e => e.FpflightHh).HasColumnName("FPFlightHH");

                entity.Property(e => e.FpflightMm).HasColumnName("FPFlightMM");

                entity.Property(e => e.Fpfuel)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FPFuel");

                entity.Property(e => e.FuelActual).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelArrival).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDensity).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelDeparture).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelPlanned).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FuelUnitId).HasColumnName("FuelUnitID");

                entity.Property(e => e.Guid).HasColumnName("GUID");

                entity.Property(e => e.Gwland)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("GWLand");

                entity.Property(e => e.Gwto)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("GWTO");

                entity.Property(e => e.JlapproverId).HasColumnName("JLApproverId");

                entity.Property(e => e.Jlblhh).HasColumnName("JLBLHH");

                entity.Property(e => e.Jlblmm).HasColumnName("JLBLMM");

                entity.Property(e => e.Jldate)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDate");

                entity.Property(e => e.JldateApproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDateApproved");

                entity.Property(e => e.JldatePicapproved)
                    .HasColumnType("datetime")
                    .HasColumnName("JLDatePICApproved");

                entity.Property(e => e.Jllanding)
                    .HasColumnType("datetime")
                    .HasColumnName("JLLanding");

                entity.Property(e => e.Jlno)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("JLNo");

                entity.Property(e => e.JloffBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("JLOffBlock");

                entity.Property(e => e.JlonBlock)
                    .HasColumnType("datetime")
                    .HasColumnName("JLOnBlock");

                entity.Property(e => e.JlsignedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("JLSignedBy");

                entity.Property(e => e.JltakeOff)
                    .HasColumnType("datetime")
                    .HasColumnName("JLTakeOff");

                entity.Property(e => e.JluserId).HasColumnName("JLUserId");

                entity.Property(e => e.Landing).HasColumnType("datetime");

                entity.Property(e => e.Ltr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LTR");

                entity.Property(e => e.Osta)
                    .HasColumnType("datetime")
                    .HasColumnName("OSTA");

                entity.Property(e => e.OtoAirportIata)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OToAirportIATA");

                entity.Property(e => e.OtoAirportId).HasColumnName("OToAirportId");

                entity.Property(e => e.Pf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PF");

                entity.Property(e => e.Pflr).HasColumnName("PFLR");

                entity.Property(e => e.Pic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PIC");

                entity.Property(e => e.Picid).HasColumnName("PICId");

                entity.Property(e => e.RampDate).HasColumnType("datetime");

                entity.Property(e => e.RampRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RedirectDate).HasColumnType("datetime");

                entity.Property(e => e.RedirectRemark).HasMaxLength(500);

                entity.Property(e => e.RegisterId).HasColumnName("RegisterID");

                entity.Property(e => e.RvsmFltCpt)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_CPT");

                entity.Property(e => e.RvsmFltFo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_FO");

                entity.Property(e => e.RvsmFltStby)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_FLT_STBY");

                entity.Property(e => e.RvsmGndCpt)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_CPT");

                entity.Property(e => e.RvsmGndFo)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_FO");

                entity.Property(e => e.RvsmGndStby)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("RVSM_GND_STBY");

                entity.Property(e => e.SerialNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Sic)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SIC");

                entity.Property(e => e.Sicid).HasColumnName("SICId");

                entity.Property(e => e.Sta)
                    .HasColumnType("datetime")
                    .HasColumnName("STA");

                entity.Property(e => e.Std)
                    .HasColumnType("datetime")
                    .HasColumnName("STD");

                entity.Property(e => e.Takeoff).HasColumnType("datetime");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.Updnote)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UPDNOTE");

                entity.Property(e => e.UsedFuel).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Utcdiff).HasColumnName("UTCDIFF");
            });

            modelBuilder.Entity<Xy>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("xy");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
